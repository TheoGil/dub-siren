{"version":3,"sources":["webpack:///./node_modules/tone/Tone/core/Tone.js","webpack:///./node_modules/gsap/TweenLite.js","webpack:///./node_modules/tone/Tone/signal/Signal.js","webpack:///./node_modules/tone/Tone/core/AudioNode.js","webpack:///./node_modules/tone/Tone/core/Gain.js","webpack:///./node_modules/tone/Tone/type/Type.js","webpack:///./node_modules/tone/Tone/signal/Multiply.js","webpack:///./node_modules/tone/Tone/source/Source.js","webpack:///./node_modules/tone/Tone/signal/WaveShaper.js","webpack:///./node_modules/tone/Tone/effect/Effect.js","webpack:///./node_modules/tone/Tone/component/Merge.js","webpack:///./node_modules/tone/Tone/component/Filter.js","webpack:///./node_modules/tone/Tone/core/Param.js","webpack:///./node_modules/tone/Tone/signal/Subtract.js","webpack:///./node_modules/tone/Tone/component/LFO.js","webpack:///./node_modules/tone/Tone/core/Buffer.js","webpack:///./node_modules/tone/Tone/core/Context.js","webpack:///./node_modules/tone/Tone/component/Split.js","webpack:///./node_modules/tone/Tone/core/Delay.js","webpack:///./node_modules/tone/Tone/source/Oscillator.js","webpack:///./node_modules/tone/Tone/core/Transport.js","webpack:///./node_modules/tone/Tone/effect/StereoEffect.js","webpack:///./node_modules/tone/Tone/index.js","webpack:///./node_modules/tone/Tone/core/Timeline.js","webpack:///./node_modules/tone/Tone/component/CrossFade.js","webpack:///./node_modules/tone/Tone/signal/AudioToGain.js","webpack:///./node_modules/tone/Tone/instrument/Instrument.js","webpack:///./node_modules/tone/Tone/component/AmplitudeEnvelope.js","webpack:///./node_modules/tone/Tone/signal/Add.js","webpack:///./node_modules/tone/Tone/signal/Zero.js","webpack:///./node_modules/tone/Tone/component/Volume.js","webpack:///./node_modules/tone/Tone/signal/Scale.js","webpack:///./node_modules/tone/Tone/instrument/Monophonic.js","webpack:///./node_modules/core-js/modules/_global.js","webpack:///./node_modules/core-js/modules/_is-object.js","webpack:///./node_modules/tone/Tone/signal/SignalBase.js","webpack:///./node_modules/tone/Tone/core/Emitter.js","webpack:///./node_modules/tone/Tone/shim/AudioContext.js","webpack:///./node_modules/tone/Tone/core/TimelineState.js","webpack:///./node_modules/tone/Tone/effect/FeedbackEffect.js","webpack:///./node_modules/tone/Tone/source/BufferSource.js","webpack:///./node_modules/core-js/modules/_descriptors.js","webpack:///./node_modules/tone/Tone/component/Envelope.js","webpack:///./node_modules/tone/Tone/type/Frequency.js","webpack:///./node_modules/tone/Tone/type/TransportTime.js","webpack:///./node_modules/tone/Tone/component/Analyser.js","webpack:///./node_modules/tone/Tone/component/Compressor.js","webpack:///./node_modules/tone/Tone/signal/ScaleExp.js","webpack:///./node_modules/tone/Tone/component/FrequencyEnvelope.js","webpack:///./node_modules/tone/Tone/core/Master.js","webpack:///./node_modules/tone/Tone/source/Noise.js","webpack:///./node_modules/tone/Tone/instrument/Synth.js","webpack:///./node_modules/tone/Tone/source/OmniOscillator.js","webpack:///./node_modules/core-js/modules/_export.js","webpack:///./node_modules/core-js/modules/_core.js","webpack:///./node_modules/core-js/modules/_fails.js","webpack:///./node_modules/tone/Tone/shim/OfflineAudioContext.js","webpack:///./node_modules/tone/Tone/type/Time.js","webpack:///./node_modules/tone/Tone/type/TimeBase.js","webpack:///./node_modules/tone/Tone/shim/BufferSourceNode.js","webpack:///./node_modules/tone/Tone/core/OfflineContext.js","webpack:///./node_modules/tone/Tone/signal/Pow.js","webpack:///./node_modules/tone/Tone/component/Panner.js","webpack:///./node_modules/tone/Tone/component/MultibandSplit.js","webpack:///./node_modules/tone/Tone/component/FeedbackCombFilter.js","webpack:///./node_modules/tone/Tone/component/Follower.js","webpack:///./node_modules/tone/Tone/source/TickSource.js","webpack:///./node_modules/tone/Tone/core/TransportEvent.js","webpack:///./node_modules/tone/Tone/type/Ticks.js","webpack:///./node_modules/tone/Tone/component/LowpassCombFilter.js","webpack:///./node_modules/tone/Tone/component/MidSideSplit.js","webpack:///./node_modules/tone/Tone/component/MidSideMerge.js","webpack:///./node_modules/tone/Tone/event/Event.js","webpack:///./node_modules/tone/Tone/source/PulseOscillator.js","webpack:///./node_modules/tone/Tone/source/FMOscillator.js","webpack:///./node_modules/core-js/modules/es6.object.define-property.js","webpack:///./node_modules/core-js/modules/_hide.js","webpack:///./node_modules/core-js/modules/_object-dp.js","webpack:///./node_modules/core-js/modules/_uid.js","webpack:///./node_modules/core-js/modules/_shared.js","webpack:///./node_modules/core-js/modules/_ctx.js","webpack:///./node_modules/core-js/modules/_a-function.js","webpack:///./node_modules/core-js/modules/_cof.js","webpack:///./node_modules/core-js/modules/es6.function.bind.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/tone/Tone/shim/WaveShaperNode.js","webpack:///./node_modules/tone/Tone/shim/ConstantSourceNode.js","webpack:///./node_modules/tone/Tone/shim/AnalyserNode.js","webpack:///./node_modules/tone/Tone/component/PanVol.js","webpack:///./node_modules/tone/Tone/signal/Negate.js","webpack:///./node_modules/tone/Tone/signal/EqualPowerGain.js","webpack:///./node_modules/tone/Tone/shim/StereoPannerNode.js","webpack:///./node_modules/tone/Tone/component/Solo.js","webpack:///./node_modules/tone/Tone/signal/Abs.js","webpack:///./node_modules/tone/Tone/component/ScaledEnvelope.js","webpack:///./node_modules/tone/Tone/signal/GreaterThan.js","webpack:///./node_modules/tone/Tone/signal/GreaterThanZero.js","webpack:///./node_modules/tone/Tone/core/Clock.js","webpack:///./node_modules/tone/Tone/signal/TickSignal.js","webpack:///./node_modules/tone/Tone/core/IntervalTimeline.js","webpack:///./node_modules/tone/Tone/core/TransportRepeatEvent.js","webpack:///./node_modules/tone/Tone/source/OscillatorNode.js","webpack:///./node_modules/tone/Tone/shim/AudioBuffer.js","webpack:///./node_modules/tone/Tone/control/CtrlPattern.js","webpack:///./node_modules/tone/Tone/core/Buffers.js","webpack:///./node_modules/tone/Tone/core/Offline.js","webpack:///./node_modules/tone/Tone/signal/Modulo.js","webpack:///./node_modules/tone/Tone/effect/Convolver.js","webpack:///./node_modules/tone/Tone/effect/MidSideEffect.js","webpack:///./node_modules/tone/Tone/effect/StereoXFeedbackEffect.js","webpack:///./node_modules/tone/Tone/event/Loop.js","webpack:///./node_modules/tone/Tone/event/Part.js","webpack:///./node_modules/tone/Tone/source/PWMOscillator.js","webpack:///./node_modules/tone/Tone/source/AMOscillator.js","webpack:///./node_modules/tone/Tone/source/FatOscillator.js","webpack:///./node_modules/tone/Tone/instrument/MonoSynth.js","webpack:///./node_modules/tone/Tone/source/Player.js","webpack:///./node_modules/startaudiocontext/StartAudioContext.js","webpack:///./node_modules/gsap/CSSPlugin.js","webpack:///./node_modules/gsap/Draggable.js","webpack:///./node_modules/core-js/modules/_an-object.js","webpack:///./node_modules/core-js/modules/_ie8-dom-define.js","webpack:///./node_modules/core-js/modules/_dom-create.js","webpack:///./node_modules/core-js/modules/_to-primitive.js","webpack:///./node_modules/core-js/modules/_property-desc.js","webpack:///./node_modules/core-js/modules/_redefine.js","webpack:///./node_modules/core-js/modules/_has.js","webpack:///./node_modules/core-js/modules/_function-to-string.js","webpack:///./node_modules/core-js/modules/_library.js","webpack:///./node_modules/core-js/modules/es6.array.for-each.js","webpack:///./node_modules/core-js/modules/_array-methods.js","webpack:///./node_modules/core-js/modules/_iobject.js","webpack:///./node_modules/core-js/modules/_to-object.js","webpack:///./node_modules/core-js/modules/_defined.js","webpack:///./node_modules/core-js/modules/_to-length.js","webpack:///./node_modules/core-js/modules/_to-integer.js","webpack:///./node_modules/core-js/modules/_array-species-create.js","webpack:///./node_modules/core-js/modules/_array-species-constructor.js","webpack:///./node_modules/core-js/modules/_is-array.js","webpack:///./node_modules/core-js/modules/_wks.js","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./node_modules/core-js/modules/_bind.js","webpack:///./node_modules/core-js/modules/_invoke.js","webpack:///./node_modules/tone/Tone/version.js","webpack:///./node_modules/tone/Tone/component/Channel.js","webpack:///./node_modules/tone/Tone/component/EQ3.js","webpack:///./node_modules/tone/Tone/component/FFT.js","webpack:///./node_modules/tone/Tone/component/Gate.js","webpack:///./node_modules/tone/Tone/component/Limiter.js","webpack:///./node_modules/tone/Tone/component/Meter.js","webpack:///./node_modules/tone/Tone/component/MidSideCompressor.js","webpack:///./node_modules/tone/Tone/component/Mono.js","webpack:///./node_modules/tone/Tone/component/MultibandCompressor.js","webpack:///./node_modules/tone/Tone/component/Panner3D.js","webpack:///./node_modules/tone/Tone/component/Waveform.js","webpack:///./node_modules/tone/Tone/control/CtrlInterpolate.js","webpack:///./node_modules/tone/Tone/control/CtrlMarkov.js","webpack:///./node_modules/tone/Tone/control/CtrlRandom.js","webpack:///./node_modules/tone/Tone/core/Bus.js","webpack:///./node_modules/tone/Tone/core/Draw.js","webpack:///./node_modules/tone/Tone/core/Listener.js","webpack:///./node_modules/tone/Tone/effect/AutoFilter.js","webpack:///./node_modules/tone/Tone/effect/AutoPanner.js","webpack:///./node_modules/tone/Tone/effect/AutoWah.js","webpack:///./node_modules/tone/Tone/effect/BitCrusher.js","webpack:///./node_modules/tone/Tone/effect/Chebyshev.js","webpack:///./node_modules/tone/Tone/effect/Chorus.js","webpack:///./node_modules/tone/Tone/effect/Distortion.js","webpack:///./node_modules/tone/Tone/effect/FeedbackDelay.js","webpack:///./node_modules/tone/Tone/effect/Freeverb.js","webpack:///./node_modules/tone/Tone/effect/JCReverb.js","webpack:///./node_modules/tone/Tone/effect/Phaser.js","webpack:///./node_modules/tone/Tone/effect/PingPongDelay.js","webpack:///./node_modules/tone/Tone/effect/PitchShift.js","webpack:///./node_modules/tone/Tone/effect/Reverb.js","webpack:///./node_modules/tone/Tone/effect/StereoFeedbackEffect.js","webpack:///./node_modules/tone/Tone/effect/StereoWidener.js","webpack:///./node_modules/tone/Tone/effect/Tremolo.js","webpack:///./node_modules/tone/Tone/effect/Vibrato.js","webpack:///./node_modules/tone/Tone/event/Pattern.js","webpack:///./node_modules/tone/Tone/event/Sequence.js","webpack:///./node_modules/tone/Tone/instrument/AMSynth.js","webpack:///./node_modules/tone/Tone/instrument/DuoSynth.js","webpack:///./node_modules/tone/Tone/instrument/FMSynth.js","webpack:///./node_modules/tone/Tone/instrument/MembraneSynth.js","webpack:///./node_modules/tone/Tone/instrument/MetalSynth.js","webpack:///./node_modules/tone/Tone/instrument/NoiseSynth.js","webpack:///./node_modules/tone/Tone/instrument/PluckSynth.js","webpack:///./node_modules/tone/Tone/instrument/PolySynth.js","webpack:///./node_modules/tone/Tone/instrument/Sampler.js","webpack:///./node_modules/tone/Tone/shim/OscillatorNode.js","webpack:///./node_modules/tone/Tone/signal/GainToAudio.js","webpack:///./node_modules/tone/Tone/signal/Normalize.js","webpack:///./node_modules/tone/Tone/signal/TransportTimelineSignal.js","webpack:///./node_modules/tone/Tone/source/GrainPlayer.js","webpack:///./node_modules/tone/Tone/source/Players.js","webpack:///./node_modules/tone/Tone/source/UserMedia.js","webpack:///./node_modules/tone/Tone/type/Midi.js","webpack:///(webpack)/buildin/harmony-module.js"],"names":["global","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","__webpack_require__","undefined","version","Tone","this","Error","prototype","toString","className","isLetter","match","sameConstructor","constructor","isFunction","dispose","set","params","value","rampTime","isObject","isString","tmpObj","paramLoop","attr","parent","indexOf","attrSplit","split","i","length","splice","innerParam","join","param","isUndef","Signal","Param","rampTo","AudioParam","TimeBase","get","_collectDefaults","ret","subRet","j","subAttr","isDefined","constr","defaults","Object","keys","_super","superDefs","push","values","options","defaultArg","given","fallback","givenProp","fallbackProp","log","debug","TONE_DEBUG_CLASS","args","Array","from","arguments","unshift","console","apply","assert","statement","error","connectSeries","currentUnit","toUnit","connect","val","isNumber","arg","call","isBoolean","isArray","isNote","test","noOp","_readOnly","property","defineProperty","writable","enumerable","_writable","State","Started","Stopped","Paused","window","equalPowerScale","percent","piFactor","Math","PI","sin","dbToGain","db","pow","gainToDb","gain","LN10","intervalToFrequencyRatio","interval","now","context","immediate","currentTime","extend","child","TempConstructor","_audioContext","start","resume","isContext","Context","emit","setContext","ctx","sampleRate","hasAudioContext","hasOwnProperty","hasPromises","Boolean","getContext","resolve","initialized","resCallback","off","on","exports","module","d","__webpack_exports__","_gsScope","globals","TweenLite","TweenPlugin","EventDispatcher","_exports","_doc","document","_globals","GreenSockGlobals","a","p","_ticker","_tickerActive","array","_namespace","ns","gs","_slice","b","l","_emptyFunc","_isArray","obj","_defLookup","Definition","dependencies","func","sc","gsClass","_classes","check","init","cur","n","cl","missing","pop","_gsDefine","_class","_baseParams","Ease","extraParams","type","power","_func","_type","_power","_params","concat","_easeMap","map","_easeReg","register","ease","names","types","create","e","name","na","ta","easing","getRatio","_calcEnd","t","pw","r","linear","Linear","easeIn","swing","Quad","easeInOut","target","_listeners","_eventTarget","addEventListener","callback","scope","useParam","priority","listener","list","index","wake","c","s","pr","up","removeEventListener","dispatchEvent","slice","_reqAnimFrame","requestAnimationFrame","_cancelAnimFrame","cancelAnimationFrame","_getTime","Date","getTime","_lastUpdate","fps","useRAF","_fps","_req","_id","_gap","_nextTime","_self","_startTime","_useRAF","_lagThreshold","_adjustedLag","_tick","manual","overlap","dispatch","elapsed","time","frame","tick","lagSmoothing","threshold","adjustedLag","min","sleep","clearTimeout","seamless","f","setTimeout","visibilityState","Ticker","events","Animation","duration","vars","_duration","_totalDuration","_delay","Number","delay","_timeScale","_active","immediateRender","data","_reversed","reversed","_rootTimeline","tl","useFrames","_rootFramesTimeline","add","_time","paused","ticker","_dirty","_gc","_initted","_paused","_totalTime","_rawPrevTime","_next","_last","_onUpdate","_timeline","timeline","_checkTimeout","unref","play","suppressEvents","seek","pause","atTime","totalTime","restart","includeDelay","reverse","totalDuration","render","force","invalidate","_enabled","isActive","rawTime","startTime","enabled","ignoreTimeline","_remove","_kill","kill","_uncache","includeSelf","tween","_swapSelfInParams","copy","_callback","v","callbackScope","eventCallback","substr","smoothChildTiming","uncapped","_pauseTime","_lazyTweens","_lazyRender","progress","totalProgress","ratio","_sortChildren","endTime","includeRepeats","timeScale","pauseTime","raw","SimpleTimeline","autoRemoveChildren","_first","_recent","insert","position","align","stagger","prevTween","st","_prev","skipDisable","next","selector","targ","targets","isSelector","jquery","nodeType","style","overwrite","_overwrite","_overwriteLookup","defaultOverwrite","_targets","_propLookup","_siblings","_register","_applyOverwrite","_isSelector","_firstPT","_overwrittenProps","_startAt","_notifyPluginsOfEnabled","_lazy","defaultEase","_ease","autoSleep","$","jQuery","querySelectorAll","getElementById","charAt","_lazyLookup","_numbersExp","_relExp","_setRatio","pt","blob","end","m","_tween","_target","fp","_blobRound","_blobDif","filter","startNums","endNums","num","nonNumbers","currentNum","charIndex","color","_applyPT","parseFloat","parseInt","round","setRatio","_addPropTween","prop","overwriteProp","mod","funcParam","stringFilter","getterName","isRelative","pg","isNaN","replace","defaultStringFilter","_internals","lazyTweens","blobDif","_plugins","_tweenLookup","tweenLookup","_tweenLookupNum","_reservedProps","reservedProps","onComplete","onCompleteParams","onCompleteScope","runBackwards","startAt","onUpdate","onUpdateParams","onUpdateScope","onStart","onStartParams","onStartScope","onReverseComplete","onReverseCompleteParams","onReverseCompleteScope","onRepeat","onRepeatParams","onRepeatScope","easeParams","yoyo","repeat","repeatDelay","autoCSS","lazy","onOverwrite","id","yoyoEase","none","all","auto","concurrent","allOnStart","preexisting","true","false","_nextGCFrame","lazyRender","_updateRoot","tweens","scrub","_gsTweenID","_onOverwrite","overwrittenTween","overwritingTween","killedProps","r1","r2","props","mode","siblings","changed","curTween","globalStart","overlaps","oCount","zeroDur","_checkOverlap","_tinyNum","reference","ts","_init","initPlugins","startVars","op","dur","to","config","_easeType","_easePower","_initProps","_onPluginEvent","propLookup","overwrittenProps","plugin","css","_autoCSS","_onInitTween","_priority","_overwriteProps","_onInitAllProps","_onDisable","_onEnable","isComplete","rawPrevTime","prevTime","prevRawPrevTime","killProps","record","killed","simultaneousOverwrite","firstPT","_tempKill","fromTo","fromVars","toVars","delayedCall","getTweensOf","onlyActive","killTweensOf","killDelayedCallsTo","_propName","API","_addTween","lookup","_mod","_roundProps","pt2","first","last","activate","plugins","propName","overwriteProps","initAll","Plugin","toUpperCase","_gsQueue","nonGlobals","com","greensock","core","Power1","Power2","Power3","Power4","_constantSource","createConstantSource","_param","offset","output","input","units","Type","Default","convert","SignalBase","disconnect","getValueAtTime","AudioNode","_context","createInsOuts","inputs","outputs","createGain","channelCount","channelCountMode","channelInterpretation","unit","outputNum","inputNum","destination","chain","fan","Gain","_gainNode","Time","Frequency","TransportTime","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","toSeconds","toFrequency","freq","valueOf","toTicks","Transport","ticks","Multiply","_mult","proxy","Source","_volume","Volume","volume","_state","TimelineState","memory","_synced","_scheduled","mute","state","seconds","_start","_stop","cancel","setStateAtTime","event","sched","schedule","bind","_syncedStart","stop","sync","stateEvent","startOffset","_syncedStop","getSecondsAtTime","max","sampleTime","unsync","clear","WaveShaper","mapping","bufferLen","_shaper","createWaveShaper","_curve","curve","isFinite","Float32Array","setMap","len","normalized","oversample","oversampling","includes","RangeError","Effect","_dryWet","CrossFade","wet","fade","effectSend","effectReturn","connectEffect","effect","Merge","left","right","_merger","createChannelMerger","Filter","_filters","frequency","detune","Q","_rolloff","rolloff","TypeError","cascadingCount","count","createBiquadFilter","connectionChain","getFrequencyResponse","totalResponse","freqValues","magValues","phaseValues","forEach","filterClone","overridden","_events","Timeline","setValueAtTime","_toUnits","_initialValue","_fromUnits","cancelScheduledValues","Infinity","minValue","maxValue","_minOutput","AutomationType","Exponential","Target","SetValue","Cancel","after","getAfter","before","initialValue","defaultValue","previousVal","previous","getBefore","_exponentialApproach","constant","_linearInterpolate","_exponentialInterpolate","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","scaling","segTime","valueAtTime","t0","v0","v1","exp","t1","Subtract","_sum","_neg","Negate","LFO","_oscillator","Oscillator","amplitude","_stoppedSignal","_zeros","Zero","_stoppedValue","_a2g","AudioToGain","_scaler","Scale","_units","phase","syncFrequency","unsyncFrequency","_getInitialValue","currentMin","currentMax","node","Buffer","_buffer","_xhr","onload","url","AudioBuffer","loaded","load","then","catch","onerror","buffer","Promise","buff","err","_removeFromDownloadQueue","abort","numberOfChannels","fromArray","isMultidimensional","channels","createBuffer","copyToChannel","toMono","chanNum","toArray","outputArray","numChannels","channel","channelArray","sample","getChannelData","startSamples","floor","endSamples","replacement","_reverse","rev","Emitter","mixin","_downloadQueue","baseUrl","fromUrl","request","matches","extensions","extension","supportsType","onError","onProgress","XMLHttpRequest","open","responseType","status","decodeAudioData","response","lengthComputable","total","send","cancelDownloads","createElement","canPlayType","removeEvents","success","fail","AudioContext","rawContext","_defineProperty","_latencyHint","latencyHint","_constants","lookAhead","_computedUpdateInterval","clockSource","updateInterval","_timeouts","_timeoutIds","_timeoutLoop","onstatechange","master","close","closePromise","TONE_AUDIO_CONTEXT","getConstant","arr","createBufferSource","loop","peek","shift","fn","timeout","remove","hint","con","_updateInterval","_createClock","Worker","Timeout","Offline","_createWorker","URL","webkitURL","Blob","toFixed","blobUrl","createObjectURL","worker","onmessage","_worker","_createTimeout","_timeout","postMessage","_disposeClock","terminate","nativeConnect","nativeDisconnect","toneConnect","B","outNum","inNum","supported","TONE_SILENCE_VERSION_LOGGING","prefix","printString","warn","Split","_splitter","createChannelSplitter","Delay","_maxDelay","maxDelay","delayTime","_delayNode","createDelay","_wave","_partials","partials","_partialCount","partialCount","_phase","Custom","baseType","Sine","Triangle","Sawtooth","Square","OscillatorNode","setPeriodicWave","cancelStop","syncSignal","unsyncSignal","coefs","_getRealImaginary","periodicWave","createPeriodicWave","partial","exec","periodicWaveSize","fftSize","real","imag","cos","_inverseFFT","sum","twoPi","_loopStart","_loopEnd","_ppq","TransportConstructor","PPQ","_clock","Clock","_processTick","_bindClockEvents","bpm","_timeSignature","timeSignature","_scheduledEvents","_repeatedEvents","IntervalTimeline","_syncedSignals","_swingTicks","_swingAmount","transport","swingSubdivision","loopStart","loopEnd","isTransport","tickTime","amount","setTicksAtTime","forEachAtTime","invoke","TransportEvent","_addEvent","scheduleRepeat","TransportRepeatEvent","scheduleOnce","once","eventId","item","forEachFrom","getStateAtTime","toggle","timeSig","startPosition","endPosition","setLoopPoints","toNotation","subdivision","getTicksAtTime","toBarsBeatsSixteenths","timeToTicks","ppq","nextSubdivision","remainingTicks","nextTickTime","signal","ratioSignal","initial","syncedSignal","StereoEffect","_split","effectSendL","effectSendR","_merge","effectReturnL","effectReturnR","_search","diff","comparator","cancelBefore","previousEvent","beginning","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","initialFade","_equalPowerA","EqualPowerGain","_equalPowerB","_one","_invert","_norm","x","Instrument","triggerAttack","triggerRelease","_syncMethod","method","timePosition","originalMethod","_original_triggerAttack","_original_triggerRelease","triggerAttackRelease","note","velocity","AmplitudeEnvelope","Envelope","_sig","Add","_gain","_unmutedVolume","outputMin","outputMax","_outputMin","_outputMax","_scale","_add","_setRange","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","getLevelAtTime","envelope","portTime","self","Function","__g","it","outputNumber","inputNumber","eventName","boundCallback","ev","eventList","object","functions","emitterFunc","webkitAudioContext","suspend","source","createGainNode","createDelayNode","decodeAudioDataPromise","offlineContext","OfflineAudioContext","audioData","Uint32Array","_native_decodeAudioData","_initial","getLastState","getNextState","FeedbackEffect","_feedbackGain","feedback","BufferSource","onended","_sourceStarted","_sourceStopped","_stopTime","_source","_onended","playbackRate","fadeIn","fadeOut","_onendedTimeout","fadeInTime","computedDur","fadeOutTime","additionalTail","attack","decay","sustain","release","_attackCurve","_releaseCurve","attackCurve","releaseCurve","decayCurve","_getCurve","direction","_setCurve","curveDef","_decayCurve","currentValue","decayValue","decayStart","k","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","ceil","sineCurve","bounceCurve","abs","invertCurve","out","exponential","bounce","In","Out","cosine","step","ripple","sine","_expressions","assign","midi","regexp","_defaultUnits","mtof","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","tr","q","_beatsToUnits","_getTimeSignature","transpose","harmonize","intervals","toMidi","ftom","toNote","log2","A4","scaleIndexToNote","quarterTime","quarters","_noArg","_frequencyToUnits","_ticksToUnits","beats","_secondsToUnits","cbb","cb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f#","fx","gbb","gb","g","g#","gx","abb","ab","a#","ax","bbb","bb","b#","bx","_now","Analyser","_analyser","createAnalyser","size","smoothing","Waveform","FFT","getValue","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","smoothingTimeConstant","Compressor","_compressor","createDynamicsCompressor","knee","ScaleExp","exponent","_exp","Pow","FrequencyEnvelope","ScaledEnvelope","_octaves","octaves","baseFrequency","Master","isMaster","toMaster","MasterConstructor","Noise","_playbackRate","_noiseBuffers","rate","random","_noiseCache","pink","channelNum","b0","b1","b2","b3","b4","b5","b6","white","brown","lastOut","Synth","oscillator","OmniOscillator","_sourceType","OmniOscType","_createNewOscillator","oscType","OscillatorConstructor","oldOsc","blockTime","SourceTypeNames","PulseOscillator","PWMOscillator","FMOscillator","AMOscillator","FatOscillator","sType","sourceType","width","spread","modulationType","mType","modulationIndex","harmonicity","modulationFrequency","hide","redefine","$export","key","own","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","P","IS_BIND","expProto","U","W","R","__e","webkitOfflineAudioContext","startRendering","_native_startRendering","done","oncomplete","renderedBuffer","quantize","capture","quantTo","subdiv","testNotations","closest","closestSeconds","notation","notationSeconds","measures","sixteenths","_getPPQ","_val","dot","scalar","hz","samples","default","_getBpm","trim","typeName","quantity","expr","matching","toSamples","toMilliseconds","ua","navigator","userAgent","OfflineContext","bufferSource","_native_start","_currentTime","_expScaler","_expFunc","Panner","initialPan","_panner","createStereoPanner","pan","MultibandSplit","low","_lowMidFilter","mid","high","lowFrequency","highFrequency","FeedbackCombFilter","_feedback","resonance","Follower","_abs","Abs","_filter","_sub","_smoothing","TickSource","TickSignal","_tickOffset","stopEvent","tmpEvent","lastState","elapsedTicks","periodStartTime","offsetEvent","elapsedSeconds","getDurationOfTicks","getTimeOfTick","absoluteTicks","forEachTickBetween","lastStateEvent","startTicks","_eventId","_once","LowpassCombFilter","_combFilter","_lowpass","dampening","MidSideSplit","_midAdd","SQRT1_2","_sideSubtract","side","MidSideMerge","_left","_timesTwoLeft","_right","_timesTwoRight","Event","_loop","_startOffset","_probability","probability","_humanize","humanize","_rescheduleEvents","startTick","_getLoopDuration","prob","variation","reschedulTime","lastEvent","loopDuration","_widthGate","_sawtooth","_thresh","_carrier","_modulator","_modulationNode","dP","createDesc","anObject","IE8_DOM_DEFINE","toPrimitive","O","Attributes","px","store","copyright","aFunction","that","_native_createWaveShaper","WaveShaperNode","_internalNode","ConstantSourceNode","_bufferSource","gainNode","_output","AnalyserNode","uint8","Uint8Array","getByteTimeDomainData","PanVol","_multiply","_eqPower","StereoPannerNode","rightWaveShaper","leftWaveShaper","leftGain","rightGain","merge","Solo","_soloBind","_soloed","solo","_isSoloed","_addSolo","_removeSolo","_currentSolo","_noSolos","GreaterThan","_gtz","GreaterThanZero","_nextTick","_tickSource","_boundLoop","when","currentTick","_wrapScheduleMethods","ticksUntilTime","_getTicksUntilEvent","prevEvent","segments","rampVal","segmentDur","val0","val1","delta","sqrt","sol1","ticksToTime","endTicks","_root","_length","IntervalNode","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","isLeftChild","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","allNodes","traverse","searchAfter","height","point","_interval","_currentId","_nextId","_boundRestart","_restart","_createEvents","_boundCreateEvents","createOscillator","src","copyFromChannel","dest","CtrlPattern","_shuffled","_direction","Up","Down","UpDown","DownUp","AlternateUp","AlternateDown","Random","RandomWalk","RandomOnce","_shuffleValues","randVal","Buffers","urls","_buffers","_loadingCount","_bufferLoaded","has","isLoaded","buffName","originalContext","Modulo","modulus","_subtract","_modSignal","_setWaveShaper","Convolver","_convolver","createConvolver","normalize","norm","MidSideEffect","_midSideSplit","_midSideMerge","midSend","sideSend","midReturn","sideReturn","StereoXFeedbackEffect","_feedbackLR","_feedbackRL","Loop","_event","iterations","iters","Part","_forEach","_startNote","at","_restartEvent","removeAll","_setAll","_testLoopBoundries","_pulse","_modulationScale","_oscillators","_spread","osc","iterator","MonoSynth","filterEnvelope","Player","autostart","_onload","_activeSources","_onSourceEnd","computedDuration","__WEBPACK_AMD_DEFINE_FACTORY__","TapListener","element","_dragged","_element","_bindedMove","_moved","_bindedEnd","_ended","isStarted","startContext","elements","promise","checkLoop","onStarted","tapListeners","body","bindTapListener","NodeList","Element","tap","_hasPriority","_suffixMap","_cs","CSSPlugin","_specialProps","defaultTransformPerspective","defaultSkewType","defaultSmoothOrigin","suffixMap","top","bottom","fontSize","padding","margin","perspective","lineHeight","_autoRound","_reqSafariFix","_isSafari","_isFirefox","_isSafariLT6","_ieVers","_index","_numExp","_relNumExp","_valuesExp","_NaNExp","_suffixExp","_opacityExp","_opacityValExp","_alphaFilterExp","_rgbhslExp","_capsExp","_camelExp","_urlExp","_camelFunc","_horizExp","_ieGetMatrixExp","_ieSetMatrixExp","_commasOutsideParenExp","_complexExp","_DEG2RAD","_RAD2DEG","_forcePT","_dummyElement","_createElement","createElementNS","_tempDiv","_tempImg","_agent","_supportsOpacity","RegExp","$1","cssText","opacity","_getIEOpacity","currentStyle","_log","_prefixCSS","_prefix","_checkPropPrefix","_computedStyleScope","defaultView","getComputedStyle","_getComputedStyle","_getStyle","getStyle","cs","calc","dflt","rv","getPropertyValue","_convertToPixels","convertToPixels","sfx","recurse","pix","cache","horiz","neg","precise","clientWidth","clientHeight","appendChild","parentNode","_gsCache","removeChild","cacheWidths","_calculateOffset","calculateOffset","dim","_getAllStyles","_transformPropCSS","_transformProp","_getTransform","rotation","skewX","scaleX","scaleY","y","_supports3D","z","rotationX","rotationY","scaleZ","filters","_cssDif","s1","s2","forceLookup","mpt","difs","MiniPropTween","firstMPT","_dimensions","_margins","_getDimension","nodeName","getCTM","_isSVG","getBBox","offsetWidth","offsetHeight","_parsePosition","recObj","oxp","oyp","oxr","oyr","ox","oy","_parseChange","_parseVal","_parseAngle","directionalEnd","dif","result","cap","_colorLookup","aqua","lime","silver","black","maroon","teal","blue","navy","fuchsia","olive","yellow","orange","gray","purple","green","red","cyan","transparent","_hue","h","m1","m2","_parseColor","parseColor","toHSL","wasHSL","_formatColors","colors","_colorExp","parsed","colorStringFilter","combined","lastIndex","_getFormatter","clr","collapsible","multi","formatter","dColor","dVals","pfx","delim","numVals","dSfx","vals","_getEdgeParser","cssp","parse","_setPluginRatio","str","autoRotate","xs0","xs1","CSSPropTween","_parseToProxy","shallow","xp","bpt","transform","_transform","oldForce","rxp","_addNonTweeningNumericPT","_parseComplex","parseComplex","clrs","xi","ni","bv","bnums","enums","bn","hasAlpha","cv","useHSL","ba","ea","autoRound","appendXtra","xfirst","pad","SpecialProp","format","parser","keyword","allowFunc","_registerComplexSpecialProp","_registerPluginProp","pluginName","pluginClass","_cssRegister","bi","ei","kwd","registerSpecialProp","onInitTween","useSVGTransformAttr","_useSVGTransformAttr","svg","rect","_transformProps","_transformOriginProp","Transform","force3D","defaultForce3D","_SVGElement","SVGElement","_createSVG","container","attributes","reg","setAttributeNS","_docElement","documentElement","_forceSVGTransformAttr","chrome","getBoundingClientRect","_parseSVGOrigin","local","decoratee","absolute","smoothOrigin","skipRecord","xOrigin","yOrigin","tx","ty","determinant","xOriginOld","yOriginOld","tm","_gsTransform","_getMatrix","hasAttribute","getAttribute","_identity2DMatrix","xOffset","yOffset","setAttribute","_getBBoxHack","swapIfPossible","bbox","ownerSVGElement","oldParent","oldSibling","nextSibling","oldCSS","display","_originalGetBBox","insertBefore","_getBBox","force2D","isDefault","dec","offsetParent","_removeProp","baseVal","consolidate","matrix","getTransform","rec","invX","zOrigin","t2","t3","a11","a21","a31","a41","a12","a22","a32","a42","a13","a23","a33","a14","a24","a34","a43","angle","atan2","skewType","removeAttribute","_setIETransformRatio","ang","skew","dy","w","clip","xPercent","yPercent","marg","mult","ieOffsetX","ieOffsetY","_setTransformRatio","set3DTransformRatio","setTransformRatio","sx","sy","sz","isSVG","skewY","tan","parsingProp","_lastParsedTransform","scaleFunc","scale","has3D","hasChange","dr","originalGSTransform","endRotations","parseTransform","orig","rotationZ","transformOrigin","svgOrigin","transformPerspective","directionalRotation","shortRotation","shortRotationX","shortRotationY","_transformType","ea1","es2","bs2","bs","es","en","esfx","bsfx","rel","hn","vn","em","pct","bp","backgroundPositionX","backgroundPositionY","clipTop","clipRight","clipBottom","clipLeft","bw","_setIEOpacityRatio","skip","xn1","isAutoAlpha","zoom","removeProperty","_setClassNameRatio","_gsClassPT","difData","cnpt","cnptLookup","_classNamePT","_setClearPropsRatio","clearTransform","transformParse","_vars","zIndex","tpt","threeD","_addLazySet","WebkitBackfaceVisibility","_linkCSSP","sp","isStr","strictUnits","xs2","xn2","xs3","xn3","xs4","xn4","xs5","_enableTransforms","lazySet","prev","autoAlpha","alpha","visibility","_getChildStyles","children","childNodes","cascadeTo","CSSPlugin_CSSPlugin","Draggable_Draggable","_isMultiTouching","_supportsPassive","ThrowPropsPlugin","_svgBorderFactor","_svgBorderScales","_svgScrollOffset","_hasBorderBug","_hasReparentBug","div","childStyle","_tempVarsXY","_tempVarsX","_tempVarsY","_tempVarsRotation","_tempEvent","_emptyArray","_max","_isOldIE","_placeholderDiv","_renderQueue","_lookup","_lookupCount","_clickableTagExp","_dragCount","_isAndroid","_lastDragTime","_temp1","_windowProxy","_copy","factor","_renderQueueTick","_removeFromRenderQueue","_renderQueueTimeout","_getDocScrollTop","pageYOffset","scrollTop","_getDocScrollLeft","pageXOffset","scrollLeft","_addScrollListener","_addListener","_isRoot","_removeScrollListener","_removeListener","_getMaxScroll","axis","scroll","client","_recordMaxScrolls","isRoot","_gsMaxScrollX","_gsMaxScrollY","_gsScrollX","_gsScrollY","_populateIEEvent","preventDefault","pageX","clientX","pageY","clientY","returnValue","_unwrapElement","_checkPrefix","capped","_setStyle","host","keepUnits","_dispatchEvent","instance","callbackName","listeners","pointerEvent","_getBounds","_getElementBounds","_getOffsetTransformOrigin","minX","minRotation","minY","maxX","maxRotation","maxY","_setEnvironmentVariables","e1","oldValue","wrapper","isFlex","offsetTop","border","boxSizing","createSVGPoint","matrixTransform","getScreenCTM","_point1","_point2","_isIE10orBelow","_tempTransforms","_tempElements","_getSVGOffsets","offsetLeft","Draggable","cacheSVGData","_dCache","lastUpdate","eRect","parentRect","point1","borderWidth","borderHeight","curElement","_cache","isSVGRoot","borderBox","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","curSVG","computedStyle","_getOffset2DMatrix","offsetOrigin","parentOffsetOrigin","zeroOrigin","isBase","offsets","offsetX","offsetY","borderTop","borderLeft","borderTranslateX","borderTranslateY","parentCache","parentOffsetParent","_getConcatenatedMatrix","invert","originOffset","parentOriginOffset","_localizePoint","localToGlobal","globalToLocal","fromTopLeft","origin","mLocalToGlobal","mGlobalToLocal","p1","p2","p3","p4","viewBox","viewBoxX","viewBoxY","computedDimensions","innerWidth","innerHeight","_isArrayLike","_isTouchDevice","_touchEventLookup","standard","converted","onpointerdown","onmspointerdown","touchType","passive","attachEvent","detachEvent","_onMultiTouchDocumentEnd","touches","_onMultiTouchDocument","_parseThrowProps","draggable","snap","forceZeroVelocity","_isClickable","onclick","_setSelectable","selectable","ondragstart","onselectstart","_addPaddingBR","innerHTML","scrollHeight","ScrollProxy","elementWidth","elementHeight","contentHeight","nextNode","transformStart","transformEnd","content","firstChild","prevTop","prevLeft","scrollWidth","extraPadRight","maxLeft","maxTop","oldOffset","onKill","_suspendTransforms","paddingRight","maxScrollTop","maxScrollLeft","disable","enable","calibrate","widthMatches","overflow","verticalAlign","paddingBottom","dragResistance","edgeResistance","lockAxis","autoScroll","lockedAxis","allowEventDefault","scrollProxy","startPointerX","startPointerY","startElementX","startElementY","hasBounds","hasDragCallback","tempVars","cssVars","touch","touchID","rotationOrigin","dirty","old","snapX","snapY","snapXY","isClicking","touchEventTarget","interrupted","applyObj","allowNativeTouchScrolling","touchDragAxis","isDispatching","clickDispatch","trustedClickDispatch","xyMode","rotationMode","xProp","yProp","allowX","allowY","minimumMovement","triggers","trigger","handle","dragEndTime","checkAutoScrollBounds","autoScrollMarginTop","autoScrollMarginRight","autoScrollMarginBottom","autoScrollMarginLeft","isClickable","clickableTest","clickTime","onContextMenu","isPressed","which","stopPropagation","endDrag","isDragging","pointerX","pointerY","changeX","changeY","gap","autoScrollFactor","scrollTo","setPointerPosition","deltaX","deltaY","syncXY","skipOnUpdate","skipSnap","snappedValue","isThrowing","calculateBounds","bounds","targetBounds","snapIsRaw","liveSnap","buildSnapFunc","points","buildPointSnapFunc","radius","onThrowComplete","onThrowOverwrite","animate","throwProps","overshootTolerance","resistance","throwResistance","linkedProps","easeOut","fastMode","minDuration","maxDuration","endX","endY","endRotation","applyBounds","updateMatrix","shiftStart","recordStartPositions","edgeTolerance","isTweening","_localToGlobal","startX","startY","removePlaceholder","absDif","dist","minDist","onPress","currentTarget","onRelease","onMove","dragClickables","allowContextMenu","ctrlKey","preventManipulation","changedTouches","identifier","pointerId","_addToRenderQueue","zIndexBoost","onDrag","drag","cursor","activeCursor","originalEvent","lockAxisOnTouchScroll","onLockAxis","cancelable","xChange","yChange","dragTolerance","ID","_hasTouchID","syntheticEvent","eventTarget","syntheticClick","wasDragging","isContextMenuRelease","placeholderDelayedCall","srcElement","click","createEvent","initMouseEvent","screenX","screenY","defaultPrevented","updateScroll","onClick","recentlyClicked","recentlyDragged","alreadyDispatched","isModern","alreadyDispatchedTrusted","trusted","isTrusted","suppressClickOnDrag","stopImmediatePropagation","detail","localizePoint","startDrag","hitTest","_parseRect","timeSinceDrag","timeSinceClick","getDirection","diagonalThreshold","getVelocity","newBounds","update","sticky","ignoreExternalChanges","track","_gsDragID","dragging","untrack","clearProps","_extend","overflowY","overflowX","_flattenArray","_tempRect","_oldIERect","obj1","obj2","area","isRatio","isOutside","is","bitmap","configurable","SRC","$toString","TPL","inspectSource","safe","String","$forEach","STRICT","callbackfn","IObject","toObject","toLength","asc","TYPE","$create","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","$this","res","cof","propertyIsEnumerable","defined","toInteger","speciesConstructor","original","SPECIES","C","uid","Symbol","USE_SYMBOL","fails","arraySlice","factories","partArgs","bound","construct","un","Channel","_solo","_panVol","muted","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Gate","_follower","_gt","thresh","smoothingTime","Limiter","Meter","_rms","getLevel","totalSquared","rms","MidSideCompressor","Mono","MultibandCompressor","Panner3D","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","_orientation","orientationX","orientationY","orientationZ","_position","positionX","positionY","positionZ","_rampTimeConstant","setPosition","setOrientation","pos","_aliasProperty","CtrlInterpolate","lowerPosition","lower","upper","_interpolate","retArray","retObj","_toNumber","CtrlMarkov","distribution","_getProbDistribution","rand","chosen","needsNormalizing","option","CtrlRandom","integer","Buses","channelName","sendKnob","receive","buses","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","Listener","ListenerConstructor","forwardX","forwardY","forwardZ","upX","upY","upZ","isListener","AutoFilter","_lfo","depth","oct","AutoPanner","AutoWah","follower","_sweepRange","_baseFrequency","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","sensitivy","BitCrusher","invStepSize","bits","_modulo","_bits","Chebyshev","_order","order","_getCoefficient","degree","memo","Chorus","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","deviation","Distortion","_distortion","distortion","deg","FeedbackDelay","combFilterTunings","allpassFilterFrequencies","Freeverb","roomSize","_combFilters","_allpassFiltersL","_allpassFiltersR","allpassL","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_scaleRoomSize","_allpassFilters","_feedbackCombFilters","af","allpass","fbcf","apf","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","PingPongDelay","_leftDelay","maxDelayTime","_rightDelay","_rightPreDelay","PitchShift","_frequency","_delayA","_lfoA","_delayB","_lfoB","_crossFade","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","Reverb","preDelay","generate","noiseL","noiseR","StereoFeedbackEffect","_feedbackL","_feedbackR","StereoWidener","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","_oneMinusWidth","_sideMult","Tremolo","_amplitudeL","_amplitudeR","Vibrato","Pattern","_pattern","pattern","Sequence","_subdivision","_indexTime","subSubdivision","AMSynth","modulation","modulationEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","carrier","modulator","MembraneSynth","pitchDecay","maxNote","inharmRatios","MetalSynth","_freqMultipliers","_amplitue","_highpass","_filterFreqScaler","vel","octs","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","polyphony","MAX_POLYPHONY","voices","voice","_getClosestVoice","sameNote","find","sort","aLevel","bLevel","notes","releaseAll","Sampler","urlMap","_findClosest","difference","closestNote","sources","setWaveTable","createWaveTable","GainToAudio","Normalize","inputMin","inputMax","_inputMin","_inputMax","_div","TransportTimelineSignal","_outputSig","_lastVal","_onTick","_bindAnchorValue","_anchorValue","_syncedCallback","GrainPlayer","grainSize","_grainSize","_overlap","_onstop","_offset","Players","_players","_fadeIn","_fadeOut","player","playing","playerName","stopAll","UserMedia","_mediaStream","_stream","_device","labelOrId","enumerateDevices","devices","device","label","deviceId","constraints","audio","echoCancellation","noiseSuppression","mozNoiseSuppression","mediaDevices","getUserMedia","stream","createMediaStreamSource","getAudioTracks","kind","active","groupId","Midi","originalModule","webpackPolyfill"],"mappings":"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","file":"js/1.86d64117.chunk.js","sourcesContent":["/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2019 Yotam Mann\n */\ndefine([\"../version\"], function(version){\n\n\t\"use strict\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTONE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  @class  Tone is the base class of all other classes.\n\t *  @constructor\n\t */\n\tvar Tone = function(){\n\t\tif (!(this instanceof Tone)){\n\t\t\tthrow new Error(\"constructor needs to be called with the 'new' keyword\");\n\t\t}\n\t};\n\n\t/**\n\t *  @memberOf Tone#\n\t *  @returns {String} returns the name of the class as a string\n\t */\n\tTone.prototype.toString = function(){\n\t\tfor (var className in Tone){\n\t\t\tvar isLetter = className[0].match(/^[A-Z]$/);\n\t\t\tvar sameConstructor = Tone[className] === this.constructor;\n\t\t\tif (Tone.isFunction(Tone[className]) && isLetter && sameConstructor){\n\t\t\t\treturn className;\n\t\t\t}\n\t\t}\n\t\treturn \"Tone\";\n\t};\n\n\t/**\n\t *  @memberOf Tone#\n\t *  disconnect and dispose\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.dispose = function(){\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Set the parameters at once. Either pass in an\n\t *  object mapping parameters to values, or to set a\n\t *  single parameter, by passing in a string and value.\n\t *  The last argument is an optional ramp time which\n\t *  will ramp any signal values to their destination value\n\t *  over the duration of the rampTime.\n\t *  @param {Object|String} params\n\t *  @param {Number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone} this\n\t *  @memberOf Tone#\n\t *  @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : highpass\n\t * });\n\t *  @example\n\t * filter.set(\"type\", \"highpass\");\n\t *  @example\n\t * //ramp to the value 220 over 3 seconds.\n\t * oscillator.set({\n\t * \t\"frequency\" : 220\n\t * }, 3);\n\t */\n\tTone.prototype.set = function(params, value, rampTime){\n\t\tif (Tone.isObject(params)){\n\t\t\trampTime = value;\n\t\t} else if (Tone.isString(params)){\n\t\t\tvar tmpObj = {};\n\t\t\ttmpObj[params] = value;\n\t\t\tparams = tmpObj;\n\t\t}\n\n\t\tparamLoop:\n\t\tfor (var attr in params){\n\t\t\tvalue = params[attr];\n\t\t\tvar parent = this;\n\t\t\tif (attr.indexOf(\".\") !== -1){\n\t\t\t\tvar attrSplit = attr.split(\".\");\n\t\t\t\tfor (var i = 0; i < attrSplit.length - 1; i++){\n\t\t\t\t\tparent = parent[attrSplit[i]];\n\t\t\t\t\tif (parent instanceof Tone){\n\t\t\t\t\t\tattrSplit.splice(0, i+1);\n\t\t\t\t\t\tvar innerParam = attrSplit.join(\".\");\n\t\t\t\t\t\tparent.set(innerParam, value);\n\t\t\t\t\t\tcontinue paramLoop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tattr = attrSplit[attrSplit.length - 1];\n\t\t\t}\n\t\t\tvar param = parent[attr];\n\t\t\tif (Tone.isUndef(param)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((Tone.Signal && param instanceof Tone.Signal) ||\n\t\t\t\t\t(Tone.Param && param instanceof Tone.Param)){\n\t\t\t\tif (param.value !== value){\n\t\t\t\t\tif (Tone.isUndef(rampTime)){\n\t\t\t\t\t\tparam.value = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparam.rampTo(value, rampTime);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\tif (param.value !== value){\n\t\t\t\t\tparam.value = value;\n\t\t\t\t}\n\t\t\t} else if (Tone.TimeBase && param instanceof Tone.TimeBase){\n\t\t\t\tparent[attr] = value;\n\t\t\t} else if (param instanceof Tone){\n\t\t\t\tparam.set(value);\n\t\t\t} else if (param !== value){\n\t\t\t\tparent[attr] = value;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t *  @memberOf Tone#\n\t *  @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t *  @example\n\t * osc.get(\"type\");\n\t * //returns { \"type\" : \"sine\"}\n\t * @example\n\t * //use dot notation to access deep properties\n\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n\t *  \t\t\t\t\t                  all available.\n\t *  @returns {Object}\n\t */\n\tTone.prototype.get = function(params){\n\t\tif (Tone.isUndef(params)){\n\t\t\tparams = this._collectDefaults(this.constructor);\n\t\t} else if (Tone.isString(params)){\n\t\t\tparams = [params];\n\t\t}\n\t\tvar ret = {};\n\t\tfor (var i = 0; i < params.length; i++){\n\t\t\tvar attr = params[i];\n\t\t\tvar parent = this;\n\t\t\tvar subRet = ret;\n\t\t\tif (attr.indexOf(\".\") !== -1){\n\t\t\t\tvar attrSplit = attr.split(\".\");\n\t\t\t\tfor (var j = 0; j < attrSplit.length - 1; j++){\n\t\t\t\t\tvar subAttr = attrSplit[j];\n\t\t\t\t\tsubRet[subAttr] = subRet[subAttr] || {};\n\t\t\t\t\tsubRet = subRet[subAttr];\n\t\t\t\t\tparent = parent[subAttr];\n\t\t\t\t}\n\t\t\t\tattr = attrSplit[attrSplit.length - 1];\n\t\t\t}\n\t\t\tvar param = parent[attr];\n\t\t\tif (Tone.isObject(params[attr])){\n\t\t\t\tsubRet[attr] = param.get();\n\t\t\t} else if (Tone.Signal && param instanceof Tone.Signal){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (Tone.Param && param instanceof Tone.Param){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (param instanceof Tone){\n\t\t\t\tsubRet[attr] = param.get();\n\t\t\t} else if (!Tone.isFunction(param) && Tone.isDefined(param)){\n\t\t\t\tsubRet[attr] = param;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\t/**\n\t *  collect all of the default attributes in one\n\t *  @private\n\t *  @param {Function} constr the constructor to find the defaults from\n\t *  @return {Array} all of the attributes which belong to the class\n\t */\n\tTone.prototype._collectDefaults = function(constr){\n\t\tvar ret = [];\n\t\tif (Tone.isDefined(constr.defaults)){\n\t\t\tret = Object.keys(constr.defaults);\n\t\t}\n\t\tif (Tone.isDefined(constr._super)){\n\t\t\tvar superDefs = this._collectDefaults(constr._super);\n\t\t\t//filter out repeats\n\t\t\tfor (var i = 0; i < superDefs.length; i++){\n\t\t\t\tif (ret.indexOf(superDefs[i]) === -1){\n\t\t\t\t\tret.push(superDefs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  @memberOf Tone\n\t *  @param  {Array}  values  The arguments array\n\t *  @param  {Array}  keys    The names of the arguments\n\t *  @param {Function|Object} constr The class constructor\n\t *  @return  {Object}  An object composed of the  defaults between the class' defaults\n\t *                        and the passed in arguments.\n\t */\n\tTone.defaults = function(values, keys, constr){\n\t\tvar options = {};\n\t\tif (values.length === 1 && Tone.isObject(values[0])){\n\t\t\toptions = values[0];\n\t\t} else {\n\t\t\tfor (var i = 0; i < keys.length; i++){\n\t\t\t\toptions[keys[i]] = values[i];\n\t\t\t}\n\t\t}\n\t\tif (Tone.isDefined(constr.defaults)){\n\t\t\treturn Tone.defaultArg(options, constr.defaults);\n\t\t} else if (Tone.isObject(constr)){\n\t\t\treturn Tone.defaultArg(options, constr);\n\t\t} else {\n\t\t\treturn options;\n\t\t}\n\t};\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\tTone.defaultArg = function(given, fallback){\n\t\tif (Tone.isObject(given) && Tone.isObject(fallback)){\n\t\t\tvar ret = {};\n\t\t\t//make a deep copy of the given object\n\t\t\tfor (var givenProp in given){\n\t\t\t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t\t}\n\t\t\tfor (var fallbackProp in fallback){\n\t\t\t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t} else {\n\t\t\treturn Tone.isUndef(given) ? fallback : given;\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Print the outputs to the console log for debugging purposes. \n\t *  Prints the contents only if either the object has a property\n\t *  called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t *  is set to the name of the class. \n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t *  @param {*} args Any arguments to print to the console.\n\t *  @private\n\t */\n\tTone.prototype.log = function(){\n\t\t//if the object is either set to debug = true\n\t\t//or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || this.toString() === Tone.global.TONE_DEBUG_CLASS){\n\t\t\tvar args = Array.from(arguments);\n\t\t\targs.unshift(this.toString()+\":\");\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log.apply(undefined, args);\n\t\t}\n\t};\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error. \n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tTone.prototype.assert = function(statement, error){\n\t\tif (!statement){\n\t\t\tthrow new Error(error);\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tCONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  connect together all of the arguments in series\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone}\n\t *  @memberOf Tone\n\t *  @static\n\t */\n\tTone.connectSeries = function(){\n\t\tvar currentUnit = arguments[0];\n\t\tfor (var i = 1; i < arguments.length; i++){\n\t\t\tvar toUnit = arguments[i];\n\t\t\tcurrentUnit.connect(toUnit);\n\t\t\tcurrentUnit = toUnit;\n\t\t}\n\t\treturn Tone;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// TYPE CHECKING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Test if the arg is undefined\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is undefined\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isUndef = function(val){\n\t\treturn typeof val === \"undefined\";\n\t};\n\n\t/**\n\t *  Test if the arg is not undefined\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is undefined\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isDefined = function(val){\n\t\treturn !Tone.isUndef(val);\n\t};\n\n\t/**\n\t *  Test if the arg is a function\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a function\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isFunction = function(val){\n\t\treturn typeof val === \"function\";\n\t};\n\n\t/**\n\t *  Test if the argument is a number.\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a number\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isNumber = function(arg){\n\t\treturn (typeof arg === \"number\");\n\t};\n\n\t/**\n\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is an object literal.\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isObject = function(arg){\n\t\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n\t};\n\n\t/**\n\t *  Test if the argument is a boolean.\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a boolean\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isBoolean = function(arg){\n\t\treturn (typeof arg === \"boolean\");\n\t};\n\n\t/**\n\t *  Test if the argument is an Array\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is an array\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isArray = function(arg){\n\t\treturn (Array.isArray(arg));\n\t};\n\n\t/**\n\t *  Test if the argument is a string.\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a string\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isString = function(arg){\n\t\treturn (typeof arg === \"string\");\n\t};\n\n\t/**\n\t *  Test if the argument is in the form of a note in scientific pitch notation.\n\t *  e.g. \"C4\"\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a string\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isNote = function(arg){\n\t\treturn Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n\t};\n\n\t/**\n\t *  An empty function.\n\t *  @static\n\t */\n\tTone.noOp = function(){};\n\n\t/**\n\t *  Make the property not writable. Internal use only.\n\t *  @private\n\t *  @param  {String}  property  the property to make not writable\n\t */\n\tTone.prototype._readOnly = function(property){\n\t\tif (Array.isArray(property)){\n\t\t\tfor (var i = 0; i < property.length; i++){\n\t\t\t\tthis._readOnly(property[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tObject.defineProperty(this, property, {\n\t\t\t\t\"writable\" : false,\n\t\t\t\t\"enumerable\" : true,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t *  Make an attribute writeable. Interal use only.\n\t *  @private\n\t *  @param  {String}  property  the property to make writable\n\t */\n\tTone.prototype._writable = function(property){\n\t\tif (Array.isArray(property)){\n\t\t\tfor (var i = 0; i < property.length; i++){\n\t\t\t\tthis._writable(property[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tObject.defineProperty(this, property, {\n\t\t\t\t\"writable\" : true,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Possible play states.\n\t * @enum {String}\n\t */\n\tTone.State = {\n\t\t\"Started\" : \"started\",\n\t\t\"Stopped\" : \"stopped\",\n\t\t\"Paused\" : \"paused\",\n\t};\n\n\t/**\n\t * A reference to the global context, `global` or `Tone.global.\n\t */\n\tTone.global = Tone.isUndef(global) ? window : global;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Equal power gain scale. Good for cross-fading.\n\t *  @param  {NormalRange} percent (0-1)\n\t *  @return {Number}         output gain (0-1)\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.equalPowerScale = function(percent){\n\t\tvar piFactor = 0.5 * Math.PI;\n\t\treturn Math.sin(percent * piFactor);\n\t};\n\n\t/**\n\t *  Convert decibels into gain.\n\t *  @param  {Decibels} db\n\t *  @return {Number}\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.dbToGain = function(db){\n\t\treturn Math.pow(10, db / 20);\n\t};\n\n\t/**\n\t *  Convert gain to decibels.\n\t *  @param  {Number} gain (0-1)\n\t *  @return {Decibels}\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.gainToDb = function(gain){\n\t\treturn 20 * (Math.log(gain) / Math.LN10);\n\t};\n\n\t/**\n\t *  Convert an interval (in semitones) to a frequency ratio.\n\t *  @param  {Interval} interval the number of semitones above the base note\n\t *  @return {Number}          the frequency ratio\n\t *  @static\n\t *  @memberOf Tone\n\t *  @example\n\t * tone.intervalToFrequencyRatio(0); // 1\n\t * tone.intervalToFrequencyRatio(12); // 2\n\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t */\n\tTone.intervalToFrequencyRatio = function(interval){\n\t\treturn Math.pow(2, (interval/12));\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTIMING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the current time of the AudioContext clock plus\n\t *  the lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @memberOf Tone#\n\t */\n\tTone.prototype.now = function(){\n\t\treturn Tone.context.now();\n\t};\n\n\t/**\n\t *  Return the current time of the AudioContext clock plus\n\t *  the lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.now = function(){\n\t\treturn Tone.context.now();\n\t};\n\n\t/**\n\t *  Return the current time of the AudioContext clock without\n\t *  any lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @memberOf Tone#\n\t */\n\tTone.prototype.immediate = function(){\n\t\treturn Tone.context.currentTime;\n\t};\n\n\t/**\n\t *  Return the current time of the AudioContext clock without\n\t *  any lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @memberOf Tone\n\t */\n\tTone.immediate = function(){\n\t\treturn Tone.context.currentTime;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tINHERITANCE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t *  to inherit the parent's properties, make sure to call\n\t *  Parent.call(this) in the child's constructor\n\t *\n\t *  based on closure library's inherit function\n\t *\n\t *  @memberOf Tone\n\t *  @static\n\t *  @param  {Function} \tchild\n\t *  @param  {Function=} parent (optional) parent to inherit from\n\t *                             if no parent is supplied, the child\n\t *                             will inherit from Tone\n\t */\n\tTone.extend = function(child, parent){\n\t\tif (Tone.isUndef(parent)){\n\t\t\tparent = Tone;\n\t\t}\n\t\tfunction TempConstructor(){}\n\t\tTempConstructor.prototype = parent.prototype;\n\t\tchild.prototype = new TempConstructor();\n\t\t/** @override */\n\t\tchild.prototype.constructor = child;\n\t\tchild._super = parent;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tCONTEXT\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The shared AudioContext\n\t * @type {Tone.Context}\n\t * @private\n\t */\n\tTone._audioContext = null;\n\n\t/**\n\t * \tMost browsers will not play _any_ audio until a user \n\t * \tclicks something (like a play button). Invoke this method\n\t * \ton a click or keypress event handler to start the audio context. \n\t * \tMore about the Autoplay policy [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n\t *  @memberOf Tone\n\t *  @static\n\t *  @return {Promise} This promise is resolved when the audio context is started. \n\t *  @example\n\t * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())\n\t */\n\tTone.start = function(){\n\t\treturn Tone.context.resume();\n\t};\n\n\t/**\n\t *  A static pointer to the audio context accessible as Tone.context.\n\t *  @type {Tone.Context}\n\t *  @name context\n\t *  @memberOf Tone\n\t */\n\tObject.defineProperty(Tone, \"context\", {\n\t\t\"get\" : function(){\n\t\t\treturn Tone._audioContext;\n\t\t},\n\t\t\"set\" : function(context){\n\t\t\tif (context.isContext){\n\t\t\t\tTone._audioContext = context;\n\t\t\t} else {\n\t\t\t\tTone._audioContext = new Tone.Context(context);\n\t\t\t}\n\t\t\t//initialize the new audio context\n\t\t\tTone.Context.emit(\"init\", Tone._audioContext);\n\t\t}\n\t});\n\n\t/**\n\t *  The AudioContext\n\t *  @type {Tone.Context}\n\t *  @name context\n\t *  @memberOf Tone#\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.prototype, \"context\", {\n\t\t\"get\" : function(){\n\t\t\treturn Tone.context;\n\t\t}\n\t});\n\n\t/**\n\t *  Tone automatically creates a context on init, but if you are working\n\t *  with other libraries which also create an AudioContext, it can be\n\t *  useful to set your own. If you are going to set your own context,\n\t *  be sure to do it at the start of your code, before creating any objects.\n\t *  @static\n\t *  @param {AudioContext} ctx The new audio context to set\n\t */\n\tTone.setContext = function(ctx){\n\t\tTone.context = ctx;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tATTRIBUTES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The number of seconds of 1 processing block (128 samples)\n\t *  @type {Number}\n\t *  @name blockTime\n\t *  @memberOf Tone\n\t *  @static\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.prototype, \"blockTime\", {\n\t\t\"get\" : function(){\n\t\t\treturn 128 / this.context.sampleRate;\n\t\t}\n\t});\n\n\t/**\n\t *  The duration in seconds of one sample.\n\t *  @type {Number}\n\t *  @name sampleTime\n\t *  @memberOf Tone\n\t *  @static\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.prototype, \"sampleTime\", {\n\t\t\"get\" : function(){\n\t\t\treturn 1 / this.context.sampleRate;\n\t\t}\n\t});\n\n\t/**\n\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.\n\t *  @type {Boolean}\n\t *  @name supported\n\t *  @memberOf Tone\n\t *  @readOnly\n\t *  @static\n\t */\n\tObject.defineProperty(Tone, \"supported\", {\n\t\t\"get\" : function(){\n\t\t\tvar hasAudioContext = Tone.global.hasOwnProperty(\"AudioContext\") || Tone.global.hasOwnProperty(\"webkitAudioContext\");\n\t\t\tvar hasPromises = Tone.global.hasOwnProperty(\"Promise\");\n\t\t\treturn hasAudioContext && hasPromises;\n\t\t}\n\t});\n\n\t/**\n\t *  Boolean value if the audio context has been initialized.\n\t *  @type {Boolean}\n\t *  @memberOf Tone\n\t *  @static\n\t *  @name initialized\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone, \"initialized\", {\n\t\t\"get\" : function(){\n\t\t\treturn Boolean(Tone.context);\n\t\t}\n\t});\n\n\t/**\n\t *  Get the context when it becomes available\n\t *  @param  {Function}  resolve  Callback when the context is initialized\n\t *  @return  {Tone}\n\t */\n\tTone.getContext = function(resolve){\n\t\tif (Tone.initialized){\n\t\t\tresolve(Tone.context);\n\t\t} else {\n\t\t\tvar resCallback = function(){\n\t\t\t\tresolve(Tone.context);\n\t\t\t\tTone.Context.off(\"init\", resCallback);\n\t\t\t};\n\t\t\tTone.Context.on(\"init\", resCallback);\n\t\t}\n\t\treturn Tone;\n\t};\n\n\t/**\n\t * The version number\n\t * @type {String}\n\t * @static\n\t */\n\tTone.version = version;\n\n\treturn Tone;\n});\n","/*!\n * VERSION: 2.1.2\n * DATE: 2019-03-01\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\n/* ES6 changes:\n\t- declare and export _gsScope at top.\n\t- set var TweenLite = the result of the main function\n\t- export default TweenLite at the bottom\n\t- return TweenLite at the bottom of the main function\n\t- pass in _gsScope as the first parameter of the main function (which is actually at the bottom)\n\t- remove the \"export to multiple environments\" in Definition().\n */\nexport var _gsScope = (typeof(window) !== \"undefined\") ? window : (typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this || {};\n\nexport var TweenLite = (function(window) {\n\n\t\t\"use strict\";\n\t\tvar _exports = {},\n\t\t\t_doc = window.document,\n\t\t\t_globals = window.GreenSockGlobals = window.GreenSockGlobals || window;\n\t\tif (_globals.TweenLite) {\n\t\t\treturn _globals.TweenLite; //in case the core set of classes is already loaded, don't instantiate twice.\n\t\t}\n\t\tvar _namespace = function(ns) {\n\t\t\t\tvar a = ns.split(\".\"),\n\t\t\t\t\tp = _globals, i;\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\tp[a[i]] = p = p[a[i]] || {};\n\t\t\t\t}\n\t\t\t\treturn p;\n\t\t\t},\n\t\t\tgs = _namespace(\"com.greensock\"),\n\t\t\t_tinyNum = 0.00000001,\n\t\t\t_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_emptyFunc = function() {},\n\t\t\t_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\n\t\t\t\tvar toString = Object.prototype.toString,\n\t\t\t\t\tarray = toString.call([]);\n\t\t\t\treturn function(obj) {\n\t\t\t\t\treturn obj != null && (obj instanceof Array || (typeof(obj) === \"object\" && !!obj.push && toString.call(obj) === array));\n\t\t\t\t};\n\t\t\t}()),\n\t\t\ta, i, p, _ticker, _tickerActive,\n\t\t\t_defLookup = {},\n\n\t\t\t/**\n\t\t\t * @constructor\n\t\t\t * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\n\t\t\t * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\n\t\t\t * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\n\t\t\t * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\n\t\t\t *\n\t\t\t * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\n\t\t\t * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\n\t\t\t * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\n\t\t\t * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\n\t\t\t * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\n\t\t\t * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\n\t\t\t * sandbox the banner one like:\n\t\t\t *\n\t\t\t * <script>\n\t\t\t *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     gs.TweenLite.to(...); //would use v1.7\n\t\t\t *     TweenLite.to(...); //would use v1.6\n\t\t\t * </script>\n\t\t\t *\n\t\t\t * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\n\t\t\t * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\n\t\t\t * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\n\t\t\t * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\n\t\t\t */\n\t\t\tDefinition = function(ns, dependencies, func, global) {\n\t\t\t\tthis.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses\n\t\t\t\t_defLookup[ns] = this;\n\t\t\t\tthis.gsClass = null;\n\t\t\t\tthis.func = func;\n\t\t\t\tvar _classes = [];\n\t\t\t\tthis.check = function(init) {\n\t\t\t\t\tvar i = dependencies.length,\n\t\t\t\t\t\tmissing = i,\n\t\t\t\t\t\tcur, a, n, cl;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {\n\t\t\t\t\t\t\t_classes[i] = cur.gsClass;\n\t\t\t\t\t\t\tmissing--;\n\t\t\t\t\t\t} else if (init) {\n\t\t\t\t\t\t\tcur.sc.push(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (missing === 0 && func) {\n\t\t\t\t\t\ta = (\"com.greensock.\" + ns).split(\".\");\n\t\t\t\t\t\tn = a.pop();\n\t\t\t\t\t\tcl = _namespace(a.join(\".\"))[n] = this.gsClass = func.apply(func, _classes);\n\n\t\t\t\t\t\t//exports to multiple environments\n\t\t\t\t\t\tif (global) {\n\t\t\t\t\t\t\t_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\t\t\t\t\t\t\tif (ns === moduleName) {\n\t\t\t\t\t\t\t\t\tmodule.exports = _exports[moduleName] = cl;\n\t\t\t\t\t\t\t\t\tfor (i in _exports) {\n\t\t\t\t\t\t\t\t\t\tcl[i] = _exports[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (_exports[moduleName]) {\n\t\t\t\t\t\t\t\t\t_exports[moduleName][n] = cl;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (typeof(define) === \"function\" && define.amd){ //AMD\n\t\t\t\t\t\t\t\tdefine((window.GreenSockAMDPath ? window.GreenSockAMDPath + \"/\" : \"\") + ns.split(\".\").pop(), [], function() { return cl; });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = 0; i < this.sc.length; i++) {\n\t\t\t\t\t\t\tthis.sc[i].check();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.check(true);\n\t\t\t},\n\n\t\t\t//used to create Definition instances (which basically registers a class that has dependencies).\n\t\t\t_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {\n\t\t\t\treturn new Definition(ns, dependencies, func, global);\n\t\t\t},\n\n\t\t\t//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n\t\t\t_class = gs._class = function(ns, func, global) {\n\t\t\t\tfunc = func || function() {};\n\t\t\t\t_gsDefine(ns, [], function(){ return func; }, global);\n\t\t\t\treturn func;\n\t\t\t};\n\n\t\t_gsDefine.globals = _globals;\n\n\n\n/*\n * ----------------------------------------------------------------\n * Ease\n * ----------------------------------------------------------------\n */\n\t\tvar _baseParams = [0, 0, 1, 1],\n\t\t\tEase = _class(\"easing.Ease\", function(func, extraParams, type, power) {\n\t\t\t\tthis._func = func;\n\t\t\t\tthis._type = type || 0;\n\t\t\t\tthis._power = power || 0;\n\t\t\t\tthis._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;\n\t\t\t}, true),\n\t\t\t_easeMap = Ease.map = {},\n\t\t\t_easeReg = Ease.register = function(ease, names, types, create) {\n\t\t\t\tvar na = names.split(\",\"),\n\t\t\t\t\ti = na.length,\n\t\t\t\t\tta = (types || \"easeIn,easeOut,easeInOut\").split(\",\"),\n\t\t\t\t\te, name, j, type;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tname = na[i];\n\t\t\t\t\te = create ? _class(\"easing.\"+name, null, true) : gs.easing[name] || {};\n\t\t\t\t\tj = ta.length;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\ttype = ta[j];\n\t\t\t\t\t\t_easeMap[name + \".\" + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tp = Ease.prototype;\n\t\tp._calcEnd = false;\n\t\tp.getRatio = function(p) {\n\t\t\tif (this._func) {\n\t\t\t\tthis._params[0] = p;\n\t\t\t\treturn this._func.apply(null, this._params);\n\t\t\t}\n\t\t\tvar t = this._type,\n\t\t\t\tpw = this._power,\n\t\t\t\tr = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;\n\t\t\tif (pw === 1) {\n\t\t\t\tr *= r;\n\t\t\t} else if (pw === 2) {\n\t\t\t\tr *= r * r;\n\t\t\t} else if (pw === 3) {\n\t\t\t\tr *= r * r * r;\n\t\t\t} else if (pw === 4) {\n\t\t\t\tr *= r * r * r * r;\n\t\t\t}\n\t\t\treturn (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);\n\t\t};\n\n\t\t//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\n\t\ta = [\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"];\n\t\ti = a.length;\n\t\twhile (--i > -1) {\n\t\t\tp = a[i]+\",Power\"+i;\n\t\t\t_easeReg(new Ease(null,null,1,i), p, \"easeOut\", true);\n\t\t\t_easeReg(new Ease(null,null,2,i), p, \"easeIn\" + ((i === 0) ? \",easeNone\" : \"\"));\n\t\t\t_easeReg(new Ease(null,null,3,i), p, \"easeInOut\");\n\t\t}\n\t\t_easeMap.linear = gs.easing.Linear.easeIn;\n\t\t_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n\n\n/*\n * ----------------------------------------------------------------\n * EventDispatcher\n * ----------------------------------------------------------------\n */\n\t\tvar EventDispatcher = _class(\"events.EventDispatcher\", function(target) {\n\t\t\tthis._listeners = {};\n\t\t\tthis._eventTarget = target || this;\n\t\t});\n\t\tp = EventDispatcher.prototype;\n\n\t\tp.addEventListener = function(type, callback, scope, useParam, priority) {\n\t\t\tpriority = priority || 0;\n\t\t\tvar list = this._listeners[type],\n\t\t\t\tindex = 0,\n\t\t\t\tlistener, i;\n\t\t\tif (this === _ticker && !_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (list == null) {\n\t\t\t\tthis._listeners[type] = list = [];\n\t\t\t}\n\t\t\ti = list.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tlistener = list[i];\n\t\t\t\tif (listener.c === callback && listener.s === scope) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t} else if (index === 0 && listener.pr < priority) {\n\t\t\t\t\tindex = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});\n\t\t};\n\n\t\tp.removeEventListener = function(type, callback) {\n\t\t\tvar list = this._listeners[type], i;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (list[i].c === callback) {\n\t\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp.dispatchEvent = function(type) {\n\t\t\tvar list = this._listeners[type],\n\t\t\t\ti, t, listener;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\tif (i > 1) {\n\t\t\t\t\tlist = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)\n\t\t\t\t}\n\t\t\t\tt = this._eventTarget;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tlistener = list[i];\n\t\t\t\t\tif (listener) {\n\t\t\t\t\t\tif (listener.up) {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t, {type:type, target:t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * Ticker\n * ----------------------------------------------------------------\n */\n \t\tvar _reqAnimFrame = window.requestAnimationFrame,\n\t\t\t_cancelAnimFrame = window.cancelAnimationFrame,\n\t\t\t_getTime = Date.now || function() {return new Date().getTime();},\n\t\t\t_lastUpdate = _getTime();\n\n\t\t//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\n\t\ta = [\"ms\",\"moz\",\"webkit\",\"o\"];\n\t\ti = a.length;\n\t\twhile (--i > -1 && !_reqAnimFrame) {\n\t\t\t_reqAnimFrame = window[a[i] + \"RequestAnimationFrame\"];\n\t\t\t_cancelAnimFrame = window[a[i] + \"CancelAnimationFrame\"] || window[a[i] + \"CancelRequestAnimationFrame\"];\n\t\t}\n\n\t\t_class(\"Ticker\", function(fps, useRAF) {\n\t\t\tvar _self = this,\n\t\t\t\t_startTime = _getTime(),\n\t\t\t\t_useRAF = (useRAF !== false && _reqAnimFrame) ? \"auto\" : false,\n\t\t\t\t_lagThreshold = 500,\n\t\t\t\t_adjustedLag = 33,\n\t\t\t\t_tickWord = \"tick\", //helps reduce gc burden\n\t\t\t\t_fps, _req, _id, _gap, _nextTime,\n\t\t\t\t_tick = function(manual) {\n\t\t\t\t\tvar elapsed = _getTime() - _lastUpdate,\n\t\t\t\t\t\toverlap, dispatch;\n\t\t\t\t\tif (elapsed > _lagThreshold) {\n\t\t\t\t\t\t_startTime += elapsed - _adjustedLag;\n\t\t\t\t\t}\n\t\t\t\t\t_lastUpdate += elapsed;\n\t\t\t\t\t_self.time = (_lastUpdate - _startTime) / 1000;\n\t\t\t\t\toverlap = _self.time - _nextTime;\n\t\t\t\t\tif (!_fps || overlap > 0 || manual === true) {\n\t\t\t\t\t\t_self.frame++;\n\t\t\t\t\t\t_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);\n\t\t\t\t\t\tdispatch = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (manual !== true) { //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n\t\t\t\t\t\t_id = _req(_tick);\n\t\t\t\t\t}\n\t\t\t\t\tif (dispatch) {\n\t\t\t\t\t\t_self.dispatchEvent(_tickWord);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\tEventDispatcher.call(_self);\n\t\t\t_self.time = _self.frame = 0;\n\t\t\t_self.tick = function() {\n\t\t\t\t_tick(true);\n\t\t\t};\n\n\t\t\t_self.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t\tif (!arguments.length) { //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.\n\t\t\t\t\treturn (_lagThreshold < 1 / _tinyNum);\n\t\t\t\t}\n\t\t\t\t_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited\n\t\t\t\t_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n\t\t\t};\n\n\t\t\t_self.sleep = function() {\n\t\t\t\tif (_id == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_useRAF || !_cancelAnimFrame) {\n\t\t\t\t\tclearTimeout(_id);\n\t\t\t\t} else {\n\t\t\t\t\t_cancelAnimFrame(_id);\n\t\t\t\t}\n\t\t\t\t_req = _emptyFunc;\n\t\t\t\t_id = null;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = false;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t_self.wake = function(seamless) {\n\t\t\t\tif (_id !== null) {\n\t\t\t\t\t_self.sleep();\n\t\t\t\t} else if (seamless) {\n\t\t\t\t\t_startTime += -_lastUpdate + (_lastUpdate = _getTime());\n\t\t\t\t} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n\t\t\t\t\t_lastUpdate = _getTime() - _lagThreshold + 5;\n\t\t\t\t}\n\t\t\t\t_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = true;\n\t\t\t\t}\n\t\t\t\t_tick(2);\n\t\t\t};\n\n\t\t\t_self.fps = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _fps;\n\t\t\t\t}\n\t\t\t\t_fps = value;\n\t\t\t\t_gap = 1 / (_fps || 60);\n\t\t\t\t_nextTime = this.time + _gap;\n\t\t\t\t_self.wake();\n\t\t\t};\n\n\t\t\t_self.useRAF = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _useRAF;\n\t\t\t\t}\n\t\t\t\t_self.sleep();\n\t\t\t\t_useRAF = value;\n\t\t\t\t_self.fps(_fps);\n\t\t\t};\n\t\t\t_self.fps(fps);\n\n\t\t\t//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (_useRAF === \"auto\" && _self.frame < 5 && (_doc || {}).visibilityState !== \"hidden\") {\n\t\t\t\t\t_self.useRAF(false);\n\t\t\t\t}\n\t\t\t}, 1500);\n\t\t});\n\n\t\tp = gs.Ticker.prototype = new gs.events.EventDispatcher();\n\t\tp.constructor = gs.Ticker;\n\n\n/*\n * ----------------------------------------------------------------\n * Animation\n * ----------------------------------------------------------------\n */\n\t\tvar Animation = _class(\"core.Animation\", function(duration, vars) {\n\t\t\t\tthis.vars = vars = vars || {};\n\t\t\t\tthis._duration = this._totalDuration = duration || 0;\n\t\t\t\tthis._delay = Number(vars.delay) || 0;\n\t\t\t\tthis._timeScale = 1;\n\t\t\t\tthis._active = !!vars.immediateRender;\n\t\t\t\tthis.data = vars.data;\n\t\t\t\tthis._reversed = !!vars.reversed;\n\n\t\t\t\tif (!_rootTimeline) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\n\t\t\t\tvar tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;\n\t\t\t\ttl.add(this, tl._time);\n\n\t\t\t\tif (this.vars.paused) {\n\t\t\t\t\tthis.paused(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t_ticker = Animation.ticker = new gs.Ticker();\n\t\tp = Animation.prototype;\n\t\tp._dirty = p._gc = p._initted = p._paused = false;\n\t\tp._totalTime = p._time = 0;\n\t\tp._rawPrevTime = -1;\n\t\tp._next = p._last = p._onUpdate = p._timeline = p.timeline = null;\n\t\tp._paused = false;\n\n\n\t\t//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\n\t\tvar _checkTimeout = function() {\n\t\t\t\tif (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== \"hidden\" || !_ticker.lagSmoothing())) { //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\tvar t = setTimeout(_checkTimeout, 2000);\n\t\t\t\tif (t.unref) {\n\t\t\t\t\t// allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.\n\t\t\t\t\tt.unref();\n\t\t\t\t}\n\t\t\t};\n\t\t_checkTimeout();\n\n\n\t\tp.play = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(false).paused(false);\n\t\t};\n\n\t\tp.pause = function(atTime, suppressEvents) {\n\t\t\tif (atTime != null) {\n\t\t\t\tthis.seek(atTime, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.resume = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(false);\n\t\t};\n\n\t\tp.seek = function(time, suppressEvents) {\n\t\t\treturn this.totalTime(Number(time), suppressEvents !== false);\n\t\t};\n\n\t\tp.restart = function(includeDelay, suppressEvents) {\n\t\t\treturn this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);\n\t\t};\n\n\t\tp.reverse = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek((from || this.totalDuration()), suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(true).paused(false);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\t//stub - we override this method in subclasses.\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\tthis._initted = this._gc = false;\n\t\t\tthis._rawPrevTime = -1;\n\t\t\tif (this._gc || !this.timeline) {\n\t\t\t\tthis._enabled(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.isActive = function() {\n\t\t\tvar tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.\n\t\t\t\tstartTime = this._startTime,\n\t\t\t\trawTime;\n\t\t\treturn (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - _tinyNum));\n\t\t};\n\n\t\tp._enabled = function (enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tthis._gc = !enabled;\n\t\t\tthis._active = this.isActive();\n\t\t\tif (ignoreTimeline !== true) {\n\t\t\t\tif (enabled && !this.timeline) {\n\t\t\t\t\tthis._timeline.add(this, this._startTime - this._delay);\n\t\t\t\t} else if (!enabled && this.timeline) {\n\t\t\t\t\tthis._timeline._remove(this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n\t\tp._kill = function(vars, target) {\n\t\t\treturn this._enabled(false, false);\n\t\t};\n\n\t\tp.kill = function(vars, target) {\n\t\t\tthis._kill(vars, target);\n\t\t\treturn this;\n\t\t};\n\n\t\tp._uncache = function(includeSelf) {\n\t\t\tvar tween = includeSelf ? this : this.timeline;\n\t\t\twhile (tween) {\n\t\t\t\ttween._dirty = true;\n\t\t\t\ttween = tween.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._swapSelfInParams = function(params) {\n\t\t\tvar i = params.length,\n\t\t\t\tcopy = params.concat();\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (params[i] === \"{self}\") {\n\t\t\t\t\tcopy[i] = this;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn copy;\n\t\t};\n\n\t\tp._callback = function(type) {\n\t\t\tvar v = this.vars,\n\t\t\t\tcallback = v[type],\n\t\t\t\tparams = v[type + \"Params\"],\n\t\t\t\tscope = v[type + \"Scope\"] || v.callbackScope || this,\n\t\t\t\tl = params ? params.length : 0;\n\t\t\tswitch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + \"Scope\"] || v.callbackScope || this, v[type + \"Params\"] || _blankArray);\n\t\t\t\tcase 0: callback.call(scope); break;\n\t\t\t\tcase 1: callback.call(scope, params[0]); break;\n\t\t\t\tcase 2: callback.call(scope, params[0], params[1]); break;\n\t\t\t\tdefault: callback.apply(scope, params);\n\t\t\t}\n\t\t};\n\n//----Animation getters/setters --------------------------------------------------------\n\n\t\tp.eventCallback = function(type, callback, params, scope) {\n\t\t\tif ((type || \"\").substr(0,2) === \"on\") {\n\t\t\t\tvar v = this.vars;\n\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\treturn v[type];\n\t\t\t\t}\n\t\t\t\tif (callback == null) {\n\t\t\t\t\tdelete v[type];\n\t\t\t\t} else {\n\t\t\t\t\tv[type] = callback;\n\t\t\t\t\tv[type + \"Params\"] = (_isArray(params) && params.join(\"\").indexOf(\"{self}\") !== -1) ? this._swapSelfInParams(params) : params;\n\t\t\t\t\tv[type + \"Scope\"] = scope;\n\t\t\t\t}\n\t\t\t\tif (type === \"onUpdate\") {\n\t\t\t\t\tthis._onUpdate = callback;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.delay = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._delay;\n\t\t\t}\n\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\tthis.startTime( this._startTime + value - this._delay );\n\t\t\t}\n\t\t\tthis._delay = value;\n\t\t\treturn this;\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tthis._dirty = false;\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tthis._duration = this._totalDuration = value;\n\t\t\tthis._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\n\t\t\tif (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {\n\t\t\t\tthis.totalTime(this._totalTime * (value / this._duration), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tthis._dirty = false;\n\t\t\treturn (!arguments.length) ? this._totalDuration : this.duration(value);\n\t\t};\n\n\t\tp.time = function(value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\treturn this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);\n\t\t};\n\n\t\tp.totalTime = function(time, suppressEvents, uncapped) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._totalTime;\n\t\t\t}\n\t\t\tif (this._timeline) {\n\t\t\t\tif (time < 0 && !uncapped) {\n\t\t\t\t\ttime += this.totalDuration();\n\t\t\t\t}\n\t\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\t\tif (this._dirty) {\n\t\t\t\t\t\tthis.totalDuration();\n\t\t\t\t\t}\n\t\t\t\t\tvar totalDuration = this._totalDuration,\n\t\t\t\t\t\ttl = this._timeline;\n\t\t\t\t\tif (time > totalDuration && !uncapped) {\n\t\t\t\t\t\ttime = totalDuration;\n\t\t\t\t\t}\n\t\t\t\t\tthis._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);\n\t\t\t\t\tif (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n\t\t\t\t\t\tthis._uncache(false);\n\t\t\t\t\t}\n\t\t\t\t\t//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\n\t\t\t\t\tif (tl._timeline) {\n\t\t\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\t\t\tif (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {\n\t\t\t\t\t\t\t\ttl.totalTime(tl._totalTime, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._gc) {\n\t\t\t\t\tthis._enabled(true, false);\n\t\t\t\t}\n\t\t\t\tif (this._totalTime !== time || this._duration === 0) {\n\t\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tthis.render(time, suppressEvents, false);\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.progress = p.totalProgress = function(value, suppressEvents) {\n\t\t\tvar duration = this.duration();\n\t\t\treturn (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);\n\t\t};\n\n\t\tp.startTime = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._startTime;\n\t\t\t}\n\t\t\tif (value !== this._startTime) {\n\t\t\t\tthis._startTime = value;\n\t\t\t\tif (this.timeline) if (this.timeline._sortChildren) {\n\t\t\t\t\tthis.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.endTime = function(includeRepeats) {\n\t\t\treturn this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;\n\t\t};\n\n\t\tp.timeScale = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._timeScale;\n\t\t\t}\n\t\t\tvar pauseTime, t;\n\t\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\t\tif (this._timeline && this._timeline.smoothChildTiming) {\n\t\t\t\tpauseTime = this._pauseTime;\n\t\t\t\tt = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();\n\t\t\t\tthis._startTime = t - ((t - this._startTime) * this._timeScale / value);\n\t\t\t}\n\t\t\tthis._timeScale = value;\n\t\t\tt = this.timeline;\n\t\t\twhile (t && t.timeline) { //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n\t\t\t\tt._dirty = true;\n\t\t\t\tt.totalDuration();\n\t\t\t\tt = t.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.reversed = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._reversed;\n\t\t\t}\n\t\t\tif (value != this._reversed) {\n\t\t\t\tthis._reversed = value;\n\t\t\t\tthis.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.paused = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._paused;\n\t\t\t}\n\t\t\tvar tl = this._timeline,\n\t\t\t\traw, elapsed;\n\t\t\tif (value != this._paused) if (tl) {\n\t\t\t\tif (!_tickerActive && !value) {\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\traw = tl.rawTime();\n\t\t\t\telapsed = raw - this._pauseTime;\n\t\t\t\tif (!value && tl.smoothChildTiming) {\n\t\t\t\t\tthis._startTime += elapsed;\n\t\t\t\t\tthis._uncache(false);\n\t\t\t\t}\n\t\t\t\tthis._pauseTime = value ? raw : null;\n\t\t\t\tthis._paused = value;\n\t\t\t\tthis._active = this.isActive();\n\t\t\t\tif (!value && elapsed !== 0 && this._initted && this.duration()) {\n\t\t\t\t\traw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;\n\t\t\t\t\tthis.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._gc && !value) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * SimpleTimeline\n * ----------------------------------------------------------------\n */\n\t\tvar SimpleTimeline = _class(\"core.SimpleTimeline\", function(vars) {\n\t\t\tAnimation.call(this, 0, vars);\n\t\t\tthis.autoRemoveChildren = this.smoothChildTiming = true;\n\t\t});\n\n\t\tp = SimpleTimeline.prototype = new Animation();\n\t\tp.constructor = SimpleTimeline;\n\t\tp.kill()._gc = false;\n\t\tp._first = p._last = p._recent = null;\n\t\tp._sortChildren = false;\n\n\t\tp.add = p.insert = function(child, position, align, stagger) {\n\t\t\tvar prevTween, st;\n\t\t\tchild._startTime = Number(position || 0) + child._delay;\n\t\t\tif (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\n\t\t\t\tchild._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime);\n\t\t\t}\n\t\t\tif (child.timeline) {\n\t\t\t\tchild.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.\n\t\t\t}\n\t\t\tchild.timeline = child._timeline = this;\n\t\t\tif (child._gc) {\n\t\t\t\tchild._enabled(true, true);\n\t\t\t}\n\t\t\tprevTween = this._last;\n\t\t\tif (this._sortChildren) {\n\t\t\t\tst = child._startTime;\n\t\t\t\twhile (prevTween && prevTween._startTime > st) {\n\t\t\t\t\tprevTween = prevTween._prev;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prevTween) {\n\t\t\t\tchild._next = prevTween._next;\n\t\t\t\tprevTween._next = child;\n\t\t\t} else {\n\t\t\t\tchild._next = this._first;\n\t\t\t\tthis._first = child;\n\t\t\t}\n\t\t\tif (child._next) {\n\t\t\t\tchild._next._prev = child;\n\t\t\t} else {\n\t\t\t\tthis._last = child;\n\t\t\t}\n\t\t\tchild._prev = prevTween;\n\t\t\tthis._recent = child;\n\t\t\tif (this._timeline) {\n\t\t\t\tthis._uncache(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._remove = function(tween, skipDisable) {\n\t\t\tif (tween.timeline === this) {\n\t\t\t\tif (!skipDisable) {\n\t\t\t\t\ttween._enabled(false, true);\n\t\t\t\t}\n\n\t\t\t\tif (tween._prev) {\n\t\t\t\t\ttween._prev._next = tween._next;\n\t\t\t\t} else if (this._first === tween) {\n\t\t\t\t\tthis._first = tween._next;\n\t\t\t\t}\n\t\t\t\tif (tween._next) {\n\t\t\t\t\ttween._next._prev = tween._prev;\n\t\t\t\t} else if (this._last === tween) {\n\t\t\t\t\tthis._last = tween._prev;\n\t\t\t\t}\n\t\t\t\ttween._next = tween._prev = tween.timeline = null;\n\t\t\t\tif (tween === this._recent) {\n\t\t\t\t\tthis._recent = this._last;\n\t\t\t\t}\n\n\t\t\t\tif (this._timeline) {\n\t\t\t\t\tthis._uncache(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar tween = this._first,\n\t\t\t\tnext;\n\t\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\tif (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t};\n\n\t\tp.rawTime = function() {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\treturn this._totalTime;\n\t\t};\n\n/*\n * ----------------------------------------------------------------\n * TweenLite\n * ----------------------------------------------------------------\n */\n\t\tvar TweenLite = _class(\"TweenLite\", function(target, duration, vars) {\n\t\t\t\tAnimation.call(this, duration, vars);\n\t\t\t\tthis.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\n\t\t\t\tif (target == null) {\n\t\t\t\t\tthrow \"Cannot tween a null target.\";\n\t\t\t\t}\n\n\t\t\t\tthis.target = target = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\n\t\t\t\tvar isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),\n\t\t\t\t\toverwrite = this.vars.overwrite,\n\t\t\t\t\ti, targ, targets;\n\n\t\t\t\tthis._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === \"number\") ? overwrite >> 0 : _overwriteLookup[overwrite];\n\n\t\t\t\tif ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== \"number\") {\n\t\t\t\t\tthis._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\t\tthis._propLookup = [];\n\t\t\t\t\tthis._siblings = [];\n\t\t\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\t\t\ttarg = targets[i];\n\t\t\t\t\t\tif (!targ) {\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\ttarg = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\n\t\t\t\t\t\t\tif (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\t\ttargets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tthis._targets = targets = targets.concat(_slice(targ));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._siblings[i] = _register(targ, this, false);\n\t\t\t\t\t\tif (overwrite === 1) if (this._siblings[i].length > 1) {\n\t\t\t\t\t\t\t_applyOverwrite(targ, this, null, 1, this._siblings[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._propLookup = {};\n\t\t\t\t\tthis._siblings = _register(target, this, false);\n\t\t\t\t\tif (overwrite === 1) if (this._siblings.length > 1) {\n\t\t\t\t\t\t_applyOverwrite(target, this, null, 1, this._siblings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {\n\t\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative\n\t\t\t\t}\n\t\t\t}, true),\n\t\t\t_isSelector = function(v) {\n\t\t\t\treturn (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n\t\t\t},\n\t\t\t_autoCSS = function(vars, target) {\n\t\t\t\tvar css = {},\n\t\t\t\t\tp;\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tif (!_reservedProps[p] && (!(p in target) || p === \"transform\" || p === \"x\" || p === \"y\" || p === \"width\" || p === \"height\" || p === \"className\" || p === \"border\") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\n\t\t\t\t\t\tcss[p] = vars[p];\n\t\t\t\t\t\tdelete vars[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvars.css = css;\n\t\t\t};\n\n\t\tp = TweenLite.prototype = new Animation();\n\t\tp.constructor = TweenLite;\n\t\tp.kill()._gc = false;\n\n//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\n\n\t\tp.ratio = 0;\n\t\tp._firstPT = p._targets = p._overwrittenProps = p._startAt = null;\n\t\tp._notifyPluginsOfEnabled = p._lazy = false;\n\n\t\tTweenLite.version = \"2.1.2\";\n\t\tTweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);\n\t\tTweenLite.defaultOverwrite = \"auto\";\n\t\tTweenLite.ticker = _ticker;\n\t\tTweenLite.autoSleep = 120;\n\t\tTweenLite.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t_ticker.lagSmoothing(threshold, adjustedLag);\n\t\t};\n\n\t\tTweenLite.selector = window.$ || window.jQuery || function(e) {\n\t\t\tvar selector = window.$ || window.jQuery;\n\t\t\tif (selector) {\n\t\t\t\tTweenLite.selector = selector;\n\t\t\t\treturn selector(e);\n\t\t\t}\n\t\t\tif (!_doc) { //in some dev environments (like Angular 6), GSAP gets loaded before the document is defined! So re-query it here if/when necessary.\n\t\t\t\t_doc = window.document;\n\t\t\t}\n\t\t\treturn (!_doc) ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === \"#\") ? e.substr(1) : e));\n\t\t};\n\n\t\tvar _lazyTweens = [],\n\t\t\t_lazyLookup = {},\n\t\t\t_numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_relExp = /[\\+-]=-?[\\.\\d]/,\n\t\t\t//_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n\t\t\t_setRatio = function(v) {\n\t\t\t\tvar pt = this._firstPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end != null) ? this.end : v ? this.join(\"\") : this.start;\n\t\t\t\t\tif (pt.m) {\n\t\t\t\t\t\tval = pt.m.call(this._tween, val, this._target || pt.t, this._tween);\n\t\t\t\t\t} else if (val < min) if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.f) {\n\t\t\t\t\t\tpt.t[pt.p] = val;\n\t\t\t\t\t} else if (pt.fp) {\n\t\t\t\t\t\tpt.t[pt.p](pt.fp, val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.t[pt.p](val);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t},\n\t\t\t_blobRound = function(v) {\n\t\t\t\treturn (((v * 1000) | 0) / 1000) + \"\";\n\t\t\t},\n\t\t\t//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n\t\t\t_blobDif = function(start, end, filter, pt) {\n\t\t\t\tvar a = [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\ts = \"\",\n\t\t\t\t\tcolor = 0,\n\t\t\t\t\tstartNums, endNums, num, i, l, nonNumbers, currentNum;\n\t\t\t\ta.start = start;\n\t\t\t\ta.end = end;\n\t\t\t\tstart = a[0] = start + \"\"; //ensure values are strings\n\t\t\t\tend = a[1] = end + \"\";\n\t\t\t\tif (filter) {\n\t\t\t\t\tfilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n\t\t\t\t\tstart = a[0];\n\t\t\t\t\tend = a[1];\n\t\t\t\t}\n\t\t\t\ta.length = 0;\n\t\t\t\tstartNums = start.match(_numbersExp) || [];\n\t\t\t\tendNums = end.match(_numbersExp) || [];\n\t\t\t\tif (pt) {\n\t\t\t\t\tpt._next = null;\n\t\t\t\t\tpt.blob = 1;\n\t\t\t\t\ta._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)\n\t\t\t\t}\n\t\t\t\tl = endNums.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tcurrentNum = endNums[i];\n\t\t\t\t\tnonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);\n\t\t\t\t\ts += (nonNumbers || !i) ? nonNumbers : \",\"; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n\t\t\t\t\tcharIndex += nonNumbers.length;\n\t\t\t\t\tif (color) { //sense rgba() values and round them.\n\t\t\t\t\t\tcolor = (color + 1) % 5;\n\t\t\t\t\t} else if (nonNumbers.substr(-5) === \"rgba(\") {\n\t\t\t\t\t\tcolor = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentNum === startNums[i] || startNums.length <= i) {\n\t\t\t\t\t\ts += currentNum;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (s) {\n\t\t\t\t\t\t\ta.push(s);\n\t\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum = parseFloat(startNums[i]);\n\t\t\t\t\t\ta.push(num);\n\t\t\t\t\t\ta._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === \"=\") ? parseInt(currentNum.charAt(0) + \"1\", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : _blobRound}; //limiting to 3 decimal places and casting as a string can really help performance when array.join() is called!\n\t\t\t\t\t\t//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n\t\t\t\t\t}\n\t\t\t\t\tcharIndex += currentNum.length;\n\t\t\t\t}\n\t\t\t\ts += end.substr(charIndex);\n\t\t\t\tif (s) {\n\t\t\t\t\ta.push(s);\n\t\t\t\t}\n\t\t\t\ta.setRatio = _setRatio;\n\t\t\t\tif (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n\t\t\t\t\ta.end = null;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t//note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n\t\t\t_addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {\n\t\t\t\tif (typeof(end) === \"function\") {\n\t\t\t\t\tend = end(index || 0, target);\n\t\t\t\t}\n\t\t\t\tvar type = typeof(target[prop]),\n\t\t\t\t\tgetterName = (type !== \"function\") ? \"\" : ((prop.indexOf(\"set\") || typeof(target[\"get\" + prop.substr(3)]) !== \"function\") ? prop : \"get\" + prop.substr(3)),\n\t\t\t\t\ts = (start !== \"get\") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),\n\t\t\t\t\tisRelative = (typeof(end) === \"string\" && end.charAt(1) === \"=\"),\n\t\t\t\t\tpt = {t:target, p:prop, s:s, f:(type === \"function\"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === \"function\") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + \"1\", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},\n\t\t\t\t\tblob;\n\n\t\t\t\tif (typeof(s) !== \"number\" || (typeof(end) !== \"number\" && !isRelative)) {\n\t\t\t\t\tif (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === \"boolean\" || typeof(end) === \"boolean\") {\n\t\t\t\t\t\t//a blob (string that has multiple numbers in it)\n\t\t\t\t\t\tpt.fp = funcParam;\n\t\t\t\t\t\tblob = _blobDif(s, (isRelative ? (parseFloat(pt.s) + pt.c) + (pt.s + \"\").replace(/[0-9\\-\\.]/g, \"\") : end), stringFilter || TweenLite.defaultStringFilter, pt);\n\t\t\t\t\t\tpt = {t: blob, p: \"setRatio\", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0}; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.s = parseFloat(s);\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\tpt.c = (parseFloat(end) - pt.s) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pt.c) { //only add it to the linked list if there's a change.\n\t\t\t\t\tif ((pt._next = this._firstPT)) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t\treturn pt;\n\t\t\t\t}\n\t\t\t},\n\t\t\t_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n\t\t\t_plugins = TweenLite._plugins = {},\n\t\t\t_tweenLookup = _internals.tweenLookup = {},\n\t\t\t_tweenLookupNum = 0,\n\t\t\t_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1, yoyoEase:1, stagger:1},\n\t\t\t_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, \"true\":1, \"false\":0},\n\t\t\t_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),\n\t\t\t_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),\n\t\t\t_nextGCFrame = 30,\n\t\t\t_lazyRender = _internals.lazyRender = function() {\n\t\t\t\tvar l = _lazyTweens.length,\n\t\t\t\t\ti, tween;\n\t\t\t\t_lazyLookup = {};\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\ttween = _lazyTweens[i];\n\t\t\t\t\tif (tween && tween._lazy !== false) {\n\t\t\t\t\t\ttween.render(tween._lazy[0], tween._lazy[1], true);\n\t\t\t\t\t\ttween._lazy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_lazyTweens.length = 0;\n\t\t\t};\n\n\t\t_rootTimeline._startTime = _ticker.time;\n\t\t_rootFramesTimeline._startTime = _ticker.frame;\n\t\t_rootTimeline._active = _rootFramesTimeline._active = true;\n\t\tsetTimeout(_lazyRender, 1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\n\n\t\tAnimation._updateRoot = TweenLite.render = function() {\n\t\t\t\tvar i, a, p;\n\t\t\t\tif (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\t_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);\n\t\t\t\t_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tif (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n\t\t\t\t\t_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);\n\t\t\t\t\tfor (p in _tweenLookup) {\n\t\t\t\t\t\ta = _tweenLookup[p].tweens;\n\t\t\t\t\t\ti = a.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i]._gc) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a.length === 0) {\n\t\t\t\t\t\t\tdelete _tweenLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\n\t\t\t\t\tp = _rootTimeline._first;\n\t\t\t\t\tif (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {\n\t\t\t\t\t\twhile (p && p._paused) {\n\t\t\t\t\t\t\tp = p._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!p) {\n\t\t\t\t\t\t\t_ticker.sleep();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t_ticker.addEventListener(\"tick\", Animation._updateRoot);\n\n\t\tvar _register = function(target, tween, scrub) {\n\t\t\t\tvar id = target._gsTweenID, a, i;\n\t\t\t\tif (!_tweenLookup[id || (target._gsTweenID = id = \"t\" + (_tweenLookupNum++))]) {\n\t\t\t\t\t_tweenLookup[id] = {target:target, tweens:[]};\n\t\t\t\t}\n\t\t\t\tif (tween) {\n\t\t\t\t\ta = _tweenLookup[id].tweens;\n\t\t\t\t\ta[(i = a.length)] = tween;\n\t\t\t\t\tif (scrub) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i] === tween) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn _tweenLookup[id].tweens;\n\t\t\t},\n\t\t\t_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {\n\t\t\t\tvar func = overwrittenTween.vars.onOverwrite, r1, r2;\n\t\t\t\tif (func) {\n\t\t\t\t\tr1 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\tfunc = TweenLite.onOverwrite;\n\t\t\t\tif (func) {\n\t\t\t\t\tr2 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\treturn (r1 !== false && r2 !== false);\n\t\t\t},\n\t\t\t_applyOverwrite = function(target, tween, props, mode, siblings) {\n\t\t\t\tvar i, changed, curTween, l;\n\t\t\t\tif (mode === 1 || mode >= 4) {\n\t\t\t\t\tl = siblings.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif ((curTween = siblings[i]) !== tween) {\n\t\t\t\t\t\t\tif (!curTween._gc) {\n\t\t\t\t\t\t\t\tif (curTween._kill(null, target, tween)) {\n\t\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (mode === 5) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\t\t\t\t//NOTE: Add tiny amount to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\n\t\t\t\tvar startTime = tween._startTime + _tinyNum,\n\t\t\t\t\toverlaps = [],\n\t\t\t\t\toCount = 0,\n\t\t\t\t\tzeroDur = (tween._duration === 0),\n\t\t\t\t\tglobalStart;\n\t\t\t\ti = siblings.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {\n\t\t\t\t\t\t//ignore\n\t\t\t\t\t} else if (curTween._timeline !== tween._timeline) {\n\t\t\t\t\t\tglobalStart = globalStart || _checkOverlap(tween, 0, zeroDur);\n\t\t\t\t\t\tif (_checkOverlap(curTween, globalStart, zeroDur) === 0) {\n\t\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= _tinyNum * 2)) {\n\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ti = oCount;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tcurTween = overlaps[i];\n\t\t\t\t\tl = curTween._firstPT; //we need to discern if there were property tweens originally; if they all get removed in the next line's _kill() call, the tween should be killed. See https://github.com/greensock/GreenSock-JS/issues/278\n\t\t\t\t\tif (mode === 2) if (curTween._kill(props, target, tween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (mode !== 2 || (!curTween._firstPT && curTween._initted && l)) {\n\t\t\t\t\t\tif (mode !== 2 && !_onOverwrite(curTween, tween)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn changed;\n\t\t\t},\n\t\t\t_checkOverlap = function(tween, reference, zeroDur) {\n\t\t\t\tvar tl = tween._timeline,\n\t\t\t\t\tts = tl._timeScale,\n\t\t\t\t\tt = tween._startTime;\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tt += tl._startTime;\n\t\t\t\t\tts *= tl._timeScale;\n\t\t\t\t\tif (tl._paused) {\n\t\t\t\t\t\treturn -100;\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t\tt /= ts;\n\t\t\t\treturn (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;\n\t\t\t};\n\n\n//---- TweenLite instance methods -----------------------------------------------------------------------------\n\n\t\tp._init = function() {\n\t\t\tvar v = this.vars,\n\t\t\t\top = this._overwrittenProps,\n\t\t\t\tdur = this._duration,\n\t\t\t\timmediate = !!v.immediateRender,\n\t\t\t\tease = v.ease,\n\t\t\t\tstartAt = this._startAt,\n\t\t\t\ti, initPlugins, pt, p, startVars, l;\n\t\t\tif (v.startAt) {\n\t\t\t\tif (startAt) {\n\t\t\t\t\tstartAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\n\t\t\t\t\tstartAt.kill();\n\t\t\t\t}\n\t\t\t\tstartVars = {};\n\t\t\t\tfor (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\n\t\t\t\t\tstartVars[p] = v.startAt[p];\n\t\t\t\t}\n\t\t\t\tstartVars.data = \"isStart\";\n\t\t\t\tstartVars.overwrite = false;\n\t\t\t\tstartVars.immediateRender = true;\n\t\t\t\tstartVars.lazy = (immediate && v.lazy !== false);\n\t\t\t\tstartVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\n\t\t\t\tstartVars.onUpdate = v.onUpdate;\n\t\t\t\tstartVars.onUpdateParams = v.onUpdateParams;\n\t\t\t\tstartVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;\n\t\t\t\tthis._startAt = TweenLite.to(this.target || {}, 0, startVars);\n\t\t\t\tif (immediate) {\n\t\t\t\t\tif (this._time > 0) {\n\t\t\t\t\t\tthis._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n\t\t\t\t\t} else if (dur !== 0) {\n\t\t\t\t\t\treturn; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (v.runBackwards && dur !== 0) {\n\t\t\t\t//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n\t\t\t\tif (startAt) {\n\t\t\t\t\tstartAt.render(-1, true);\n\t\t\t\t\tstartAt.kill();\n\t\t\t\t\tthis._startAt = null;\n\t\t\t\t} else {\n\t\t\t\t\tif (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n\t\t\t\t\t\timmediate = false;\n\t\t\t\t\t}\n\t\t\t\t\tpt = {};\n\t\t\t\t\tfor (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\n\t\t\t\t\t\tif (!_reservedProps[p] || p === \"autoCSS\") {\n\t\t\t\t\t\t\tpt[p] = v[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt.overwrite = 0;\n\t\t\t\t\tpt.data = \"isFromStart\"; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n\t\t\t\t\tpt.lazy = (immediate && v.lazy !== false);\n\t\t\t\t\tpt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n\t\t\t\t\tthis._startAt = TweenLite.to(this.target, 0, pt);\n\t\t\t\t\tif (!immediate) {\n\t\t\t\t\t\tthis._startAt._init(); //ensures that the initial values are recorded\n\t\t\t\t\t\tthis._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\n\t\t\t\t\t\tif (this.vars.immediateRender) {\n\t\t\t\t\t\t\tthis._startAt = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this._time === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === \"function\") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;\n\t\t\tif (v.easeParams instanceof Array && ease.config) {\n\t\t\t\tthis._ease = ease.config.apply(ease, v.easeParams);\n\t\t\t}\n\t\t\tthis._easeType = this._ease._type;\n\t\t\tthis._easePower = this._ease._power;\n\t\t\tthis._firstPT = null;\n\n\t\t\tif (this._targets) {\n\t\t\t\tl = this._targets.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tif ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);\n\t\t\t}\n\n\t\t\tif (initPlugins) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onInitAllProps\", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n\t\t\t}\n\t\t\tif (op) if (!this._firstPT) if (typeof(this.target) !== \"function\") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\n\t\t\t\tthis._enabled(false, false);\n\t\t\t}\n\t\t\tif (v.runBackwards) {\n\t\t\t\tpt = this._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tpt.s += pt.c;\n\t\t\t\t\tpt.c = -pt.c;\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onUpdate = v.onUpdate;\n\t\t\tthis._initted = true;\n\t\t};\n\n\t\tp._initProps = function(target, propLookup, siblings, overwrittenProps, index) {\n\t\t\tvar p, i, initPlugins, plugin, pt, v;\n\t\t\tif (target == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (_lazyLookup[target._gsTweenID]) {\n\t\t\t\t_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n\t\t\t}\n\n\t\t\tif (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n\t\t\t\t_autoCSS(this.vars, target);\n\t\t\t}\n\t\t\tfor (p in this.vars) {\n\t\t\t\tv = this.vars[p];\n\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\tif (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\t\tthis.vars[p] = v = this._swapSelfInParams(v, this);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {\n\n\t\t\t\t\t//t - target \t\t[object]\n\t\t\t\t\t//p - property \t\t[string]\n\t\t\t\t\t//s - start\t\t\t[number]\n\t\t\t\t\t//c - change\t\t[number]\n\t\t\t\t\t//f - isFunction\t[boolean]\n\t\t\t\t\t//n - name\t\t\t[string]\n\t\t\t\t\t//pg - isPlugin \t[boolean]\n\t\t\t\t\t//pr - priority\t\t[number]\n\t\t\t\t\t//m - mod           [function | 0]\n\t\t\t\t\tthis._firstPT = pt = {_next:this._firstPT, t:plugin, p:\"setRatio\", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};\n\t\t\t\t\ti = plugin._overwriteProps.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tpropLookup[plugin._overwriteProps[i]] = this._firstPT;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._priority || plugin._onInitAllProps) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._onDisable || plugin._onEnable) {\n\t\t\t\t\t\tthis._notifyPluginsOfEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup[p] = _addPropTween.call(this, target, p, \"get\", v, p, 0, null, this.vars.stringFilter, index);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {\n\t\t\t\tthis._kill(propLookup, target);\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.\n\t\t\t\t_lazyLookup[target._gsTweenID] = true;\n\t\t\t}\n\t\t\treturn initPlugins;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar self = this,\n\t\t\t\tprevTime = self._time,\n\t\t\t\tduration = self._duration,\n\t\t\t\tprevRawPrevTime = self._rawPrevTime,\n\t\t\t\tisComplete, callback, pt, rawPrevTime;\n\t\t\tif (time >= duration - _tinyNum && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tself._totalTime = self._time = duration;\n\t\t\t\tself.ratio = self._ease._calcEnd ? self._ease.getRatio(1) : 1;\n\t\t\t\tif (!self._reversed ) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tforce = (force || self._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t}\n\t\t\t\tif (duration === 0) if (self._initted || !self.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (self._startTime === self._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevRawPrevTime < 0 || (time <= 0 && time >= -_tinyNum) || (prevRawPrevTime === _tinyNum && self.data !== \"isPause\")) if (prevRawPrevTime !== time) { //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tself._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\n\t\t\t} else if (time < _tinyNum) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tself._totalTime = self._time = 0;\n\t\t\t\tself.ratio = self._ease._calcEnd ? self._ease.getRatio(0) : 0;\n\t\t\t\tif (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = self._reversed;\n\t\t\t\t}\n\t\t\t\tif (time > -_tinyNum) {\n\t\t\t\t\ttime = 0;\n\t\t\t\t} else if (time < 0) {\n\t\t\t\t\tself._active = false;\n\t\t\t\t\tif (duration === 0) if (self._initted || !self.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\t\tif (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && self.data === \"isPause\")) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!self._initted || (self._startAt && self._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.\n\t\t\t\t\tforce = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself._totalTime = self._time = time;\n\n\t\t\t\tif (self._easeType) {\n\t\t\t\t\tvar r = time / duration, type = self._easeType, pow = self._easePower;\n\t\t\t\t\tif (type === 1 || (type === 3 && r >= 0.5)) {\n\t\t\t\t\t\tr = 1 - r;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 3) {\n\t\t\t\t\t\tr *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (pow === 1) {\n\t\t\t\t\t\tr *= r;\n\t\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\t\tr *= r * r;\n\t\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\t\tr *= r * r * r;\n\t\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t\t}\n\t\t\t\t\tself.ratio = (type === 1) ? 1 - r : (type === 2) ? r : (time / duration < 0.5) ? r / 2 : 1 - (r / 2);\n\t\t\t\t} else {\n\t\t\t\t\tself.ratio = self._ease.getRatio(time / duration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (self._time === prevTime && !force) {\n\t\t\t\treturn;\n\t\t\t} else if (!self._initted) {\n\t\t\t\tself._init();\n\t\t\t\tif (!self._initted || self._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!force && self._firstPT && ((self.vars.lazy !== false && self._duration) || (self.vars.lazy && !self._duration))) {\n\t\t\t\t\tself._time = self._totalTime = prevTime;\n\t\t\t\t\tself._rawPrevTime = prevRawPrevTime;\n\t\t\t\t\t_lazyTweens.push(self);\n\t\t\t\t\tself._lazy = [time, suppressEvents];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\t\tif (self._time && !isComplete) {\n\t\t\t\t\tself.ratio = self._ease.getRatio(self._time / duration);\n\t\t\t\t} else if (isComplete && self._ease._calcEnd) {\n\t\t\t\t\tself.ratio = self._ease.getRatio((self._time === 0) ? 0 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (self._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\n\t\t\t\tself._lazy = false;\n\t\t\t}\n\t\t\tif (!self._active) if (!self._paused && self._time !== prevTime && time >= 0) {\n\t\t\t\tself._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t\t}\n\t\t\tif (prevTime === 0) {\n\t\t\t\tif (self._startAt) {\n\t\t\t\t\tif (time >= 0) {\n\t\t\t\t\t\tself._startAt.render(time, true, force);\n\t\t\t\t\t} else if (!callback) {\n\t\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (self.vars.onStart) if (self._time !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\t\tself._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tpt = self._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.f) {\n\t\t\t\t\tpt.t[pt.p](pt.c * self.ratio + pt.s);\n\t\t\t\t} else {\n\t\t\t\t\tpt.t[pt.p] = pt.c * self.ratio + pt.s;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\n\t\t\tif (self._onUpdate) {\n\t\t\t\tif (time < 0) if (self._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tself._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents) if (self._time !== prevTime || isComplete || force) {\n\t\t\t\t\tself._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (callback) if (!self._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (time < 0 && self._startAt && !self._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\n\t\t\t\t\tself._startAt.render(time, true, force);\n\t\t\t\t}\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (self._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tself._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tself._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && self.vars[callback]) {\n\t\t\t\t\tself._callback(callback);\n\t\t\t\t}\n\t\t\t\tif (duration === 0 && self._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\t\tself._rawPrevTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._kill = function(vars, target, overwritingTween) {\n\t\t\tif (vars === \"all\") {\n\t\t\t\tvars = null;\n\t\t\t}\n\t\t\tif (vars == null) if (target == null || target === this.target) {\n\t\t\t\tthis._lazy = false;\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\ttarget = (typeof(target) !== \"string\") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;\n\t\t\tvar simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),\n\t\t\t\tfirstPT = this._firstPT,\n\t\t\t\ti, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (this._kill(vars, target[i], overwritingTween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._targets) {\n\t\t\t\t\ti = this._targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (target === this._targets[i]) {\n\t\t\t\t\t\t\tpropLookup = this._propLookup[i] || {};\n\t\t\t\t\t\t\tthis._overwrittenProps = this._overwrittenProps || [];\n\t\t\t\t\t\t\toverwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : \"all\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (target !== this.target) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup = this._propLookup;\n\t\t\t\t\toverwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : \"all\";\n\t\t\t\t}\n\n\t\t\t\tif (propLookup) {\n\t\t\t\t\tkillProps = vars || propLookup;\n\t\t\t\t\trecord = (vars !== overwrittenProps && overwrittenProps !== \"all\" && vars !== propLookup && (typeof(vars) !== \"object\" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\n\t\t\t\t\tif (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {\n\t\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\t\tif (propLookup[p]) {\n\t\t\t\t\t\t\t\tif (!killed) {\n\t\t\t\t\t\t\t\t\tkilled = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tkilled.push(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\tif ((pt = propLookup[p])) {\n\t\t\t\t\t\t\tif (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\n\t\t\t\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p](pt.s);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p] = pt.s;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt.pg && pt.t._kill(killProps)) {\n\t\t\t\t\t\t\t\tchanged = true; //some plugins need to be notified so they can perform cleanup tasks first\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!pt.pg || pt.t._overwriteProps.length === 0) {\n\t\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\t\t\t} else if (pt === this._firstPT) {\n\t\t\t\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete propLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (record) {\n\t\t\t\t\t\t\toverwrittenProps[p] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._firstPT && this._initted && firstPT) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tif (this._notifyPluginsOfEnabled) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onDisable\", this);\n\t\t\t}\n\t\t\tvar t = this._time;\n\t\t\tthis._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;\n\t\t\tthis._notifyPluginsOfEnabled = this._active = this._lazy = false;\n\t\t\tthis._propLookup = (this._targets) ? {} : [];\n\t\t\tAnimation.prototype.invalidate.call(this);\n\t\t\tif (this.vars.immediateRender) {\n\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\tthis.render(t, false, this.vars.lazy !== false);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._enabled = function(enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (enabled && this._gc) {\n\t\t\t\tvar targets = this._targets,\n\t\t\t\t\ti;\n\t\t\t\tif (targets) {\n\t\t\t\t\ti = targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tthis._siblings[i] = _register(targets[i], this, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._siblings = _register(this.target, this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAnimation.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t\tif (this._notifyPluginsOfEnabled) if (this._firstPT) {\n\t\t\t\treturn TweenLite._onPluginEvent((enabled ? \"_onEnable\" : \"_onDisable\"), this);\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n//----TweenLite static methods -----------------------------------------------------\n\n\t\tTweenLite.to = function(target, duration, vars) {\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.from = function(target, duration, vars) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.fromTo = function(target, duration, fromVars, toVars) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, toVars);\n\t\t};\n\n\t\tTweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {\n\t\t\treturn new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});\n\t\t};\n\n\t\tTweenLite.set = function(target, vars) {\n\t\t\treturn new TweenLite(target, 0, vars);\n\t\t};\n\n\t\tTweenLite.getTweensOf = function(target, onlyActive) {\n\t\t\tif (target == null) { return []; }\n\t\t\ttarget = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\t\t\tvar i, a, j, t;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\ta = [];\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ta = a.concat(TweenLite.getTweensOf(target[i], onlyActive));\n\t\t\t\t}\n\t\t\t\ti = a.length;\n\t\t\t\t//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tt = a[i];\n\t\t\t\t\tj = i;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\tif (t === a[j]) {\n\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (target._gsTweenID) {\n\t\t\t\ta = _register(target).concat();\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (a[i]._gc || (onlyActive && !a[i].isActive())) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a || [];\n\t\t};\n\n\t\tTweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {\n\t\t\tif (typeof(onlyActive) === \"object\") {\n\t\t\t\tvars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\n\t\t\t\tonlyActive = false;\n\t\t\t}\n\t\t\tvar a = TweenLite.getTweensOf(target, onlyActive),\n\t\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[i]._kill(vars, target);\n\t\t\t}\n\t\t};\n\n\n\n/*\n * ----------------------------------------------------------------\n * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\n * ----------------------------------------------------------------\n */\n\t\tvar TweenPlugin = _class(\"plugins.TweenPlugin\", function(props, priority) {\n\t\t\t\t\tthis._overwriteProps = (props || \"\").split(\",\");\n\t\t\t\t\tthis._propName = this._overwriteProps[0];\n\t\t\t\t\tthis._priority = priority || 0;\n\t\t\t\t\tthis._super = TweenPlugin.prototype;\n\t\t\t\t}, true);\n\n\t\tp = TweenPlugin.prototype;\n\t\tTweenPlugin.version = \"1.19.0\";\n\t\tTweenPlugin.API = 2;\n\t\tp._firstPT = null;\n\t\tp._addTween = _addPropTween;\n\t\tp.setRatio = _setRatio;\n\n\t\tp._kill = function(lookup) {\n\t\t\tvar a = this._overwriteProps,\n\t\t\t\tpt = this._firstPT,\n\t\t\t\ti;\n\t\t\tif (lookup[this._propName] != null) {\n\t\t\t\tthis._overwriteProps = [];\n\t\t\t} else {\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (lookup[a[i]] != null) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (lookup[pt.n] != null) {\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\tpt._prev = null;\n\t\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp._mod = p._roundProps = function(lookup) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tval;\n\t\t\twhile (pt) {\n\t\t\t\tval = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + \"_\").join(\"\") ]);\n\t\t\t\tif (val && typeof(val) === \"function\") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\n\t\t\t\t\tif (pt.f === 2) {\n\t\t\t\t\t\tpt.t._applyPT.m = val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.m = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\tTweenLite._onPluginEvent = function(type, tween) {\n\t\t\tvar pt = tween._firstPT,\n\t\t\t\tchanged, pt2, first, last, next;\n\t\t\tif (type === \"_onInitAllProps\") {\n\t\t\t\t//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tpt = tween._firstPT = first;\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.pg) if (typeof(pt.t[type]) === \"function\") if (pt.t[type]()) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tTweenPlugin.activate = function(plugins) {\n\t\t\tvar i = plugins.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (plugins[i].API === TweenPlugin.API) {\n\t\t\t\t\t_plugins[(new plugins[i]())._propName] = plugins[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n\t\t_gsDefine.plugin = function(config) {\n\t\t\tif (!config || !config.propName || !config.init || !config.API) { throw \"illegal plugin definition.\"; }\n\t\t\tvar propName = config.propName,\n\t\t\t\tpriority = config.priority || 0,\n\t\t\t\toverwriteProps = config.overwriteProps,\n\t\t\t\tmap = {init:\"_onInitTween\", set:\"setRatio\", kill:\"_kill\", round:\"_mod\", mod:\"_mod\", initAll:\"_onInitAllProps\"},\n\t\t\t\tPlugin = _class(\"plugins.\" + propName.charAt(0).toUpperCase() + propName.substr(1) + \"Plugin\",\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tTweenPlugin.call(this, propName, priority);\n\t\t\t\t\t\tthis._overwriteProps = overwriteProps || [];\n\t\t\t\t\t}, (config.global === true)),\n\t\t\t\tp = Plugin.prototype = new TweenPlugin(propName),\n\t\t\t\tprop;\n\t\t\tp.constructor = Plugin;\n\t\t\tPlugin.API = config.API;\n\t\t\tfor (prop in map) {\n\t\t\t\tif (typeof(config[prop]) === \"function\") {\n\t\t\t\t\tp[map[prop]] = config[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlugin.version = config.version;\n\t\t\tTweenPlugin.activate([Plugin]);\n\t\t\treturn Plugin;\n\t\t};\n\n\n\t\t//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\n\t\ta = window._gsQueue;\n\t\tif (a) {\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\ta[i]();\n\t\t\t}\n\t\t\tfor (p in _defLookup) {\n\t\t\t\tif (!_defLookup[p].func) {\n\t\t\t\t\twindow.console.log(\"GSAP encountered missing dependency: \" + p);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n\n\t\treturn TweenLite;\n\n})(_gsScope, \"TweenLite\");\n\nexport var globals = _gsScope.GreenSockGlobals;\nvar nonGlobals = globals.com.greensock;\nexport { TweenLite as default };\nexport var SimpleTimeline = nonGlobals.core.SimpleTimeline;\nexport var Animation = nonGlobals.core.Animation;\nexport var Ease = globals.Ease;\nexport var Linear = globals.Linear;\nexport var Power0 = Linear;\nexport var Power1 = globals.Power1;\nexport var Power2 = globals.Power2;\nexport var Power3 = globals.Power3;\nexport var Power4 = globals.Power4;\nexport var TweenPlugin = globals.TweenPlugin;\nexport var EventDispatcher = nonGlobals.events.EventDispatcher;\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../type/Type\", \"../core/Param\",\n\t\"../shim/ConstantSourceNode\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t *          has all of the methods available to native Web Audio\n\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t *          as well as additional conveniences. Read more about working with signals\n\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Param}\n\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t *                                     is passed in, that parameter will be wrapped\n\t *                                     and controlled by the Signal.\n\t *  @param {string} [units=Number] unit The units the signal is in.\n\t *  @example\n\t * var signal = new Tone.Signal(10);\n\t */\n\tTone.Signal = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"value\", \"units\"], Tone.Signal);\n\t\tTone.Param.call(this, options);\n\n\t\t/**\n\t\t * The constant source node which generates the signal\n\t\t * @type {ConstantSourceNode}\n\t\t * @private\n\t\t */\n\t\tthis._constantSource = this.context.createConstantSource();\n\t\tthis._constantSource.start(0);\n\t\tthis._param = this._constantSource.offset;\n\t\tthis.value = options.value;\n\n\t\t/**\n\t\t * The node where the constant signal value is scaled.\n\t\t * @type {GainNode}\n\t\t * @private\n\t\t */\n\t\tthis.output = this._constantSource;\n\n\t\t/**\n\t\t * The node where the value is set.\n\t\t * @type {Tone.Param}\n\t\t * @private\n\t\t */\n\t\tthis.input = this._param = this.output.offset;\n\t};\n\n\tTone.extend(Tone.Signal, Tone.Param);\n\n\t/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @static\n\t *  @const\n\t */\n\tTone.Signal.defaults = {\n\t\t\"value\" : 0,\n\t\t\"units\" : Tone.Type.Default,\n\t\t\"convert\" : true,\n\t};\n\n\t//use SignalBase's connect/disconnect methods\n\tTone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\tTone.Signal.prototype.disconnect = Tone.SignalBase.prototype.disconnect;\n\n\t/**\n\t * Return the current signal value at the given time.\n\t * @param  {Time} time When to get the signal value\n\t * @return {Number}\n\t */\n\tTone.Signal.prototype.getValueAtTime = function(time){\n\t\tif (this._param.getValueAtTime){\n\t\t\treturn this._param.getValueAtTime(time);\n\t\t} else {\n\t\t\treturn Tone.Param.prototype.getValueAtTime.call(this, time);\n\t\t}\n\t};\n\n\t/**\n\t *  dispose and disconnect\n\t *  @returns {Tone.Signal} this\n\t */\n\tTone.Signal.prototype.dispose = function(){\n\t\tTone.Param.prototype.dispose.call(this);\n\t\tthis._constantSource.disconnect();\n\t\tthis._constantSource = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Signal;\n});\n","define([\"../core/Tone\", \"../core/Context\"], function(Tone){\n\n\t/**\n\t *  @class Tone.AudioNode is the base class for classes which process audio.\n\t *         AudioNodes have inputs and outputs.\n\t *  @param\t{AudioContext=} context\tThe audio context to use with the class\n\t *  @extends {Tone}\n\t */\n\tTone.AudioNode = function(){\n\t\tTone.call(this);\n\n\t\t//use the default context if one is not passed in\n\t\tvar options = Tone.defaults(arguments, [\"context\"], {\n\t\t\t\"context\" : Tone.context\n\t\t});\n\n\t\t/**\n\t\t * The AudioContext of this instance\n\t\t * @private\n\t\t * @type {AudioContext}\n\t\t */\n\t\tthis._context = options.context;\n\t};\n\n\tTone.extend(Tone.AudioNode);\n\n\t/**\n\t * Get the audio context belonging to this instance.\n\t * @type {Tone.Context}\n\t * @memberOf Tone.AudioNode#\n\t * @name context\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"context\", {\n\t\tget : function(){\n\t\t\treturn this._context;\n\t\t}\n\t});\n\n\t/**\n\t *  Create input and outputs for this object.\n\t *  @param  {Number}  [input=0]   The number of inputs\n\t *  @param  {Number}  [outputs=0]  The number of outputs\n\t *  @return  {Tone.AudioNode}  this\n\t *  @private\n\t */\n\tTone.AudioNode.prototype.createInsOuts = function(inputs, outputs){\n\n\t\tif (inputs === 1){\n\t\t\tthis.input = this.context.createGain();\n\t\t} else if (inputs > 1){\n\t\t\tthis.input = new Array(inputs);\n\t\t}\n\n\t\tif (outputs === 1){\n\t\t\tthis.output = this.context.createGain();\n\t\t} else if (outputs > 1){\n\t\t\tthis.output = new Array(outputs);\n\t\t}\n\t};\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t *\n\t *  @memberof Tone.AudioNode#\n\t *  @type {Number}\n\t *  @name channelCount\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"channelCount\", {\n\t\tget : function(){\n\t\t\treturn this.output.channelCount;\n\t\t},\n\t\tset : function(c){\n\t\t\treturn this.output.channelCount = c;\n\t\t}\n\t});\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t *  @memberof Tone.AudioNode#\n\t *  @type {String}\n\t *  @name channelCountMode\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"channelCountMode\", {\n\t\tget : function(){\n\t\t\treturn this.output.channelCountMode;\n\t\t},\n\t\tset : function(m){\n\t\t\treturn this.output.channelCountMode = m;\n\t\t}\n\t});\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t *  @memberof Tone.AudioNode#\n\t *  @type {String}\n\t *  @name channelInterpretation\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"channelInterpretation\", {\n\t\tget : function(){\n\t\t\treturn this.output.channelInterpretation;\n\t\t},\n\t\tset : function(i){\n\t\t\treturn this.output.channelInterpretation = i;\n\t\t}\n\t});\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t *  @type {Number}\n\t *  @name numberOfInputs\n\t *  @memberof Tone.AudioNode#\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"numberOfInputs\", {\n\t\tget : function(){\n\t\t\tif (this.input){\n\t\t\t\tif (Tone.isArray(this.input)){\n\t\t\t\t\treturn this.input.length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The number of outputs coming out of the AudioNode.\n\t *  @type {Number}\n\t *  @name numberOfOutputs\n\t *  @memberof Tone.AudioNode#\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"numberOfOutputs\", {\n\t\tget : function(){\n\t\t\tif (this.output){\n\t\t\t\tif (Tone.isArray(this.output)){\n\t\t\t\t\treturn this.output.length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t *  @param  {Tone | AudioParam | AudioNode} unit\n\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.connect = function(unit, outputNum, inputNum){\n\t\tif (Tone.isArray(this.output)){\n\t\t\toutputNum = Tone.defaultArg(outputNum, 0);\n\t\t\tthis.output[outputNum].connect(unit, 0, inputNum);\n\t\t} else {\n\t\t\tthis.output.connect(unit, outputNum, inputNum);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  disconnect the output\n\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t *                                   if the output is an array, or the\n\t *                                   node to disconnect from.\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.disconnect = function(destination, outputNum, inputNum){\n\t\tif (Tone.isArray(this.output)){\n\t\t\tif (Tone.isNumber(destination)){\n\t\t\t\tthis.output[destination].disconnect();\n\t\t\t} else {\n\t\t\t\toutputNum = Tone.defaultArg(outputNum, 0);\n\t\t\t\tthis.output[outputNum].disconnect(destination, 0, inputNum);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.output.disconnect.apply(this.output, arguments);\n\t\t}\n\t};\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Master);\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.chain = function(){\n\t\tvar currentUnit = this;\n\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\tvar toUnit = arguments[i];\n\t\t\tcurrentUnit.connect(toUnit);\n\t\t\tcurrentUnit = toUnit;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.fan = function(){\n\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\tthis.connect(arguments[i]);\n\t\t}\n\t\treturn this;\n\t};\n\n\tif (Tone.global.AudioNode){\n\t\t//give native nodes chain and fan methods\n\t\tAudioNode.prototype.chain = Tone.AudioNode.prototype.chain;\n\t\tAudioNode.prototype.fan = Tone.AudioNode.prototype.fan;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t * @return {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.dispose = function(){\n\t\tif (Tone.isDefined(this.input)){\n\t\t\tif (this.input instanceof AudioNode){\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t\tthis.input = null;\n\t\t}\n\t\tif (Tone.isDefined(this.output)){\n\t\t\tif (this.output instanceof AudioNode){\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t\tthis.output = null;\n\t\t}\n\t\tthis._context = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AudioNode;\n});\n","define([\"../core/Tone\", \"../core/Param\", \"../type/Type\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t *         The GainNode is a basic building block of the Web Audio\n\t *         API and is useful for routing audio and adjusting gains.\n\t *  @extends {Tone.AudioNode}\n\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t *  @param {Tone.Type=} units The units of the gain parameter.\n\t */\n\tTone.Gain = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"gain\", \"units\"], Tone.Gain);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The GainNode\n\t\t *  @type  {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.input = this.output = this._gainNode = this.context.createGain();\n\n\t\t/**\n\t\t *  The gain parameter of the gain node.\n\t\t *  @type {Gain}\n\t\t *  @signal\n\t\t */\n\t\tthis.gain = new Tone.Param({\n\t\t\t\"param\" : this._gainNode.gain,\n\t\t\t\"units\" : options.units,\n\t\t\t\"value\" : options.gain,\n\t\t\t\"convert\" : options.convert\n\t\t});\n\t\tthis._readOnly(\"gain\");\n\t};\n\n\tTone.extend(Tone.Gain, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Gain.defaults = {\n\t\t\"gain\" : 1,\n\t\t\"convert\" : true,\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Gain}  this\n\t */\n\tTone.Gain.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._gainNode.disconnect();\n\t\tthis._gainNode = null;\n\t\tthis._writable(\"gain\");\n\t\tthis.gain.dispose();\n\t\tthis.gain = null;\n\t};\n\n\treturn Tone.Gain;\n});\n","define([\"../core/Tone\", \"../type/Time\", \"../type/Frequency\", \"../type/TransportTime\", \"../core/Context\"], function(Tone){\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTYPES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Units which a value can take on.\n\t * @enum {String}\n\t */\n\tTone.Type = {\n\t\t/**\n\t\t *  Default units\n\t\t *  @typedef {Default}\n\t\t */\n\t\tDefault : \"number\",\n\t\t/**\n\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t *\n\t\t *  * Numbers, which will be taken literally as the time (in seconds).\n\t\t *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n\t\t *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n\t\t *  \"the current time plus whatever expression follows\".\n\t\t *  * Object, ({\"4n\" : 3, \"8t\" : -1}). The resulting time is equal to the sum of all of the keys multiplied by the values in the object. \n\t\t *  * No Argument, for methods which accept time, no argument will be interpreted as\n\t\t *  \"now\" (i.e. the currentTime).\n\t\t *\n\t\t *  @typedef {Time}\n\t\t */\n\t\tTime : \"time\",\n\t\t/**\n\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t *  values are converted to frequency instead of seconds. A number\n\t\t *  is taken literally as the value in hertz. Additionally any of the\n\t\t *  Time encodings can be used. Note names in the form\n\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t *  frequency value.\n\t\t *  @typedef {Frequency}\n\t\t */\n\t\tFrequency : \"frequency\",\n\t\t/**\n\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t *  @typedef {TransportTime}\n\t\t */\n\t\tTransportTime : \"transportTime\",\n\t\t/**\n\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t *  the smallest unit of time that the Transport supports.\n\t\t *  @typedef {Ticks}\n\t\t */\n\t\tTicks : \"ticks\",\n\t\t/**\n\t\t *  Normal values are within the range [0, 1].\n\t\t *  @typedef {NormalRange}\n\t\t */\n\t\tNormalRange : \"normalRange\",\n\t\t/**\n\t\t *  AudioRange values are between [-1, 1].\n\t\t *  @typedef {AudioRange}\n\t\t */\n\t\tAudioRange : \"audioRange\",\n\t\t/**\n\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels\n\t\t *  means no change in volume. -10db is approximately half as loud and 10db\n\t\t *  is twice is loud.\n\t\t *  @typedef {Decibels}\n\t\t */\n\t\tDecibels : \"db\",\n\t\t/**\n\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t *  @typedef {Interval}\n\t\t */\n\t\tInterval : \"interval\",\n\t\t/**\n\t\t *  Beats per minute.\n\t\t *  @typedef {BPM}\n\t\t */\n\t\tBPM : \"bpm\",\n\t\t/**\n\t\t *  The value must be greater than or equal to 0.\n\t\t *  @typedef {Positive}\n\t\t */\n\t\tPositive : \"positive\",\n\t\t/**\n\t\t *  Gain is the ratio between input and output of a signal.\n\t\t *  A gain of 0 is the same as silencing the signal. A gain of\n\t\t *  1, causes no change to the incoming signal.\n\t\t *  @typedef {Gain}\n\t\t */\n\t\tGain : \"gain\",\n\t\t/**\n\t\t *  A cent is a hundredth of a semitone.\n\t\t *  @typedef {Cents}\n\t\t */\n\t\tCents : \"cents\",\n\t\t/**\n\t\t *  Angle between 0 and 360.\n\t\t *  @typedef {Degrees}\n\t\t */\n\t\tDegrees : \"degrees\",\n\t\t/**\n\t\t *  A number representing a midi note.\n\t\t *  @typedef {MIDI}\n\t\t */\n\t\tMIDI : \"midi\",\n\t\t/**\n\t\t *  A colon-separated representation of time in the form of\n\t\t *  Bars:Beats:Sixteenths.\n\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t */\n\t\tBarsBeatsSixteenths : \"barsBeatsSixteenths\",\n\t\t/**\n\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t *  Audio is typically sampled 44100 times per second.\n\t\t *  @typedef {Samples}\n\t\t */\n\t\tSamples : \"samples\",\n\t\t/**\n\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t *  @typedef {Hertz}\n\t\t */\n\t\tHertz : \"hertz\",\n\t\t/**\n\t\t *  A frequency represented by a letter name,\n\t\t *  accidental and octave. This system is known as\n\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t *  @typedef {Note}\n\t\t */\n\t\tNote : \"note\",\n\t\t/**\n\t\t *  One millisecond is a thousandth of a second.\n\t\t *  @typedef {Milliseconds}\n\t\t */\n\t\tMilliseconds : \"milliseconds\",\n\t\t/**\n\t\t *  Seconds are the time unit of the AudioContext. In the end,\n\t\t *  all values need to be evaluated to seconds.\n\t\t *  @typedef {Seconds}\n\t\t */\n\t\tSeconds : \"seconds\",\n\t\t/**\n\t\t *  A string representing a duration relative to a measure.\n\t\t *  * \"4n\" = quarter note\n\t\t *  * \"2m\" = two measures\n\t\t *  * \"8t\" = eighth-note triplet\n\t\t *  @typedef {Notation}\n\t\t */\n\t\tNotation : \"notation\",\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUGMENT TONE's PROTOTYPE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Convert Time into seconds.\n\t *\n\t *  Unlike the method which it overrides, this takes into account\n\t *  transporttime and musical notation.\n\t *\n\t *  Time : 1.40\n\t *  Notation: 4n or 1m or 2t\n\t *  Now Relative: +3n\n\t *\n\t *  @param  {Time} time\n\t *  @return {Seconds}\n\t */\n\tTone.prototype.toSeconds = function(time){\n\t\tif (Tone.isNumber(time)){\n\t\t\treturn time;\n\t\t} else if (Tone.isUndef(time)){\n\t\t\treturn this.now();\n\t\t} else if (Tone.isString(time) || Tone.isObject(time)){\n\t\t\treturn (new Tone.Time(time)).toSeconds();\n\t\t} else if (time instanceof Tone.TimeBase){\n\t\t\treturn time.toSeconds();\n\t\t}\n\t};\n\n\t/**\n\t *  Convert a frequency representation into a number.\n\t *  @param  {Frequency} freq\n\t *  @return {Hertz}      the frequency in hertz\n\t */\n\tTone.prototype.toFrequency = function(freq){\n\t\tif (Tone.isNumber(freq)){\n\t\t\treturn freq;\n\t\t} else if (Tone.isString(freq) || Tone.isUndef(freq) || Tone.isObject(freq)){\n\t\t\treturn (new Tone.Frequency(freq)).valueOf();\n\t\t} else if (freq instanceof Tone.TimeBase){\n\t\t\treturn freq.toFrequency();\n\t\t}\n\t};\n\n\t/**\n\t *  Convert a time representation into ticks.\n\t *  @param  {Time} time\n\t *  @return {Ticks}  the time in ticks\n\t */\n\tTone.prototype.toTicks = function(time){\n\t\tif (Tone.isNumber(time) || Tone.isString(time) || Tone.isObject(time)){\n\t\t\treturn (new Tone.TransportTime(time)).toTicks();\n\t\t} else if (Tone.isUndef(time)){\n\t\t\treturn Tone.Transport.ticks;\n\t\t} else if (time instanceof Tone.TimeBase){\n\t\t\treturn time.toTicks();\n\t\t}\n\t};\n\n\treturn Tone;\n});\n","define([\"../core/Tone\", \"../core/Param\", \"../core/Gain\", \"../signal/SignalBase\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor,\n\t *          multiplies the incoming signal by that value.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Signal}\n\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t *                         it will return the product of the first and second inputs\n\t *  @example\n\t * var mult = new Tone.Multiply();\n\t * var sigA = new Tone.Signal(3);\n\t * var sigB = new Tone.Signal(4);\n\t * sigA.connect(mult, 0, 0);\n\t * sigB.connect(mult, 0, 1);\n\t * //output of mult is 12.\n\t *  @example\n\t * var mult = new Tone.Multiply(10);\n\t * var sig = new Tone.Signal(2).connect(mult);\n\t * //the output of mult is 20.\n\t */\n\tTone.Multiply = function(value){\n\n\t\tTone.Signal.call(this);\n\t\tthis.createInsOuts(2, 0);\n\n\t\t/**\n\t\t *  the input node is the same as the output node\n\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t *\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis._mult = this.input[0] = this.output = new Tone.Gain();\n\n\t\t/**\n\t\t *  the scaling parameter\n\t\t *  @type {AudioParam}\n\t\t *  @private\n\t\t */\n\t\tthis._param = this.input[1] = this.output.gain;\n\t\tthis.value = Tone.defaultArg(value, 0);\n\t\tthis.proxy = false;\n\t};\n\n\tTone.extend(Tone.Multiply, Tone.Signal);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Multiply} this\n\t */\n\tTone.Multiply.prototype.dispose = function(){\n\t\tTone.Signal.prototype.dispose.call(this);\n\t\tthis._mult.dispose();\n\t\tthis._mult = null;\n\t\tthis._param = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Multiply;\n});\n","define([\"../core/Tone\", \"../core/Transport\", \"../component/Volume\", \"../core/Master\", \"../type/Type\",\n\t\"../core/TimelineState\", \"../signal/Signal\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Base class for sources. Sources have start/stop methods\n\t *          and the ability to be synced to the\n\t *          start/stop of Tone.Transport.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @example\n\t * //Multiple state change events can be chained together,\n\t * //but must be set in the correct order and with ascending times\n\t *\n\t * // OK\n\t * state.start().stop(\"+0.2\");\n\t * // AND\n\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t *\n\t * // BAD\n\t * state.stop(\"+0.2\").start();\n\t * // OR\n\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t *\n\t */\n\tTone.Source = function(options){\n\n\t\toptions = Tone.defaultArg(options, Tone.Source.defaults);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The output volume node\n\t\t *  @type  {Tone.Volume}\n\t\t *  @private\n\t\t */\n\t\tthis._volume = this.output = new Tone.Volume(options.volume);\n\n\t\t/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */\n\t\tthis.volume = this._volume.volume;\n\t\tthis._readOnly(\"volume\");\n\n\t\t/**\n\t\t * \tKeep track of the scheduled state.\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\tthis._state.memory = 100;\n\n\t\t/**\n\t\t *  The synced `start` callback function from the transport\n\t\t *  @type {Function}\n\t\t *  @private\n\t\t */\n\t\tthis._synced = false;\n\n\t\t/**\n\t\t *  Keep track of all of the scheduled event ids\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._scheduled = [];\n\n\t\t//make the output explicitly stereo\n\t\tthis._volume.output.output.channelCount = 2;\n\t\tthis._volume.output.output.channelCountMode = \"explicit\";\n\t\t//mute initially\n\t\tthis.mute = options.mute;\n\t};\n\n\tTone.extend(Tone.Source, Tone.AudioNode);\n\n\t/**\n\t *  The default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Source.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Source.prototype, \"state\", {\n\t\tget : function(){\n\t\t\tif (this._synced){\n\t\t\t\tif (Tone.Transport.state === Tone.State.Started){\n\t\t\t\t\treturn this._state.getValueAtTime(Tone.Transport.seconds);\n\t\t\t\t} else {\n\t\t\t\t\treturn Tone.State.Stopped;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this._state.getValueAtTime(this.now());\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tObject.defineProperty(Tone.Source.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t//overwrite these functions\n\tTone.Source.prototype._start = Tone.noOp;\n\tTone.Source.prototype.restart = Tone.noOp;\n\tTone.Source.prototype._stop = Tone.noOp;\n\n\t/**\n\t *  Start the source at the specified time. If no time is given,\n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tTone.Source.prototype.start = function(time, offset, duration){\n\t\tif (Tone.isUndef(time) && this._synced){\n\t\t\ttime = Tone.Transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\t//if it's started, stop it and restart it\n\t\tif (this._state.getValueAtTime(time) === Tone.State.Started){\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._state.setStateAtTime(Tone.State.Started, time);\n\t\t\tthis.restart(time, offset, duration);\n\t\t} else {\n\t\t\tthis._state.setStateAtTime(Tone.State.Started, time);\n\t\t\tif (this._synced){\n\t\t\t\t// add the offset time to the event\n\t\t\t\tvar event = this._state.get(time);\n\t\t\t\tevent.offset = Tone.defaultArg(offset, 0);\n\t\t\t\tevent.duration = duration;\n\t\t\t\tvar sched = Tone.Transport.schedule(function(t){\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}.bind(this), time);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t//if it's already started\n\t\t\t\tif (Tone.Transport.state === Tone.State.Started){\n\t\t\t\t\tthis._syncedStart(this.now(), Tone.Transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given,\n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tTone.Source.prototype.stop = function(time){\n\t\tif (Tone.isUndef(time) && this._synced){\n\t\t\ttime = Tone.Transport.seconds;\n\t\t} else {\n\t\t\ttime = this.toSeconds(time);\n\t\t}\n\t\tif (!this._synced){\n\t\t\tthis._stop.apply(this, arguments);\n\t\t} else {\n\t\t\tvar sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t\t\tthis._scheduled.push(sched);\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time.\n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */\n\tTone.Source.prototype.sync = function(){\n\t\tthis._synced = true;\n\t\tthis._syncedStart = function(time, offset){\n\t\t\tif (offset > 0){\n\t\t\t\t// get the playback state at that time\n\t\t\t\tvar stateEvent = this._state.get(offset);\n\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\tif (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset){\n\t\t\t\t\t// get the offset\n\t\t\t\t\tvar startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\tvar duration;\n\t\t\t\t\tif (stateEvent.duration){\n\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t}\n\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this);\n\t\tthis._syncedStop = function(time){\n\t\t\tvar seconds = Tone.Transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\tif (this._state.getValueAtTime(seconds) === Tone.State.Started){\n\t\t\t\tthis._stop(time);\n\t\t\t}\n\t\t}.bind(this);\n\t\tTone.Transport.on(\"start loopStart\", this._syncedStart);\n\t\tTone.Transport.on(\"stop pause loopEnd\", this._syncedStop);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */\n\tTone.Source.prototype.unsync = function(){\n\t\tif (this._synced){\n\t\t\tTone.Transport.off(\"stop pause loopEnd\", this._syncedStop);\n\t\t\tTone.Transport.off(\"start loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tfor (var i = 0; i < this._scheduled.length; i++){\n\t\t\tvar id = this._scheduled[i];\n\t\t\tTone.Transport.clear(id);\n\t\t}\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\treturn this;\n\t};\n\n\t/**\n\t *\tClean up.\n\t *  @return {Tone.Source} this\n\t */\n\tTone.Source.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.unsync();\n\t\tthis._scheduled = null;\n\t\tthis._writable(\"volume\");\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis.volume = null;\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t};\n\n\treturn Tone.Source;\n});\n","define([\"../core/Tone\", \"../signal/SignalBase\", \"../shim/WaveShaperNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Wraps the native Web Audio API\n\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {function|Array|Number} mapping The function used to define the values.\n\t *                                    The mapping function should take two arguments:\n\t *                                    the first is the value at the current position\n\t *                                    and the second is the array position.\n\t *                                    If the argument is an array, that array will be\n\t *                                    set as the wave shaping function. The input\n\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t *                                    signal can take on any numerical values.\n\t *\n\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t *  @example\n\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t * \treturn val * 2;\n\t * }, 2048);\n\t *  @example\n\t * //a waveshaper can also be constructed with an array of values\n\t * var invert = new Tone.WaveShaper([1, -1]);\n\t */\n\tTone.WaveShaper = function(mapping, bufferLen){\n\n\t\tTone.SignalBase.call(this);\n\n\t\t/**\n\t\t *  the waveshaper\n\t\t *  @type {WaveShaperNode}\n\t\t *  @private\n\t\t */\n\t\tthis._shaper = this.input = this.output = this.context.createWaveShaper();\n\n\t\t/**\n\t\t *  the waveshapers curve\n\t\t *  @type {Float32Array}\n\t\t *  @private\n\t\t */\n\t\tthis._curve = null;\n\n\t\tif (Array.isArray(mapping)){\n\t\t\tthis.curve = mapping;\n\t\t} else if (isFinite(mapping) || Tone.isUndef(mapping)){\n\t\t\tthis._curve = new Float32Array(Tone.defaultArg(mapping, 1024));\n\t\t} else if (Tone.isFunction(mapping)){\n\t\t\tthis._curve = new Float32Array(Tone.defaultArg(bufferLen, 1024));\n\t\t\tthis.setMap(mapping);\n\t\t}\n\t};\n\n\tTone.extend(Tone.WaveShaper, Tone.SignalBase);\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param {function} mapping The function used to define the values.\n\t *                            The mapping function take two arguments:\n\t *                            the first is the value at the current position\n\t *                            which goes from -1 to 1 over the number of elements\n\t *                            in the curve array. The second argument is the array position.\n\t *  @returns {Tone.WaveShaper} this\n\t *  @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tTone.WaveShaper.prototype.setMap = function(mapping){\n\t\tvar array = new Array(this._curve.length);\n\t\tfor (var i = 0, len = this._curve.length; i < len; i++){\n\t\t\tvar normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t};\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t * @memberOf Tone.WaveShaper#\n\t * @type {Array}\n\t * @name curve\n\t */\n\tObject.defineProperty(Tone.WaveShaper.prototype, \"curve\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.curve;\n\t\t},\n\t\tset : function(mapping){\n\t\t\tthis._curve = new Float32Array(mapping);\n\t\t\tthis._shaper.curve = this._curve;\n\t\t}\n\t});\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t * @memberOf Tone.WaveShaper#\n\t * @type {string}\n\t * @name oversample\n\t */\n\tObject.defineProperty(Tone.WaveShaper.prototype, \"oversample\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.oversample;\n\t\t},\n\t\tset : function(oversampling){\n\t\t\tif ([\"none\", \"2x\", \"4x\"].includes(oversampling)){\n\t\t\t\tthis._shaper.oversample = oversampling;\n\t\t\t} else {\n\t\t\t\tthrow new RangeError(\"Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'\");\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.WaveShaper} this\n\t */\n\tTone.WaveShaper.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._shaper.disconnect();\n\t\tthis._shaper = null;\n\t\tthis._curve = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.WaveShaper;\n});\n","define([\"../core/Tone\", \"../component/CrossFade\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t * \t        effect which goes to the output using the wet control.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {NormalRange|Object} [wet] The starting wet value.\n\t */\n\tTone.Effect = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"wet\"], Tone.Effect);\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(1, 1);\n\n\t\t/**\n\t\t *  the drywet knob to control the amount of effect\n\t\t *  @type {Tone.CrossFade}\n\t\t *  @private\n\t\t */\n\t\tthis._dryWet = new Tone.CrossFade(options.wet);\n\n\t\t/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.wet = this._dryWet.fade;\n\n\t\t/**\n\t\t *  connect the effectSend to the input of hte effect\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis.effectSend = new Tone.Gain();\n\n\t\t/**\n\t\t *  connect the output of the effect to the effectReturn\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis.effectReturn = new Tone.Gain();\n\n\t\t//connections\n\t\tthis.input.connect(this._dryWet.a);\n\t\tthis.input.connect(this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis._dryWet.connect(this.output);\n\t\tthis._readOnly([\"wet\"]);\n\t};\n\n\tTone.extend(Tone.Effect, Tone.AudioNode);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.Effect.defaults = {\n\t\t\"wet\" : 1\n\t};\n\n\t/**\n\t *  chains the effect in between the effectSend and effectReturn\n\t *  @param  {Tone} effect\n\t *  @private\n\t *  @returns {Tone.Effect} this\n\t */\n\tTone.Effect.prototype.connectEffect = function(effect){\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Effect} this\n\t */\n\tTone.Effect.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._dryWet.dispose();\n\t\tthis._dryWet = null;\n\t\tthis.effectSend.dispose();\n\t\tthis.effectSend = null;\n\t\tthis.effectReturn.dispose();\n\t\tthis.effectReturn = null;\n\t\tthis._writable([\"wet\"]);\n\t\tthis.wet = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Effect;\n});\n","define([\"../core/Tone\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Merge brings two signals into the left and right\n\t *          channels of a single stereo channel.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @example\n\t * var merge = new Tone.Merge().toMaster();\n\t * //routing a sine tone in the left channel\n\t * //and noise in the right channel\n\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t * var noise = new Tone.Noise().connect(merge.right);\n\t * //starting our oscillators\n\t * noise.start();\n\t * osc.start();\n\t */\n\tTone.Merge = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(2, 0);\n\n\t\t/**\n\t\t *  The left input channel.\n\t\t *  Alias for <code>input[0]</code>\n\t\t *  @type {GainNode}\n\t\t */\n\t\tthis.left = this.input[0] = new Tone.Gain();\n\n\t\t/**\n\t\t *  The right input channel.\n\t\t *  Alias for <code>input[1]</code>.\n\t\t *  @type {GainNode}\n\t\t */\n\t\tthis.right = this.input[1] = new Tone.Gain();\n\n\t\t/**\n\t\t *  the merger node for the two channels\n\t\t *  @type {ChannelMergerNode}\n\t\t *  @private\n\t\t */\n\t\tthis._merger = this.output = this.context.createChannelMerger(2);\n\n\t\t//connections\n\t\tthis.left.connect(this._merger, 0, 0);\n\t\tthis.right.connect(this._merger, 0, 1);\n\n\t\tthis.left.channelCount = 1;\n\t\tthis.right.channelCount = 1;\n\t\tthis.left.channelCountMode = \"explicit\";\n\t\tthis.right.channelCountMode = \"explicit\";\n\t};\n\n\tTone.extend(Tone.Merge, Tone.AudioNode);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Merge} this\n\t */\n\tTone.Merge.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.left.dispose();\n\t\tthis.left = null;\n\t\tthis.right.dispose();\n\t\tthis.right = null;\n\t\tthis._merger.disconnect();\n\t\tthis._merger = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Merge;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n\t *          Tone.Filter has the added ability to set the filter rolloff at -12\n\t *          (default), -24 and -48.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t *  @param {string=} type The type of filter.\n\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t *                            3 choices: -12, -24, and -48\n\t *  @example\n\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t */\n\tTone.Filter = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"type\", \"rolloff\"], Tone.Filter);\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(1, 1);\n\n\t\t/**\n\t\t *  the filter(s)\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._filters = [];\n\n\t\t/**\n\t\t *  The cutoff frequency of the filter.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The detune parameter\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Signal(0, Tone.Type.Cents);\n\n\t\t/**\n\t\t *  The gain of the filter, only used in certain filter types\n\t\t *  @type {Number}\n\t\t *  @signal\n\t\t */\n\t\tthis.gain = new Tone.Signal({\n\t\t\t\"value\" : options.gain,\n\t\t\t\"convert\" : true,\n\t\t\t\"type\" : Tone.Type.Decibels\n\t\t});\n\n\t\t/**\n\t\t *  The Q or Quality of the filter\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t\tthis.Q = new Tone.Signal(options.Q);\n\n\t\t/**\n\t\t *  the type of the filter\n\t\t *  @type {string}\n\t\t *  @private\n\t\t */\n\t\tthis._type = options.type;\n\n\t\t/**\n\t\t *  the rolloff value of the filter\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._rolloff = options.rolloff;\n\n\t\t//set the rolloff;\n\t\tthis.rolloff = options.rolloff;\n\t\tthis._readOnly([\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t};\n\n\tTone.extend(Tone.Filter, Tone.AudioNode);\n\n\t/**\n\t *  the default parameters\n\t *\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.Filter.defaults = {\n\t\t\"type\" : \"lowpass\",\n\t\t\"frequency\" : 350,\n\t\t\"rolloff\" : -12,\n\t\t\"Q\" : 1,\n\t\t\"gain\" : 0,\n\t};\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t * @memberOf Tone.Filter#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.Filter.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\tset : function(type){\n\t\t\tvar types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\t\tif (types.indexOf(type)=== -1){\n\t\t\t\tthrow new TypeError(\"Tone.Filter: invalid type \"+type);\n\t\t\t}\n\t\t\tthis._type = type;\n\t\t\tfor (var i = 0; i < this._filters.length; i++){\n\t\t\t\tthis._filters[i].type = type;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t * @memberOf Tone.Filter#\n\t * @type {number}\n\t * @name rolloff\n\t */\n\tObject.defineProperty(Tone.Filter.prototype, \"rolloff\", {\n\t\tget : function(){\n\t\t\treturn this._rolloff;\n\t\t},\n\t\tset : function(rolloff){\n\t\t\trolloff = parseInt(rolloff, 10);\n\t\t\tvar possibilities = [-12, -24, -48, -96];\n\t\t\tvar cascadingCount = possibilities.indexOf(rolloff);\n\t\t\t//check the rolloff is valid\n\t\t\tif (cascadingCount === -1){\n\t\t\t\tthrow new RangeError(\"Tone.Filter: rolloff can only be -12, -24, -48 or -96\");\n\t\t\t}\n\t\t\tcascadingCount += 1;\n\t\t\tthis._rolloff = rolloff;\n\t\t\t//first disconnect the filters and throw them away\n\t\t\tthis.input.disconnect();\n\t\t\tfor (var i = 0; i < this._filters.length; i++){\n\t\t\t\tthis._filters[i].disconnect();\n\t\t\t\tthis._filters[i] = null;\n\t\t\t}\n\t\t\tthis._filters = new Array(cascadingCount);\n\t\t\tfor (var count = 0; count < cascadingCount; count++){\n\t\t\t\tvar filter = this.context.createBiquadFilter();\n\t\t\t\tfilter.type = this._type;\n\t\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\t\tthis.detune.connect(filter.detune);\n\t\t\t\tthis.Q.connect(filter.Q);\n\t\t\t\tthis.gain.connect(filter.gain);\n\t\t\t\tthis._filters[count] = filter;\n\t\t\t}\n\t\t\t//connect them up\n\t\t\tvar connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t\t\tTone.connectSeries.apply(Tone, connectionChain);\n\t\t}\n\t});\n\n\t/**\n\t * Get the frequency response curve. This curve represets how the filter\n\t * responses to frequencies between 20hz-20khz. \n\t * @param  {Number} [len=128] The number of values to return\n\t * @return {Float32Array}     The frequency response curve between 20-20k\n\t */\n\tTone.Filter.prototype.getFrequencyResponse = function(len){\n\t\tlen = Tone.defaultArg(len, 128);\n\t\t//start with all 1s\n\t\tvar totalResponse = new Float32Array(len).map(function(){\n\t\t\treturn 1;\n\t\t});\n\t\tvar freqValues = new Float32Array(len);\n\t\tfor (var i = 0; i < len; i++){\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tvar freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tvar magValues = new Float32Array(len);\n\t\tvar phaseValues = new Float32Array(len);\n\t\tthis._filters.forEach(function(){\n\t\t\tvar filterClone = this.context.createBiquadFilter();\n\t\t\tfilterClone.type = this._type;\n\t\t\tfilterClone.Q.value = this.Q.value;\n\t\t\tfilterClone.frequency.value = this.frequency.value;\n\t\t\tfilterClone.gain.value = this.gain.value;\n\t\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\t\tmagValues.forEach(function(val, i){\n\t\t\t\ttotalResponse[i] *= val;\n\t\t\t});\n\t\t}.bind(this));\n\t\treturn totalResponse;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.Filter} this\n\t */\n\tTone.Filter.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tfor (var i = 0; i < this._filters.length; i++){\n\t\t\tthis._filters[i].disconnect();\n\t\t\tthis._filters[i] = null;\n\t\t}\n\t\tthis._filters = null;\n\t\tthis._writable([\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.frequency = null;\n\t\tthis.Q = null;\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\tthis.gain.dispose();\n\t\tthis.gain = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Filter;\n});\n","define([\"../core/Tone\", \"../type/Type\", \"../core/AudioNode\", \"../core/Timeline\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t *         additional unit conversion functionality. It also\n\t *         serves as a base-class for classes which have a single,\n\t *         automatable parameter.\n\t *  @extends {Tone.AudioNode}\n\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t *  @param  {Tone.Type} units The units of the audio param.\n\t *  @param  {Boolean} convert If the param should be converted.\n\t */\n\tTone.Param = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"param\", \"units\", \"convert\"], Tone.Param);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The native parameter to control\n\t\t *  @type  {AudioParam}\n\t\t *  @private\n\t\t */\n\t\tthis._param = this.input = options.param;\n\n\t\t/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */\n\t\tthis.units = options.units;\n\n\t\t/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */\n\t\tthis.convert = options.convert;\n\n\t\t/**\n\t\t *  True if the signal value is being overridden by\n\t\t *  a connected signal.\n\t\t *  @readOnly\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t\tthis.overridden = false;\n\n\t\t/**\n\t\t * The timeline which tracks all of the automations.\n\t\t * @type {Tone.Timeline}\n\t\t * @private\n\t\t */\n\t\tthis._events = new Tone.Timeline(1000);\n\n\t\tif (Tone.isDefined(options.value) && this._param){\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Param, Tone.AudioNode);\n\n\t/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Param.defaults = {\n\t\t\"units\" : Tone.Type.Default,\n\t\t\"convert\" : true,\n\t\t\"param\" : undefined\n\t};\n\n\t/**\n\t * The current value of the parameter.\n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Param.prototype, \"value\", {\n\t\tget : function(){\n\t\t\tvar now = this.now();\n\t\t\treturn this._toUnits(this.getValueAtTime(now));\n\t\t},\n\t\tset : function(value){\n\t\t\tthis._initialValue = this._fromUnits(value);\n\t\t\tthis.cancelScheduledValues(this.now());\n\t\t\tthis.setValueAtTime(value, this.now());\n\t\t}\n\t});\n\n\t/**\n\t * The minimum output value of the parameter\n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Param.prototype, \"minValue\", {\n\t\tget : function(){\n\t\t\tif (this.units === Tone.Type.Time || this.units === Tone.Type.Frequency ||\n\t\t\t\tthis.units === Tone.Type.NormalRange || this.units === Tone.Type.Positive ||\n\t\t\t\tthis.units === Tone.Type.BPM){\n\t\t\t\treturn 0;\n\t\t\t} else if (this.units === Tone.Type.AudioRange){\n\t\t\t\treturn -1;\n\t\t\t} else if (this.units === Tone.Type.Decibels){\n\t\t\t\treturn -Infinity;\n\t\t\t} else {\n\t\t\t\treturn this._param.minValue;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The maximum output value of the parameter\n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Param.prototype, \"maxValue\", {\n\t\tget : function(){\n\t\t\tif (this.units === Tone.Type.NormalRange ||\n\t\t\t\tthis.units === Tone.Type.AudioRange){\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this._param.maxValue;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Convert the given value from the type specified by Tone.Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t *  @private\n\t *  @param  {*} val the value to convert\n\t *  @return {number}     the number which the value should be set to\n\t */\n\tTone.Param.prototype._fromUnits = function(val){\n\t\tif ((this.convert || Tone.isUndef(this.convert)) && !this.overridden){\n\t\t\tswitch (this.units){\n\t\t\t\tcase Tone.Type.Time:\n\t\t\t\t\treturn this.toSeconds(val);\n\t\t\t\tcase Tone.Type.Frequency:\n\t\t\t\t\treturn this.toFrequency(val);\n\t\t\t\tcase Tone.Type.Decibels:\n\t\t\t\t\treturn Tone.dbToGain(val);\n\t\t\t\tcase Tone.Type.NormalRange:\n\t\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t\tcase Tone.Type.AudioRange:\n\t\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t\tcase Tone.Type.Positive:\n\t\t\t\t\treturn Math.max(val, 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t};\n\n\t/**\n\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t * @private\n\t * @param  {number} val the value to convert\n\t * @return {number}\n\t */\n\tTone.Param.prototype._toUnits = function(val){\n\t\tif (this.convert || Tone.isUndef(this.convert)){\n\t\t\tswitch (this.units){\n\t\t\t\tcase Tone.Type.Decibels:\n\t\t\t\t\treturn Tone.gainToDb(val);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t};\n\n\t/**\n\t *  the minimum output value\n\t *  @type {Number}\n\t *  @private\n\t */\n\tTone.Param.prototype._minOutput = 1e-5;\n\n\t/**\n\t *  The event types\n\t *  @enum {String}\n\t *  @private\n\t */\n\tTone.Param.AutomationType = {\n\t\tLinear : \"linearRampToValueAtTime\",\n\t\tExponential : \"exponentialRampToValueAtTime\",\n\t\tTarget : \"setTargetAtTime\",\n\t\tSetValue : \"setValueAtTime\",\n\t\tCancel : \"cancelScheduledValues\"\n\t};\n\n\t/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now.\n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */\n\tTone.Param.prototype.setValueAtTime = function(value, time){\n\t\ttime = this.toSeconds(time);\n\t\tvalue = this._fromUnits(value);\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.SetValue,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : time,\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.SetValue, value, time);\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the signals value at the given time. Subsequent scheduling\n\t *  may invalidate the returned value.\n\t *  @param {Time} time When to get the value\n\t *  @returns {Number} The value at the given time\n\t */\n\tTone.Param.prototype.getValueAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar after = this._events.getAfter(time);\n\t\tvar before = this._events.get(time);\n\t\tvar initialValue = Tone.defaultArg(this._initialValue, this._param.defaultValue);\n\t\tvar value = initialValue;\n\t\t//if it was set by\n\t\tif (before === null){\n\t\t\tvalue = initialValue;\n\t\t} else if (before.type === Tone.Param.AutomationType.Target){\n\t\t\tvar previous = this._events.getBefore(before.time);\n\t\t\tvar previousVal;\n\t\t\tif (previous === null){\n\t\t\t\tpreviousVal = initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);\n\t\t} else if (after === null){\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === Tone.Param.AutomationType.Linear){\n\t\t\tvalue = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t} else if (after.type === Tone.Param.AutomationType.Exponential){\n\t\t\tvalue = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn value;\n\t};\n\n\t/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to\n\t *  schedule changes from the current value.\n\t *\n\t *  @param {number=} now (Optionally) pass the now value in.\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setRampPoint = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (currentVal === 0){\n\t\t\tcurrentVal = this._minOutput;\n\t\t}\n\t\tthis.setValueAtTime(this._toUnits(currentVal), time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules a linear continuous change in parameter value from the\n\t *  previous scheduled parameter value to the given value.\n\t *\n\t *  @param  {number} value\n\t *  @param  {Time} endTime\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.linearRampToValueAtTime = function(value, endTime){\n\t\tvalue = this._fromUnits(value);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.Linear,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : endTime,\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.Linear, value, endTime);\n\t\tthis._param.linearRampToValueAtTime(value, endTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from\n\t *  the previous scheduled parameter value to the given value.\n\t *\n\t *  @param  {number} value\n\t *  @param  {Time} endTime\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.exponentialRampToValueAtTime = function(value, endTime){\n\t\tvalue = this._fromUnits(value);\n\t\tvalue = Math.max(this._minOutput, value);\n\t\tendTime = this.toSeconds(endTime);\n\t\t//store the event\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.Exponential,\n\t\t\t\"time\" : endTime,\n\t\t\t\"value\" : value\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.Exponential, value, endTime);\n\t\tthis._param.exponentialRampToValueAtTime(value, endTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from\n\t *  the current time and current value to the given value over the\n\t *  duration of the rampTime.\n\t *\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds.\n\t * signal.exponentialRampTo(2, 4);\n\t */\n\tTone.Param.prototype.exponentialRampTo = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an linear continuous change in parameter value from\n\t *  the current time and current value to the given value over the\n\t *  duration of the rampTime.\n\t *\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds.\n\t * signal.linearRampTo(4, 3);\n\t */\n\tTone.Param.prototype.linearRampTo = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time. Since it\n\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t *  rampTime is the time that it takes to reach over 99% of the way towards the value.\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds.\n\t * signal.exponentialRampTo(2, 4);\n\t */\n\tTone.Param.prototype.targetRampTo = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time. Since it\n\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t *  rampTime is the time that it takes to reach over 99% of the way towards the value. This methods\n\t *  is similar to setTargetAtTime except the third argument is a time instead of a 'timeConstant'\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param {Time}\ttime \tWhen the ramp should start.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds.\n\t * signal.exponentialRampTo(2, 4);\n\t */\n\tTone.Param.prototype.exponentialApproachValueAtTime = function(value, time, rampTime){\n\t\tvar timeConstant = Math.log(this.toSeconds(rampTime)+1)/Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value\n\t *  @param {Time} startTime\n\t *  @param {number} timeConstant\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setTargetAtTime = function(value, startTime, timeConstant){\n\t\tvalue = this._fromUnits(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tif (timeConstant <= 0){\n\t\t\tthrow new Error(\"timeConstant must be greater than 0\");\n\t\t}\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.Target,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : startTime,\n\t\t\t\"constant\" : timeConstant\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.Target, value, startTime, timeConstant);\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *\n\t *  @param {Array} values\n\t *  @param {Time} startTime\n\t *  @param {Time} duration\n\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setValueCurveAtTime = function(values, startTime, duration, scaling){\n\t\tscaling = Tone.defaultArg(scaling, 1);\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setValueAtTime(values[0] * scaling, startTime);\n\t\tvar segTime = duration / (values.length - 1);\n\t\tfor (var i = 1; i < values.length; i++){\n\t\t\tthis.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancels all scheduled parameter changes with times greater than or\n\t *  equal to startTime.\n\t *\n\t *  @param  {Time} time\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.cancelScheduledValues = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._events.cancel(time);\n\t\tthis._param.cancelScheduledValues(time);\n\t\tthis.log(Tone.Param.AutomationType.Cancel, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n\t *  it holds the automated value at time until the next automated event.\n\t *  @param  {Time} time\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.cancelAndHoldAtTime = function(time){\n\t\tvar valueAtTime = this.getValueAtTime(time);\n\t\tthis.log(\"cancelAndHoldAtTime\", time, \"value=\"+valueAtTime);\n\n\t\t//remove the schedule events\n\t\tthis._param.cancelScheduledValues(time);\n\n\t\t//if there is an event at the given time\n\t\t//and that even is not a \"set\"\n\t\tvar before = this._events.get(time);\n\t\tvar after = this._events.getAfter(time);\n\t\tif (before && before.time === time){\n\t\t\t//remove everything after\n\t\t\tif (after){\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(time + this.sampleTime);\n\t\t\t}\n\t\t} else if (after){\n\t\t\t//cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === Tone.Param.AutomationType.Linear){\n\t\t\t\tthis.linearRampToValueAtTime(valueAtTime, time);\n\t\t\t} else if (after.type === Tone.Param.AutomationType.Exponential){\n\t\t\t\tthis.exponentialRampToValueAtTime(valueAtTime, time);\n\t\t\t}\n\t\t}\n\n\t\t//set the value at the given time\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.SetValue,\n\t\t\t\"value\" : valueAtTime,\n\t\t\t\"time\" : time\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Ramps to the given value over the duration of the rampTime.\n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *\n\t *  @param  {number} value\n\t *  @param  {Time} rampTime \tThe time that it takes the\n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially\n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */\n\tTone.Param.prototype.rampTo = function(value, rampTime, startTime){\n\t\trampTime = Tone.defaultArg(rampTime, 0.1);\n\t\tif (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels){\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUTOMATION CURVE CALCULATIONS\n\t//\tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tTone.Param.prototype._exponentialApproach = function(t0, v0, v1, timeConstant, t){\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t};\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tTone.Param.prototype._linearInterpolate = function(t0, v0, t1, v1, t){\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t};\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tTone.Param.prototype._exponentialInterpolate = function(t0, v0, t1, v1, t){\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._param = null;\n\t\tthis._events = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Param;\n});\n","define([\"../core/Tone\", \"../signal/Add\", \"../signal/Negate\", \"../signal/Signal\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t *\n\t *  @extends {Tone.Signal}\n\t *  @constructor\n\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t *                         is omitted, it will subtract the second signal from the first.\n\t *  @example\n\t * var sub = new Tone.Subtract(1);\n\t * var sig = new Tone.Signal(4).connect(sub);\n\t * //the output of sub is 3. \n\t *  @example\n\t * var sub = new Tone.Subtract();\n\t * var sigA = new Tone.Signal(10);\n\t * var sigB = new Tone.Signal(2.5);\n\t * sigA.connect(sub, 0, 0);\n\t * sigB.connect(sub, 0, 1);\n\t * //output of sub is 7.5\n\t */\n\tTone.Subtract = function(value){\n\n\t\tTone.Signal.call(this);\n\t\tthis.createInsOuts(2, 0);\n\n\t\t/**\n\t\t *  the summing node\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis._sum = this.input[0] = this.output = new Tone.Gain();\n\n\t\t/**\n\t\t *  negate the input of the second input before connecting it\n\t\t *  to the summing node.\n\t\t *  @type {Tone.Negate}\n\t\t *  @private\n\t\t */\n\t\tthis._neg = new Tone.Negate();\n\n\t\t/**\n\t\t *  the node where the value is set\n\t\t *  @private\n\t\t *  @type {Tone.Signal}\n\t\t */\n\t\tthis._param = this.input[1] = new Tone.Signal(value);\n\t\tthis._param.chain(this._neg, this._sum);\n\t\tthis.proxy = false;\n\t};\n\n\tTone.extend(Tone.Subtract, Tone.Signal);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.SignalBase} this\n\t */\n\tTone.Subtract.prototype.dispose = function(){\n\t\tTone.Signal.prototype.dispose.call(this);\n\t\tthis._neg.dispose();\n\t\tthis._neg = null;\n\t\tthis._sum.disconnect();\n\t\tthis._sum = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Subtract;\n});\n","define([\"../core/Tone\", \"../source/Oscillator\", \"../signal/Scale\", \"../core/AudioNode\",\n\t\"../signal/Signal\", \"../signal/AudioToGain\", \"../type/Type\", \"../signal/Zero\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal\n\t *          which can be attached to an AudioParam or Tone.Signal\n\t *          in order to modulate that parameter with an oscillator. The LFO can\n\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t *                               in the frequency range of 0.1 to 10 hertz.\n\t *  @param {number=} min The minimum output value of the LFO.\n\t *  @param {number=} max The maximum value of the LFO.\n\t *  @example\n\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t * lfo.connect(filter.frequency);\n\t */\n\tTone.LFO = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"min\", \"max\"], Tone.LFO);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The oscillator.\n\t\t *  @type {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._oscillator = new Tone.Oscillator({\n\t\t\t\"frequency\" : options.frequency,\n\t\t\t\"type\" : options.type,\n\t\t});\n\n\t\t/**\n\t\t *  the lfo's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this._oscillator.frequency;\n\n\t\t/**\n\t\t * The amplitude of the LFO, which controls the output range between\n\t\t * the min and max output. For example if the min is -10 and the max\n\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t * between -5 and 5.\n\t\t * @type {Number}\n\t\t * @signal\n\t\t */\n\t\tthis.amplitude = this._oscillator.volume;\n\t\tthis.amplitude.units = Tone.Type.NormalRange;\n\t\tthis.amplitude.value = options.amplitude;\n\n\t\t/**\n\t\t *  The signal which is output when the LFO is stopped\n\t\t *  @type  {Tone.Signal}\n\t\t *  @private\n\t\t */\n\t\tthis._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\n\t\t/**\n\t\t *  Just outputs zeros.\n\t\t *  @type {Tone.Zero}\n\t\t *  @private\n\t\t */\n\t\tthis._zeros = new Tone.Zero();\n\n\t\t/**\n\t\t *  The value that the LFO outputs when it's stopped\n\t\t *  @type {AudioRange}\n\t\t *  @private\n\t\t */\n\t\tthis._stoppedValue = 0;\n\n\t\t/**\n\t\t *  @type {Tone.AudioToGain}\n\t\t *  @private\n\t\t */\n\t\tthis._a2g = new Tone.AudioToGain();\n\n\t\t/**\n\t\t *  @type {Tone.Scale}\n\t\t *  @private\n\t\t */\n\t\tthis._scaler = this.output = new Tone.Scale(options.min, options.max);\n\n\t\t/**\n\t\t *  the units of the LFO (used for converting)\n\t\t *  @type {Tone.Type}\n\t\t *  @private\n\t\t */\n\t\tthis._units = Tone.Type.Default;\n\t\tthis.units = options.units;\n\n\t\t//connect it up\n\t\tthis._oscillator.chain(this._a2g, this._scaler);\n\t\tthis._zeros.connect(this._a2g);\n\t\tthis._stoppedSignal.connect(this._a2g);\n\t\tthis._readOnly([\"amplitude\", \"frequency\"]);\n\t\tthis.phase = options.phase;\n\t};\n\n\tTone.extend(Tone.LFO, Tone.AudioNode);\n\n\t/**\n\t *  the default parameters\n\t *\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.LFO.defaults = {\n\t\t\"type\" : \"sine\",\n\t\t\"min\" : 0,\n\t\t\"max\" : 1,\n\t\t\"phase\" : 0,\n\t\t\"frequency\" : \"4n\",\n\t\t\"amplitude\" : 1,\n\t\t\"units\" : Tone.Type.Default\n\t};\n\n\t/**\n\t *  Start the LFO.\n\t *  @param  {Time} [time=now] the time the LFO will start\n\t *  @returns {Tone.LFO} this\n\t */\n\tTone.LFO.prototype.start = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(0, time);\n\t\tthis._oscillator.start(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the LFO.\n\t *  @param  {Time} [time=now] the time the LFO will stop\n\t *  @returns {Tone.LFO} this\n\t */\n\tTone.LFO.prototype.stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t\tthis._oscillator.stop(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sync the start/stop/pause to the transport\n\t *  and the frequency to the bpm of the transport\n\t *  @returns {Tone.LFO} this\n\t *  @example\n\t *  lfo.frequency.value = \"8n\";\n\t *  lfo.sync().start(0)\n\t *  //the rate of the LFO will always be an eighth note,\n\t *  //even as the tempo changes\n\t */\n\tTone.LFO.prototype.sync = function(){\n\t\tthis._oscillator.sync();\n\t\tthis._oscillator.syncFrequency();\n\t\treturn this;\n\t};\n\n\t/**\n\t *  unsync the LFO from transport control\n\t *  @returns {Tone.LFO} this\n\t */\n\tTone.LFO.prototype.unsync = function(){\n\t\tthis._oscillator.unsync();\n\t\tthis._oscillator.unsyncFrequency();\n\t\treturn this;\n\t};\n\n\t/**\n\t * The miniumum output of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {number}\n\t * @name min\n\t */\n\tObject.defineProperty(Tone.LFO.prototype, \"min\", {\n\t\tget : function(){\n\t\t\treturn this._toUnits(this._scaler.min);\n\t\t},\n\t\tset : function(min){\n\t\t\tmin = this._fromUnits(min);\n\t\t\tthis._scaler.min = min;\n\t\t}\n\t});\n\n\t/**\n\t * The maximum output of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {number}\n\t * @name max\n\t */\n\tObject.defineProperty(Tone.LFO.prototype, \"max\", {\n\t\tget : function(){\n\t\t\treturn this._toUnits(this._scaler.max);\n\t\t},\n\t\tset : function(max){\n\t\t\tmax = this._fromUnits(max);\n\t\t\tthis._scaler.max = max;\n\t\t}\n\t});\n\n\t/**\n\t * The type of the oscillator: sine, square, sawtooth, triangle.\n\t * @memberOf Tone.LFO#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.LFO.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._oscillator.type = type;\n\t\t\tthis._stoppedValue = this._oscillator._getInitialValue();\n\t\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t\t}\n\t});\n\n\t/**\n\t * The phase of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {number}\n\t * @name phase\n\t */\n\tObject.defineProperty(Tone.LFO.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.phase;\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._oscillator.phase = phase;\n\t\t\tthis._stoppedValue = this._oscillator._getInitialValue();\n\t\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t\t}\n\t});\n\n\t/**\n\t * The output units of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {Tone.Type}\n\t * @name units\n\t */\n\tObject.defineProperty(Tone.LFO.prototype, \"units\", {\n\t\tget : function(){\n\t\t\treturn this._units;\n\t\t},\n\t\tset : function(val){\n\t\t\tvar currentMin = this.min;\n\t\t\tvar currentMax = this.max;\n\t\t\t//convert the min and the max\n\t\t\tthis._units = val;\n\t\t\tthis.min = currentMin;\n\t\t\tthis.max = currentMax;\n\t\t}\n\t});\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.LFO#\n\t * @type {Boolean}\n\t * @name mute\n\t */\n\tObject.defineProperty(Tone.LFO.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._oscillator.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.LFO#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.LFO.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.state;\n\t\t}\n\t});\n\n\t/**\n\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node.\n\t *  Tone.LFO will automatically convert to the destination units of the\n\t *  will get the units from the connected node.\n\t *  @param  {Tone | AudioParam | AudioNode} node\n\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t *  @returns {Tone.LFO} this\n\t *  @private\n\t */\n\tTone.LFO.prototype.connect = function(node){\n\t\tif (node.constructor === Tone.Signal || node.constructor === Tone.Param){\n\t\t\tthis.convert = node.convert;\n\t\t\tthis.units = node.units;\n\t\t}\n\t\tTone.SignalBase.prototype.connect.apply(this, arguments);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  private method borrowed from Param converts\n\t *  units from their destination value\n\t *  @function\n\t *  @private\n\t */\n\tTone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\n\t/**\n\t *  private method borrowed from Param converts\n\t *  units to their destination value\n\t *  @function\n\t *  @private\n\t */\n\tTone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\n\t/**\n\t *  disconnect and dispose\n\t *  @returns {Tone.LFO} this\n\t */\n\tTone.LFO.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"amplitude\", \"frequency\"]);\n\t\tthis._oscillator.dispose();\n\t\tthis._oscillator = null;\n\t\tthis._stoppedSignal.dispose();\n\t\tthis._stoppedSignal = null;\n\t\tthis._zeros.dispose();\n\t\tthis._zeros = null;\n\t\tthis._scaler.dispose();\n\t\tthis._scaler = null;\n\t\tthis._a2g.dispose();\n\t\tthis._a2g = null;\n\t\tthis.frequency = null;\n\t\tthis.amplitude = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.LFO;\n});\n","define([\"../core/Tone\", \"../core/Emitter\", \"../type/Type\", \"../shim/AudioBuffer\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all\n\t *          classes that make requests for audio files such as Tone.Player,\n\t *          Tone.Sampler and Tone.Convolver.\n\t *\n\t *          Aside from load callbacks from individual buffers, Tone.Buffer\n\t *  \t\tprovides events which keep track of the loading progress\n\t *  \t\tof _all_ of the buffers. These are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set.\n\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded.\n\t *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead\n\t *                            since it will give you a callback when _all_ buffers are loaded.\n\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t *  @example\n\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t * \t//the buffer is now available.\n\t * \tvar buff = buffer.get();\n\t * });\n\t *  @example\n\t * //can load provide fallback extension types if the first type is not supported.\n\t * var buffer = new Tone.Buffer(\"path/to/sound.[mp3|ogg|wav]\");\n\t */\n\tTone.Buffer = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"url\", \"onload\", \"onerror\"], Tone.Buffer);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  stores the loaded AudioBuffer\n\t\t *  @type {AudioBuffer}\n\t\t *  @private\n\t\t */\n\t\tthis._buffer = null;\n\n\t\t/**\n\t\t *  indicates if the buffer should be reversed or not\n\t\t *  @type {Boolean}\n\t\t *  @private\n\t\t */\n\t\tthis._reversed = options.reverse;\n\n\t\t/**\n\t\t *  The XHR\n\t\t *  @type  {XMLHttpRequest}\n\t\t *  @private\n\t\t */\n\t\tthis._xhr = null;\n\n\t\t/**\n\t\t * Private callback when the buffer is loaded.\n\t\t * @type {Function}\n\t\t * @private\n\t\t */\n\t\tthis.onload = Tone.noOp;\n\n\t\tif (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer){\n\t\t\tthis.set(options.url);\n\t\t\tif (!this.loaded){\n\t\t\t\tthis.onload = options.onload;\n\t\t\t}\n\t\t} else if (Tone.isString(options.url)){\n\t\t\tthis.load(options.url).then(options.onload).catch(options.onerror);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Buffer);\n\n\t/**\n\t *  the default parameters\n\t *  @type {Object}\n\t */\n\tTone.Buffer.defaults = {\n\t\t\"url\" : undefined,\n\t\t\"reverse\" : false,\n\t\t\"onload\" : Tone.noOp,\n\t\t\"onerror\" : Tone.noOp\n\t};\n\n\t/**\n\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t *  of this buffer.\n\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t *  @returns {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype.set = function(buffer){\n\t\tif (buffer instanceof Tone.Buffer){\n\t\t\t//if it's loaded, set it\n\t\t\tif (buffer.loaded){\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t//otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = function(){\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t}.bind(this);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t */\n\tTone.Buffer.prototype.get = function(){\n\t\treturn this._buffer;\n\t};\n\n\t/**\n\t *  Makes an xhr reqest for the selected url then decodes\n\t *  the file as an audio buffer. Invokes\n\t *  the callback once the audio buffer loads.\n\t *  @param {String} url The url of the buffer to load.\n\t *                      filetype support depends on the\n\t *                      browser.\n\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t */\n\tTone.Buffer.prototype.load = function(url, onload, onerror){\n\n\t\tvar promise = new Promise(function(load, error){\n\n\t\t\tthis._xhr = Tone.Buffer.load(url,\n\n\t\t\t\t//success\n\t\t\t\tfunction(buff){\n\t\t\t\t\tthis._xhr = null;\n\t\t\t\t\tthis.set(buff);\n\t\t\t\t\tload(this);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t\tif (onload){\n\t\t\t\t\t\tonload(this);\n\t\t\t\t\t}\n\t\t\t\t}.bind(this),\n\n\t\t\t\t//error\n\t\t\t\tfunction(err){\n\t\t\t\t\tthis._xhr = null;\n\t\t\t\t\terror(err);\n\t\t\t\t\tif (onerror){\n\t\t\t\t\t\tonerror(err);\n\t\t\t\t\t}\n\t\t\t\t}.bind(this));\n\n\t\t}.bind(this));\n\n\t\treturn promise;\n\t};\n\n\t/**\n\t *  dispose and disconnect\n\t *  @returns {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._buffer = null;\n\t\tif (this._xhr){\n\t\t\tTone.Buffer._removeFromDownloadQueue(this._xhr);\n\t\t\tthis._xhr.abort();\n\t\t\tthis._xhr = null;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * If the buffer is loaded or not\n\t * @memberOf Tone.Buffer#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Buffer.prototype, \"loaded\", {\n\t\t\"get\" : function(){\n\t\t\treturn this.length > 0;\n\t\t},\n\t});\n\n\t/**\n\t * The duration of the buffer.\n\t * @memberOf Tone.Buffer#\n\t * @type {Number}\n\t * @name duration\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Buffer.prototype, \"duration\", {\n\t\t\"get\" : function(){\n\t\t\tif (this._buffer){\n\t\t\t\treturn this._buffer.duration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The length of the buffer in samples\n\t * @memberOf Tone.Buffer#\n\t * @type {Number}\n\t * @name length\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Buffer.prototype, \"length\", {\n\t\t\"get\" : function(){\n\t\t\tif (this._buffer){\n\t\t\t\treturn this._buffer.length;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer\n\t * is loaded.\n\t * @memberOf Tone.Buffer#\n\t * @type {Number}\n\t * @name numberOfChannels\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Buffer.prototype, \"numberOfChannels\", {\n\t\t\"get\" : function(){\n\t\t\tif (this._buffer){\n\t\t\t\treturn this._buffer.numberOfChannels;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t *  Set the audio buffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param {Float32Array} array The array to fill the audio buffer\n\t *  @return {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype.fromArray = function(array){\n\t\tvar isMultidimensional = array[0].length > 0;\n\t\tvar channels = isMultidimensional ? array.length : 1;\n\t\tvar len = isMultidimensional ? array[0].length : array.length;\n\t\tvar buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t\tif (!isMultidimensional && channels === 1){\n\t\t\tarray = [array];\n\t\t}\n\t\tfor (var c = 0; c < channels; c++){\n\t\t\tbuffer.copyToChannel(array[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t};\n\n\t/**\n\t * \tSums muliple channels into 1 channel\n\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t *  @return {Array}\n\t */\n\tTone.Buffer.prototype.toMono = function(chanNum){\n\t\tif (Tone.isNumber(chanNum)){\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tvar outputArray = new Float32Array(this.length);\n\t\t\tvar numChannels = this.numberOfChannels;\n\t\t\tfor (var channel = 0; channel < numChannels; channel++){\n\t\t\t\tvar channelArray = this.toArray(channel);\n\t\t\t\tfor (var i = 0; i < channelArray.length; i++){\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//divide by the number of channels\n\t\t\toutputArray = outputArray.map(function(sample){\n\t\t\t\treturn sample / numChannels;\n\t\t\t});\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t *  @return {Array}\n\t */\n\tTone.Buffer.prototype.toArray = function(channel){\n\t\tif (Tone.isNumber(channel)){\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1){\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tvar ret = [];\n\t\t\tfor (var c = 0; c < this.numberOfChannels; c++){\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n\n\t/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  {Number}  channel  The channel number to return\n\t *  @return  {Float32Array}  The audio as a TypedArray\n\t */\n\tTone.Buffer.prototype.getChannelData = function(channel){\n\t\treturn this._buffer.getChannelData(channel);\n\t};\n\n\t/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param {Time} start The time to start the slice\n\t *  @param {Time=} end The end time to slice. If none is given\n\t *                     will default to the end of the buffer\n\t *  @return {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype.slice = function(start, end){\n\t\tend = Tone.defaultArg(end, this.duration);\n\t\tvar startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t\tvar endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t\tvar replacement = [];\n\t\tfor (var i = 0; i < this.numberOfChannels; i++){\n\t\t\treplacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t\t}\n\t\tvar retBuffer = new Tone.Buffer().fromArray(replacement);\n\t\treturn retBuffer;\n\t};\n\n\t/**\n\t *  Reverse the buffer.\n\t *  @private\n\t *  @return {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype._reverse = function(){\n\t\tif (this.loaded){\n\t\t\tfor (var i = 0; i < this.numberOfChannels; i++){\n\t\t\t\tArray.prototype.reverse.call(this.getChannelData(i));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Reverse the buffer.\n\t * @memberOf Tone.Buffer#\n\t * @type {Boolean}\n\t * @name reverse\n\t */\n\tObject.defineProperty(Tone.Buffer.prototype, \"reverse\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._reversed;\n\t\t},\n\t\t\"set\" : function(rev){\n\t\t\tif (this._reversed !== rev){\n\t\t\t\tthis._reversed = rev;\n\t\t\t\tthis._reverse();\n\t\t\t}\n\t\t},\n\t});\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t//statically inherits Emitter methods\n\tTone.Emitter.mixin(Tone.Buffer);\n\n\t/**\n\t *  the static queue for all of the xhr requests\n\t *  @type {Array}\n\t *  @private\n\t */\n\tTone.Buffer._downloadQueue = [];\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t *  @type  {String}\n\t *  @static\n\t */\n\tTone.Buffer.baseUrl = \"\";\n\n\t/**\n\t *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array.\n\t *  @param {Float32Array} array The array to fill the audio buffer\n\t *  @return {Tone.Buffer} A Tone.Buffer created from the array\n\t */\n\tTone.Buffer.fromArray = function(array){\n\t\treturn (new Tone.Buffer()).fromArray(array);\n\t};\n\n\t/**\n\t * Creates a Tone.Buffer from a URL, returns a promise\n\t * which resolves to a Tone.Buffer\n\t * @param  {String} url The url to load.\n\t * @return {Promise<Tone.Buffer>}     A promise which resolves to a Tone.Buffer\n\t */\n\tTone.Buffer.fromUrl = function(url){\n\t\tvar buffer = new Tone.Buffer();\n\t\treturn buffer.load(url).then(function(){\n\t\t\treturn buffer;\n\t\t});\n\t};\n\n\t/**\n\t * Remove an xhr request from the download queue\n\t * @private\n\t */\n\tTone.Buffer._removeFromDownloadQueue = function(request){\n\t\tvar index = Tone.Buffer._downloadQueue.indexOf(request);\n\t\tif (index !== -1){\n\t\t\tTone.Buffer._downloadQueue.splice(index, 1);\n\t\t}\n\t};\n\n\t/**\n\t *  Loads a url using XMLHttpRequest.\n\t *  @param {String} url\n\t *  @param {Function} onload\n\t *  @param {Function} onerror\n\t *  @param {Function} onprogress\n\t *  @return {XMLHttpRequest}\n\t */\n\tTone.Buffer.load = function(url, onload, onerror){\n\t\t//default\n\t\tonload = Tone.defaultArg(onload, Tone.noOp);\n\n\t\t// test if the url contains multiple extensions\n\t\tvar matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t\tif (matches){\n\t\t\tvar extensions = matches[1].split(\"|\");\n\t\t\tvar extension = extensions[0];\n\t\t\tfor (var i = 0; i < extensions.length; i++){\n\t\t\t\tif (Tone.Buffer.supportsType(extensions[i])){\n\t\t\t\t\textension = extensions[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\tfunction onError(e){\n\t\t\tTone.Buffer._removeFromDownloadQueue(request);\n\t\t\tTone.Buffer.emit(\"error\", e);\n\t\t\tif (onerror){\n\t\t\t\tonerror(e);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\tfunction onProgress(){\n\t\t\t//calculate the progress\n\t\t\tvar totalProgress = 0;\n\t\t\tfor (var i = 0; i < Tone.Buffer._downloadQueue.length; i++){\n\t\t\t\ttotalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t\t\t}\n\t\t\tTone.Buffer.emit(\"progress\", totalProgress / Tone.Buffer._downloadQueue.length);\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open(\"GET\", Tone.Buffer.baseUrl + url, true);\n\t\trequest.responseType = \"arraybuffer\";\n\t\t//start out as 0\n\t\trequest.progress = 0;\n\n\t\tTone.Buffer._downloadQueue.push(request);\n\n\t\trequest.addEventListener(\"load\", function(){\n\n\t\t\tif (request.status === 200){\n\t\t\t\tTone.context.decodeAudioData(request.response).then(function(buff){\n\n\t\t\t\t\trequest.progress = 1;\n\t\t\t\t\tonProgress();\n\t\t\t\t\tonload(buff);\n\n\t\t\t\t\tTone.Buffer._removeFromDownloadQueue(request);\n\t\t\t\t\tif (Tone.Buffer._downloadQueue.length === 0){\n\t\t\t\t\t\t//emit the event at the end\n\t\t\t\t\t\tTone.Buffer.emit(\"load\");\n\t\t\t\t\t}\n\t\t\t\t}).catch(function(){\n\t\t\t\t\tTone.Buffer._removeFromDownloadQueue(request);\n\t\t\t\t\tonError(\"Tone.Buffer: could not decode audio data: \"+url);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tonError(\"Tone.Buffer: could not locate file: \"+url);\n\t\t\t}\n\t\t});\n\t\trequest.addEventListener(\"error\", onError);\n\n\t\trequest.addEventListener(\"progress\", function(event){\n\t\t\tif (event.lengthComputable){\n\t\t\t\t//only go to 95%, the last 5% is when the audio is decoded\n\t\t\t\trequest.progress = (event.loaded / event.total) * 0.95;\n\t\t\t\tonProgress();\n\t\t\t}\n\t\t});\n\n\t\trequest.send();\n\n\t\treturn request;\n\t};\n\n\t/**\n\t *  Stop all of the downloads in progress\n\t *  @return {Tone.Buffer}\n\t *  @static\n\t */\n\tTone.Buffer.cancelDownloads = function(){\n\t\tTone.Buffer._downloadQueue.slice().forEach(function(request){\n\t\t\tTone.Buffer._removeFromDownloadQueue(request);\n\t\t\trequest.abort();\n\t\t});\n\t\treturn Tone.Buffer;\n\t};\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param {String} url The url/extension to test\n\t *  @return {Boolean} If the file extension can be played\n\t *  @static\n\t *  @example\n\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tTone.Buffer.supportsType = function(url){\n\t\tvar extension = url.split(\".\");\n\t\textension = extension[extension.length - 1];\n\t\tvar response = document.createElement(\"audio\").canPlayType(\"audio/\"+extension);\n\t\treturn response !== \"\";\n\t};\n\n\t/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t *  @return {Promise}\n\t */\n\tTone.loaded = function(){\n\t\tvar onload, onerror;\n\t\tfunction removeEvents(){\n\t\t\t//remove the events when it's resolved\n\t\t\tTone.Buffer.off(\"load\", onload);\n\t\t\tTone.Buffer.off(\"error\", onerror);\n\t\t}\n\t\treturn new Promise(function(success, fail){\n\t\t\tonload = function(){\n\t\t\t\tsuccess();\n\t\t\t};\n\t\t\tonerror = function(){\n\t\t\t\tfail();\n\t\t\t};\n\t\t\t//add the event listeners\n\t\t\tTone.Buffer.on(\"load\", onload);\n\t\t\tTone.Buffer.on(\"error\", onerror);\n\t\t}).then(removeEvents).catch(function(e){\n\t\t\tremoveEvents();\n\t\t\tthrow new Error(e);\n\t\t});\n\t};\n\n\treturn Tone.Buffer;\n});\n","define([\"../core/Tone\", \"../core/Emitter\", \"../core/Timeline\", \"../shim/AudioContext\"], function(Tone){\n\n\t/**\n\t *  @class Wrapper around the native AudioContext.\n\t *  @extends {Tone.Emitter}\n\t *  @param {AudioContext=} context optionally pass in a context\n\t */\n\tTone.Context = function(){\n\n\t\tTone.Emitter.call(this);\n\n\t\tvar options = Tone.defaults(arguments, [\"context\"], Tone.Context);\n\n\t\tif (!options.context){\n\t\t\toptions.context = new Tone.global.AudioContext();\n\t\t\tif (!options.context){\n\t\t\t\tthrow new Error(\"could not create AudioContext. Possibly too many AudioContexts running already.\");\n\t\t\t}\n\t\t}\n\t\tthis._context = options.context;\n\t\t//make sure it's not an AudioContext wrapper\n\t\twhile (this._context.rawContext){\n\t\t\tthis._context = this._context.rawContext;\n\t\t}\n\t\t// extend all of the methods\n\t\tfor (var prop in this._context){\n\t\t\tthis._defineProperty(this._context, prop);\n\t\t}\n\n\t\t/**\n\t\t *  The default latency hint\n\t\t *  @type  {String}\n\t\t *  @private\n\t\t */\n\t\tthis._latencyHint = options.latencyHint;\n\n\t\t/**\n\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t *  @type  {Object}\n\t\t *  @private\n\t\t */\n\t\tthis._constants = {};\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t// WORKER\n\t\t///////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  The amount of time events are scheduled\n\t\t *  into the future\n\t\t *  @type  {Number}\n\t\t */\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\t/**\n\t\t *  A reference to the actual computed update interval\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._computedUpdateInterval = 0;\n\n\t\t/**\n\t\t *  A reliable callback method\n\t\t *  @private\n\t\t *  @type  {Ticker}\n\t\t */\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t// TIMEOUTS\n\t\t///////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  All of the setTimeout events.\n\t\t *  @type  {Tone.Timeline}\n\t\t *  @private\n\t\t */\n\t\tthis._timeouts = new Tone.Timeline();\n\n\t\t/**\n\t\t *  The timeout id counter\n\t\t *  @private\n\t\t *  @type {Number}\n\t\t */\n\t\tthis._timeoutIds = 0;\n\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t//forward state change events\n\t\tthis._context.onstatechange = function(e){\n\t\t\tthis.emit(\"statechange\", e);\n\t\t}.bind(this);\n\t};\n\n\tTone.extend(Tone.Context, Tone.Emitter);\n\tTone.Emitter.mixin(Tone.Context);\n\n\t/**\n\t * defaults\n\t * @static\n\t * @type {Object}\n\t */\n\tTone.Context.defaults = {\n\t\t\"clockSource\" : \"worker\",\n\t\t\"latencyHint\" : \"interactive\",\n\t\t\"lookAhead\" : 0.1,\n\t\t\"updateInterval\" : 0.03\n\t};\n\n\t/**\n\t * Is an instanceof Tone.Context\n\t * @type {Boolean}\n\t */\n\tTone.Context.prototype.isContext = true;\n\n\t/**\n\t *  Define a property on this Tone.Context.\n\t *  This is used to extend the native AudioContext\n\t *  @param  {AudioContext}  context\n\t *  @param  {String}  prop\n\t *  @private\n\t */\n\tTone.Context.prototype._defineProperty = function(context, prop){\n\t\tif (Tone.isUndef(this[prop])){\n\t\t\tObject.defineProperty(this, prop, {\n\t\t\t\t\"get\" : function(){\n\t\t\t\t\tif (typeof context[prop] === \"function\"){\n\t\t\t\t\t\treturn context[prop].bind(context);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn context[prop];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"set\" : function(val){\n\t\t\t\t\tcontext[prop] = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t *  The current audio context time\n\t *  @return  {Number}\n\t */\n\tTone.Context.prototype.now = function(){\n\t\treturn this._context.currentTime + this.lookAhead;\n\t};\n\n\t/**\n\t *  The audio output destination. Alias for Tone.Master\n\t *  @readyOnly\n\t *  @type  {Tone.Master}\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"destination\", {\n\t\t\"get\" : function(){\n\t\t\tif (!this.master){\n\t\t\t\treturn this._context.destination;\n\t\t\t} else {\n\t\t\t\treturn this.master;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t *  @return  {Promise}\n\t */\n\tTone.Context.prototype.resume = function(){\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext){\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t};\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t *  @return  {Promise}\n\t */\n\tTone.Context.prototype.close = function(){\n\t\tvar closePromise = Promise.resolve();\n\t\t//never close the global Tone.Context\n\t\tif (this !== Tone.global.TONE_AUDIO_CONTEXT){\n\t\t\tclosePromise = this.rawContext.close();\n\t\t}\n\t\treturn closePromise.then(function(){\n\t\t\tTone.Context.emit(\"close\", this);\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t *  @param  {Number}  val\n\t *  @return  {BufferSourceNode}\n\t */\n\tTone.Context.prototype.getConstant = function(val){\n\t\tif (this._constants[val]){\n\t\t\treturn this._constants[val];\n\t\t} else {\n\t\t\tvar buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tvar arr = buffer.getChannelData(0);\n\t\t\tfor (var i = 0; i < arr.length; i++){\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tvar constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants[val] = constant;\n\t\t\treturn constant;\n\t\t}\n\t};\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t *  @private\n\t */\n\tTone.Context.prototype._timeoutLoop = function(){\n\t\tvar now = this.now();\n\t\twhile (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now){\n\t\t\tthis._timeouts.shift().callback();\n\t\t}\n\t};\n\n\t/**\n\t *  A setTimeout which is gaurenteed by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  {Function}  fn       The callback to invoke\n\t *  @param  {Seconds}    timeout  The timeout in seconds\n\t *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n\t */\n\tTone.Context.prototype.setTimeout = function(fn, timeout){\n\t\tthis._timeoutIds++;\n\t\tvar now = this.now();\n\t\tthis._timeouts.add({\n\t\t\t\"callback\" : fn,\n\t\t\t\"time\" : now + timeout,\n\t\t\t\"id\" : this._timeoutIds\n\t\t});\n\t\treturn this._timeoutIds;\n\t};\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  {Number}  id  The ID returned from setTimeout\n\t *  @return  {Tone.Context}  this\n\t */\n\tTone.Context.prototype.clearTimeout = function(id){\n\t\tthis._timeouts.forEach(function(event){\n\t\t\tif (event.id === id){\n\t\t\t\tthis.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t *  How often the Web Worker callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t *  @type {Number}\n\t *  @memberOf Tone.Context#\n\t *  @name updateInterval\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"updateInterval\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._ticker.updateInterval;\n\t\t},\n\t\t\"set\" : function(interval){\n\t\t\tthis._ticker.updateInterval = interval;\n\t\t}\n\t});\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t *  @type {AudioContext}\n\t *  @memberOf Tone.Context#\n\t *  @name rawContext\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"rawContext\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._context;\n\t\t}\n\t});\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (Web Worker [default]),\n\t *  \"timeout\" (setTimeout), or \"offline\" (none).\n\t *  @type {String}\n\t *  @memberOf Tone.Context#\n\t *  @name clockSource\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"clockSource\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._ticker.type;\n\t\t},\n\t\t\"set\" : function(type){\n\t\t\tthis._ticker.type = type;\n\t\t}\n\t});\n\n\t/**\n\t *  The type of playback, which affects tradeoffs between audio\n\t *  output latency and responsiveness.\n\t *\n\t *  In addition to setting the value in seconds, the latencyHint also\n\t *  accepts the strings \"interactive\" (prioritizes low latency),\n\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t *  @type {String|Seconds}\n\t *  @memberOf Tone.Context#\n\t *  @name latencyHint\n\t *  @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"latencyHint\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._latencyHint;\n\t\t},\n\t\t\"set\" : function(hint){\n\t\t\tvar lookAhead = hint;\n\t\t\tthis._latencyHint = hint;\n\t\t\tif (Tone.isString(hint)){\n\t\t\t\tswitch (hint){\n\t\t\t\t\tcase \"interactive\" :\n\t\t\t\t\t\tlookAhead = 0.1;\n\t\t\t\t\t\tthis._context.latencyHint = hint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"playback\" :\n\t\t\t\t\t\tlookAhead = 0.8;\n\t\t\t\t\t\tthis._context.latencyHint = hint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"balanced\" :\n\t\t\t\t\t\tlookAhead = 0.25;\n\t\t\t\t\t\tthis._context.latencyHint = hint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"fastest\" :\n\t\t\t\t\t\tthis._context.latencyHint = \"interactive\";\n\t\t\t\t\t\tlookAhead = 0.01;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.lookAhead = lookAhead;\n\t\t\tthis.updateInterval = lookAhead/3;\n\t\t}\n\t});\n\n\t/**\n\t *  Unlike other dispose methods, this returns a Promise\n\t *  which executes when the context is closed and disposed\n\t *  @returns {Promise} this\n\t */\n\tTone.Context.prototype.dispose = function(){\n\t\treturn this.close().then(function(){\n\t\t\tTone.Emitter.prototype.dispose.call(this);\n\t\t\tthis._ticker.dispose();\n\t\t\tthis._ticker = null;\n\t\t\tthis._timeouts.dispose();\n\t\t\tthis._timeouts = null;\n\t\t\tfor (var con in this._constants){\n\t\t\t\tthis._constants[con].disconnect();\n\t\t\t}\n\t\t\tthis._constants = null;\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t * @class A class which provides a reliable callback using either\n\t *        a Web Worker, or if that isn't supported, falls back to setTimeout.\n\t * @private\n\t */\n\tvar Ticker = function(callback, type, updateInterval){\n\n\t\t/**\n\t\t * Either \"worker\" or \"timeout\"\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._type = type;\n\n\t\t/**\n\t\t * The update interval of the worker\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._updateInterval = updateInterval;\n\n\t\t/**\n\t\t * The callback to invoke at regular intervals\n\t\t * @type {Function}\n\t\t * @private\n\t\t */\n\t\tthis._callback = Tone.defaultArg(callback, Tone.noOp);\n\n\t\t//create the clock source for the first time\n\t\tthis._createClock();\n\t};\n\n\t/**\n\t * The possible ticker types\n\t * @private\n\t * @type {Object}\n\t */\n\tTicker.Type = {\n\t\t\"Worker\" : \"worker\",\n\t\t\"Timeout\" : \"timeout\",\n\t\t\"Offline\" : \"offline\"\n\t};\n\n\t/**\n\t *  Generate a web worker\n\t *  @return  {WebWorker}\n\t *  @private\n\t */\n\tTicker.prototype._createWorker = function(){\n\n\t\t//URL Shim\n\t\tTone.global.URL = Tone.global.URL || Tone.global.webkitURL;\n\n\t\tvar blob = new Blob([\n\t\t\t//the initial timeout time\n\t\t\t\"var timeoutTime = \"+(this._updateInterval * 1000).toFixed(1)+\";\" +\n\t\t\t//onmessage callback\n\t\t\t\"self.onmessage = function(msg){\" +\n\t\t\t\"\ttimeoutTime = parseInt(msg.data);\" +\n\t\t\t\"};\" +\n\t\t\t//the tick function which posts a message\n\t\t\t//and schedules a new tick\n\t\t\t\"function tick(){\" +\n\t\t\t\"\tsetTimeout(tick, timeoutTime);\" +\n\t\t\t\"\tself.postMessage('tick');\" +\n\t\t\t\"}\" +\n\t\t\t//call tick initially\n\t\t\t\"tick();\"\n\t\t]);\n\t\tvar blobUrl = URL.createObjectURL(blob);\n\t\tvar worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t};\n\n\t/**\n\t * Create a timeout loop\n\t * @private\n\t */\n\tTicker.prototype._createTimeout = function(){\n\t\tthis._timeout = setTimeout(function(){\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}.bind(this), this._updateInterval * 1000);\n\t};\n\n\t/**\n\t * Create the clock source.\n\t * @private\n\t */\n\tTicker.prototype._createClock = function(){\n\t\tif (this._type === Ticker.Type.Worker){\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e){\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = Ticker.Type.Timeout;\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === Ticker.Type.Timeout){\n\t\t\tthis._createTimeout();\n\t\t}\n\t};\n\n\t/**\n\t * @memberOf Ticker#\n\t * @type {Number}\n\t * @name updateInterval\n\t * @private\n\t */\n\tObject.defineProperty(Ticker.prototype, \"updateInterval\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._updateInterval;\n\t\t},\n\t\t\"set\" : function(interval){\n\t\t\tthis._updateInterval = Math.max(interval, 128/44100);\n\t\t\tif (this._type === Ticker.Type.Worker){\n\t\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t * @memberOf Ticker#\n\t * @type {Number}\n\t * @name type\n\t * @private\n\t */\n\tObject.defineProperty(Ticker.prototype, \"type\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\t\"set\" : function(type){\n\t\t\tthis._disposeClock();\n\t\t\tthis._type = type;\n\t\t\tthis._createClock();\n\t\t}\n\t});\n\n\t/**\n\t * Clean up the current clock source\n\t * @private\n\t */\n\tTicker.prototype._disposeClock = function(){\n\t\tif (this._timeout){\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = null;\n\t\t}\n\t\tif (this._worker){\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t\tthis._worker = null;\n\t\t}\n\t};\n\n\t/**\n\t * Clean up\n\t * @private\n\t */\n\tTicker.prototype.dispose = function(){\n\t\tthis._disposeClock();\n\t\tthis._callback = null;\n\t};\n\n\t/**\n\t *  Adds connect/disconnect methods\n\t *  @private\n\t */\n\tTone.getContext(function(){\n\n\t\tvar nativeConnect = AudioNode.prototype.connect;\n\t\tvar nativeDisconnect = AudioNode.prototype.disconnect;\n\n\t\t//replace the old connect method\n\t\tfunction toneConnect(B, outNum, inNum){\n\t\t\tif (B.input){\n\t\t\t\tinNum = Tone.defaultArg(inNum, 0);\n\t\t\t\tif (Tone.isArray(B.input)){\n\t\t\t\t\treturn this.connect(B.input[inNum]);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.connect(B.input, outNum, inNum);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (B instanceof AudioNode){\n\t\t\t\t\t\tnativeConnect.call(this, B, outNum, inNum);\n\t\t\t\t\t\treturn B;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnativeConnect.call(this, B, outNum);\n\t\t\t\t\t\treturn B;\n\t\t\t\t\t}\n\t\t\t\t} catch (e){\n\t\t\t\t\tthrow new Error(\"error connecting to node: \"+B+\"\\n\"+e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//replace the old disconnect method\n\t\tfunction toneDisconnect(B, outNum, inNum){\n\t\t\tif (B && B.input && Tone.isArray(B.input)){\n\t\t\t\tinNum = Tone.defaultArg(inNum, 0);\n\t\t\t\tthis.disconnect(B.input[inNum], outNum, 0);\n\t\t\t} else if (B && B.input){\n\t\t\t\tthis.disconnect(B.input, outNum, inNum);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (B instanceof AudioParam){\n\t\t\t\t\t\tnativeDisconnect.call(this, B, outNum);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnativeDisconnect.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t} catch (e){\n\t\t\t\t\tthrow new Error(\"error disconnecting node: \"+B+\"\\n\"+e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (AudioNode.prototype.connect !== toneConnect){\n\t\t\tAudioNode.prototype.connect = toneConnect;\n\t\t\tAudioNode.prototype.disconnect = toneDisconnect;\n\t\t}\n\t});\n\n\t// set the audio context initially, and if one is not already created\n\tif (Tone.supported && !Tone.initialized){\t\t\t\n\t\tif (!Tone.global.TONE_AUDIO_CONTEXT){\n\t\t\tTone.global.TONE_AUDIO_CONTEXT = new Tone.Context();\n\t\t}\n\t\tTone.context = Tone.global.TONE_AUDIO_CONTEXT;\n\n\t\t// log on first initialization\n\t\t// allow optional silencing of this log\n\t\tif (!Tone.global.TONE_SILENCE_VERSION_LOGGING){\n\t\t\tvar prefix = \"v\";\n\t\t\tif (Tone.version === \"dev\"){\n\t\t\t\tprefix = \"\";\n\t\t\t}\n\t\t\tvar printString = \" * Tone.js \" + prefix + Tone.version + \" * \"; \n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(\"%c\" + printString, \"background: #000; color: #fff\");\n\t\t}\n\t} else if (!Tone.supported){\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn(\"This browser does not support Tone.js\");\n\t}\n\n\treturn Tone.Context;\n});\n","define([\"../core/Tone\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @example\n\t * var split = new Tone.Split();\n\t * stereoSignal.connect(split);\n\t */\n\tTone.Split = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(0, 2);\n\n\t\t/**\n\t\t *  @type {ChannelSplitterNode}\n\t\t *  @private\n\t\t */\n\t\tthis._splitter = this.input = this.context.createChannelSplitter(2);\n\n\t\t/**\n\t\t *  Left channel output.\n\t\t *  Alias for <code>output[0]</code>\n\t\t *  @type {Tone.Gain}\n\t\t */\n\t\tthis.left = this.output[0] = new Tone.Gain();\n\n\t\t/**\n\t\t *  Right channel output.\n\t\t *  Alias for <code>output[1]</code>\n\t\t *  @type {Tone.Gain}\n\t\t */\n\t\tthis.right = this.output[1] = new Tone.Gain();\n\n\t\t//connections\n\t\tthis._splitter.connect(this.left, 0, 0);\n\t\tthis._splitter.connect(this.right, 1, 0);\n\t};\n\n\tTone.extend(Tone.Split, Tone.AudioNode);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Split} this\n\t */\n\tTone.Split.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._splitter.disconnect();\n\t\tthis.left.dispose();\n\t\tthis.left = null;\n\t\tthis.right.dispose();\n\t\tthis.right = null;\n\t\tthis._splitter = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Split;\n});\n","define([\"../core/Tone\", \"../core/Param\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n\t *  @extends {Tone}\n\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t *  @param {Time=} maxDelay The maximum delay time.\n\t */\n\tTone.Delay = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"delayTime\", \"maxDelay\"], Tone.Delay);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t * The maximum delay time initialized with the node\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));\n\t\t\n\t\t/**\n\t\t *  The native delay node\n\t\t *  @type {DelayNode}\n\t\t *  @private\n\t\t */\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(this._maxDelay);\n\n\t\t/**\n\t\t *  The amount of time the incoming signal is\n\t\t *  delayed.\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.delayTime = new Tone.Param({\n\t\t\t\"param\" : this._delayNode.delayTime,\n\t\t\t\"units\" : Tone.Type.Time,\n\t\t\t\"value\" : options.delayTime\n\t\t});\n\n\t\tthis._readOnly(\"delayTime\");\n\t};\n\n\tTone.extend(Tone.Delay, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Delay.defaults = {\n\t\t\"maxDelay\" : 1,\n\t\t\"delayTime\" : 0\n\t};\n\n\t/**\n\t * The maximum delay time. This cannot be changed. The value is passed into the constructor.\n\t * @memberof Tone.Delay#\n\t * @type {Time}\n\t * @name maxDelay\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Delay.prototype, \"maxDelay\", {\n\t\tget : function(){\n\t\t\treturn this._maxDelay;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Delay}  this\n\t */\n\tTone.Delay.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._delayNode.disconnect();\n\t\tthis._delayNode = null;\n\t\tthis._writable(\"delayTime\");\n\t\tthis.delayTime = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Delay;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../source/Source\",\n\t\"../core/Transport\", \"../source/OscillatorNode\"],\nfunction(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Oscillator supports a number of features including\n\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type),\n\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Source}\n\t *  @param {Frequency} [frequency] Starting frequency\n\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t *  @example\n\t * //make and start a 440hz sine tone\n\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t */\n\tTone.Oscillator = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"type\"], Tone.Oscillator);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  the main oscillator\n\t\t *  @type {OscillatorNode}\n\t\t *  @private\n\t\t */\n\t\tthis._oscillator = null;\n\n\t\t/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\n\t\t/**\n\t\t *  the periodic wave\n\t\t *  @type {PeriodicWave}\n\t\t *  @private\n\t\t */\n\t\tthis._wave = null;\n\n\t\t/**\n\t\t *  The partials of the oscillator\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._partials = options.partials;\n\n\t\t/**\n\t\t *  The number of partials to limit or extend the periodic wave by\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._partialCount = options.partialCount;\n\n\t\t/**\n\t\t *  the phase of the oscillator\n\t\t *  between 0 - 360\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._phase = options.phase;\n\n\t\t/**\n\t\t *  the type of the oscillator\n\t\t *  @type {string}\n\t\t *  @private\n\t\t */\n\t\tthis._type = options.type;\n\n\t\t//setup\n\t\tif (options.partialCount && options.type !== Tone.Oscillator.Type.Custom){\n\t\t\tthis._type = this.baseType + options.partialCount.toString();\n\t\t}\n\t\tthis.phase = this._phase;\n\t\tthis._readOnly([\"frequency\", \"detune\"]);\n\t};\n\n\tTone.extend(Tone.Oscillator, Tone.Source);\n\n\t/**\n\t *  the default parameters\n\t *  @type {Object}\n\t */\n\tTone.Oscillator.defaults = {\n\t\t\"type\" : \"sine\",\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"phase\" : 0,\n\t\t\"partials\" : [],\n\t\t\"partialCount\" : 0\n\t};\n\n\t/**\n\t *  The Oscillator types\n\t *  @enum {String}\n\t */\n\tTone.Oscillator.Type = {\n\t\tSine : \"sine\",\n\t\tTriangle : \"triangle\",\n\t\tSawtooth : \"sawtooth\",\n\t\tSquare : \"square\",\n\t\tCustom : \"custom\"\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param  {Time} [time=now]\n\t *  @private\n\t */\n\tTone.Oscillator.prototype._start = function(time){\n\t\tthis.log(\"start\", time);\n\t\t//new oscillator with previous values\n\t\tthis._oscillator = new Tone.OscillatorNode();\n\t\tif (this._wave){\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type;\n\t\t}\n\t\t//connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\t\t//start the oscillator\n\t\ttime = this.toSeconds(time);\n\t\tthis._oscillator.start(time);\n\t};\n\n\t/**\n\t *  stop the oscillator\n\t *  @private\n\t *  @param  {Time} [time=now] (optional) timing parameter\n\t *  @returns {Tone.Oscillator} this\n\t */\n\tTone.Oscillator.prototype._stop = function(time){\n\t\tthis.log(\"stop\", time);\n\t\tif (this._oscillator){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tthis._oscillator.stop(time);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t * @param  {Time=} time\n\t * @return {Tone.Oscillator}      this\n\t */\n\tTone.Oscillator.prototype.restart = function(time){\n\t\tif (this._oscillator){\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(this.toSeconds(time));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency.\n\t *  @returns {Tone.Oscillator} this\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tTone.Oscillator.prototype.syncFrequency = function(){\n\t\tTone.Transport.syncSignal(this.frequency);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Unsync the oscillator's frequency from the Transport.\n\t *  See Tone.Oscillator.syncFrequency\n\t *  @returns {Tone.Oscillator} this\n\t */\n\tTone.Oscillator.prototype.unsyncFrequency = function(){\n\t\tTone.Transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t};\n\n\t/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br>\n\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t * PeriodicWave equations are from the\n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *\n\t * @memberOf Tone.Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */\n\tObject.defineProperty(Tone.Oscillator.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\tset : function(type){\n\t\t\tvar coefs = this._getRealImaginary(type, this._phase);\n\t\t\tvar periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t\t\tthis._wave = periodicWave;\n\t\t\tif (this._oscillator !== null){\n\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t}\n\t\t\tthis._type = type;\n\t\t}\n\t});\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @memberOf Tone.Oscillator#\n\t * @type {string}\n\t * @name baseType\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tObject.defineProperty(Tone.Oscillator.prototype, \"baseType\", {\n\t\tget : function(){\n\t\t\treturn this._type.replace(this.partialCount, \"\");\n\t\t},\n\t\tset : function(baseType){\n\t\t\tif (this.partialCount && this._type !== Tone.Oscillator.Type.Custom && baseType !== Tone.Oscillator.Type.Custom){\n\t\t\t\tthis.type = baseType + this.partialCount;\n\t\t\t} else {\n\t\t\t\tthis.type = baseType;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials. \n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is \n\t * not settable, but equals the length of the partials array.\n\t * @example\n\t * osc.type = 'sine'\n\t * osc.partialCount = 3\n\t * //is equivalent to\n\t * osc.type = 'sine3'\n\t * @memberOf Tone.Oscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tObject.defineProperty(Tone.Oscillator.prototype, \"partialCount\", {\n\t\tget : function(){\n\t\t\treturn this._partialCount;\n\t\t},\n\t\tset : function(p){\n\t\t\tvar type = this._type;\n\t\t\tvar partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\t\tif (partial){\n\t\t\t\ttype = partial[1];\n\t\t\t}\n\t\t\tif (this._type !== Tone.Oscillator.Type.Custom){\n\t\t\t\tif (p === 0){\n\t\t\t\t\tthis.type = type;\n\t\t\t\t} else {\n\t\t\t\t\tthis.type = type + p.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. \n\t *  @memberOf Tone.Oscillator#\n\t *  @returns {Object}\n\t */\n\tTone.Oscillator.prototype.get = function(){\n\t\tconst values = Tone.prototype.get.apply(this, arguments);\n\t\tif (values.type !== Tone.Oscillator.Type.Custom){\n\t\t\tdelete values.partials;\n\t\t}\n\t\treturn values;\n\t};\n\n\t/**\n\t *  Returns the real and imaginary components based\n\t *  on the oscillator type.\n\t *  @returns {Array} [real, imaginary]\n\t *  @private\n\t */\n\tTone.Oscillator.prototype._getRealImaginary = function(type, phase){\n\t\tvar fftSize = 4096;\n\t\tvar periodicWaveSize = fftSize / 2;\n\n\t\tvar real = new Float32Array(periodicWaveSize);\n\t\tvar imag = new Float32Array(periodicWaveSize);\n\n\t\tvar partialCount = 1;\n\t\tif (type === Tone.Oscillator.Type.Custom){\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t} else {\n\t\t\tvar partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial){\n\t\t\t\tpartialCount = parseInt(partial[2]) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2]);\n\t\t\t\ttype = partial[1];\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\tfor (var n = 1; n < periodicWaveSize; ++n){\n\t\t\tvar piFactor = 2 / (n * Math.PI);\n\t\t\tvar b;\n\t\t\tswitch (type){\n\t\t\t\tcase Tone.Oscillator.Type.Sine:\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n-1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Tone.Oscillator.Type.Square:\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n-1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Tone.Oscillator.Type.Sawtooth:\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n-1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Tone.Oscillator.Type.Triangle:\n\t\t\t\t\tif (n & 1){\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n-1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Tone.Oscillator.Type.Custom:\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Tone.Oscillator: invalid type: \"+type);\n\t\t\t}\n\t\t\tif (b !== 0){\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t};\n\n\t/**\n\t *  Compute the inverse FFT for a given phase.\n\t *  @param  {Float32Array}  real\n\t *  @param  {Float32Array}  imag\n\t *  @param  {NormalRange}  phase\n\t *  @return  {AudioRange}\n\t *  @private\n\t */\n\tTone.Oscillator.prototype._inverseFFT = function(real, imag, phase){\n\t\tvar sum = 0;\n\t\tvar len = real.length;\n\t\tfor (var i = 0; i < len; i++){\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t};\n\n\t/**\n\t *  Returns the initial value of the oscillator.\n\t *  @return  {AudioRange}\n\t *  @private\n\t */\n\tTone.Oscillator.prototype._getInitialValue = function(){\n\t\tvar coefs = this._getRealImaginary(this._type, 0);\n\t\tvar real = coefs[0];\n\t\tvar imag = coefs[1];\n\t\tvar maxValue = 0;\n\t\tvar twoPi = Math.PI * 2;\n\t\t//check for peaks in 8 places\n\t\tfor (var i = 0; i < 8; i++){\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / 8) * twoPi), maxValue);\n\t\t}\n\t\treturn -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t};\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf Tone.Oscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tObject.defineProperty(Tone.Oscillator.prototype, \"partials\", {\n\t\tget : function(){\n\t\t\treturn this._partials;\n\t\t},\n\t\tset : function(partials){\n\t\t\tthis._partials = partials;\n\t\t\tthis.type = Tone.Oscillator.Type.Custom;\n\t\t}\n\t});\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.Oscillator#\n\t * @type {Degrees}\n\t * @name phase\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */\n\tObject.defineProperty(Tone.Oscillator.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._phase * (180 / Math.PI);\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._phase = phase * Math.PI / 180;\n\t\t\t//reset the type\n\t\t\tthis.type = this._type;\n\t\t}\n\t});\n\n\t/**\n\t *  Dispose and disconnect.\n\t *  @return {Tone.Oscillator} this\n\t */\n\tTone.Oscillator.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tif (this._oscillator !== null){\n\t\t\tthis._oscillator.dispose();\n\t\t\tthis._oscillator = null;\n\t\t}\n\t\tthis._wave = null;\n\t\tthis._writable([\"frequency\", \"detune\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\tthis._partials = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Oscillator;\n});\n","define([\"../core/Tone\", \"../core/Clock\", \"../type/Type\", \"../core/Timeline\",\n\t\"../core/Emitter\", \"../core/Gain\", \"../core/IntervalTimeline\",\n\t\"../core/TransportRepeatEvent\", \"../core/TransportEvent\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Transport for timing musical events.\n\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t *          in the argument of the callback function. Pass that time value to the object\n\t *          you're scheduling. <br><br>\n\t *          A single transport is created for you when the library is initialized.\n\t *          <br><br>\n\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t *          called with the time of that event as the argument.\n\t *\n\t *  @extends {Tone.Emitter}\n\t *  @singleton\n\t *  @example\n\t * //repeated event every 8th note\n\t * Tone.Transport.scheduleRepeat(function(time){\n\t * \t//do something with the time\n\t * }, \"8n\");\n\t *  @example\n\t * //schedule an event on the 16th measure\n\t * Tone.Transport.schedule(function(time){\n\t * \t//do something with the time\n\t * }, \"16:0:0\");\n\t */\n\tTone.Transport = function(){\n\n\t\tTone.Emitter.call(this);\n\n\t\tTone.getContext(function(){\n\n\t\t\t///////////////////////////////////////////////////////////////////////\n\t\t\t//\tLOOPING\n\t\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t\t/**\n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t\t\tthis.loop = false;\n\n\t\t\t/**\n\t\t\t * \tThe loop start position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._loopStart = 0;\n\n\t\t\t/**\n\t\t\t * \tThe loop end position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._loopEnd = 0;\n\n\t\t\t///////////////////////////////////////////////////////////////////////\n\t\t\t//\tCLOCK/TEMPO\n\t\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t\t/**\n\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t\t\tthis._ppq = TransportConstructor.defaults.PPQ;\n\n\t\t\t/**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t\t\tthis._clock = new Tone.Clock({\n\t\t\t\t\"callback\" : this._processTick.bind(this),\n\t\t\t\t\"frequency\" : 0,\n\t\t\t});\n\n\t\t\tthis._bindClockEvents();\n\n\t\t\t/**\n\t\t\t *  The Beats Per Minute of the Transport.\n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */\n\t\t\tthis.bpm = this._clock.frequency;\n\t\t\tthis.bpm._toUnits = this._toUnits.bind(this);\n\t\t\tthis.bpm._fromUnits = this._fromUnits.bind(this);\n\t\t\tthis.bpm.units = Tone.Type.BPM;\n\t\t\tthis.bpm.value = TransportConstructor.defaults.bpm;\n\t\t\tthis._readOnly(\"bpm\");\n\n\t\t\t/**\n\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t *  of the time signature over a denominator of 4.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._timeSignature = TransportConstructor.defaults.timeSignature;\n\n\t\t\t///////////////////////////////////////////////////////////////////////\n\t\t\t//\tTIMELINE EVENTS\n\t\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t\t/**\n\t\t\t *  All the events in an object to keep track by ID\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._scheduledEvents = {};\n\n\t\t\t/**\n\t\t\t * \tThe scheduled events.\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._timeline = new Tone.Timeline();\n\n\t\t\t/**\n\t\t\t *  Repeated events\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._repeatedEvents = new Tone.IntervalTimeline();\n\n\t\t\t/**\n\t\t\t *  All of the synced Signals\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t\t\tthis._syncedSignals = [];\n\n\t\t\t///////////////////////////////////////////////////////////////////////\n\t\t\t//\tSWING\n\t\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t\t/**\n\t\t\t *  The subdivision of the swing\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._swingTicks = TransportConstructor.defaults.PPQ / 2; //8n\n\n\t\t\t/**\n\t\t\t *  The swing amount\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._swingAmount = 0;\n\n\t\t\t//transport is a singleton so it adds itself to the context\n\t\t\tthis.context.transport = this;\n\n\t\t}.bind(this));\n\t};\n\n\tTone.extend(Tone.Transport, Tone.Emitter);\n\n\t/**\n\t *  the defaults\n\t *  @type {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.Transport.defaults = {\n\t\t\"bpm\" : 120,\n\t\t\"swing\" : 0,\n\t\t\"swingSubdivision\" : \"8n\",\n\t\t\"timeSignature\" : 4,\n\t\t\"loopStart\" : 0,\n\t\t\"loopEnd\" : \"4m\",\n\t\t\"PPQ\" : 192\n\t};\n\n\t/**\n\t * Is an instanceof Tone.Transport\n\t * @type {Boolean}\n\t */\n\tTone.Transport.prototype.isTransport = true;\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param   {number} tickTime clock relative tick time\n\t *  @private\n\t */\n\tTone.Transport.prototype._processTick = function(tickTime, ticks){\n\t\t//handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && //not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0){\n\t\t\t//add some swing\n\t\t\tvar progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tvar amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += Tone.Ticks(this._swingTicks * 2/3).toSeconds() * amount;\n\t\t}\n\t\t//do the loop test\n\t\tif (this.loop){\n\t\t\tif (ticks >= this._loopEnd){\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t//invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, function(event){\n\t\t\tevent.invoke(tickTime);\n\t\t});\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Schedule an event along the timeline.\n\t *  @param {Function} callback The callback to be invoked at the time.\n\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t *  @return {Number} The id of the event which can be used for canceling the event.\n\t *  @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Tone.Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tTone.Transport.prototype.schedule = function(callback, time){\n\t\tvar event = new Tone.TransportEvent(this, {\n\t\t\t\"time\" : Tone.TransportTime(time),\n\t\t\t\"callback\" : callback\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t};\n\n\t/**\n\t *  Schedule a repeated event along the timeline. The event will fire\n\t *  at the `interval` starting at the `startTime` and for the specified\n\t *  `duration`.\n\t *  @param  {Function}  callback   The callback to invoke.\n\t *  @param  {Time}    interval   The duration between successive\n\t *                               callbacks. Must be a positive number.\n\t *  @param  {TransportTime=}    startTime  When along the timeline the events should\n\t *                               start being invoked.\n\t *  @param {Time} [duration=Infinity] How long the event should repeat.\n\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t *                           the event.\n\t *  @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tTone.Transport.prototype.scheduleRepeat = function(callback, interval, startTime, duration){\n\t\tvar event = new Tone.TransportRepeatEvent(this, {\n\t\t\t\"callback\" : callback,\n\t\t\t\"interval\" : Tone.Time(interval),\n\t\t\t\"time\" : Tone.TransportTime(startTime),\n\t\t\t\"duration\" : Tone.Time(Tone.defaultArg(duration, Infinity)),\n\t\t});\n\t\t//kick it off if the Transport is started\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t};\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked.\n\t *  Note that if the given time is less than the current transport time,\n\t *  the event will be invoked immediately.\n\t *  @param {Function} callback The callback to invoke once.\n\t *  @param {TransportTime} time The time the callback should be invoked.\n\t *  @returns {Number} The ID of the scheduled event.\n\t */\n\tTone.Transport.prototype.scheduleOnce = function(callback, time){\n\t\tvar event = new Tone.TransportEvent(this, {\n\t\t\t\"time\" : Tone.TransportTime(time),\n\t\t\t\"callback\" : callback,\n\t\t\t\"once\" : true\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t};\n\n\t/**\n\t *  Clear the passed in event id from the timeline\n\t *  @param {Number} eventId The id of the event.\n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.clear = function(eventId){\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)){\n\t\t\tvar item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @param {Tone.TransportEvent}\tevent\n\t * @param {Tone.Timeline} timeline\n\t * @returns {Number} the event id which was just added\n\t * @private\n\t */\n\tTone.Transport.prototype._addEvent = function(event, timeline){\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\t\"event\" : event,\n\t\t\t\"timeline\" : timeline\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t};\n\n\t/**\n\t *  Remove scheduled events from the timeline after\n\t *  the given time. Repeated events will be removed\n\t *  if their startTime is after the given time\n\t *  @param {TransportTime} [after=0] Clear all events after\n\t *                          this time.\n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.cancel = function(after){\n\t\tafter = Tone.defaultArg(after, 0);\n\t\tafter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(after, function(event){\n\t\t\tthis.clear(event.id);\n\t\t}.bind(this));\n\t\tthis._repeatedEvents.forEachFrom(after, function(event){\n\t\t\tthis.clear(event.id);\n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Bind start/stop/pause events from the clock and emit them.\n\t *  @private\n\t */\n\tTone.Transport.prototype._bindClockEvents = function(){\n\t\tthis._clock.on(\"start\", function(time, offset){\n\t\t\toffset = Tone.Ticks(offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t}.bind(this));\n\n\t\tthis._clock.on(\"stop\", function(time){\n\t\t\tthis.emit(\"stop\", time);\n\t\t}.bind(this));\n\n\t\tthis._clock.on(\"pause\", function(time){\n\t\t\tthis.emit(\"pause\", time);\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Transport#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._clock.getStateAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  Start the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now] The time when the transport should start.\n\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * //start the transport in one second starting at beginning of the 5th measure.\n\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tTone.Transport.prototype.start = function(time, offset){\n\t\t//start the clock\n\t\tif (Tone.isDefined(offset)){\n\t\t\toffset = this.toTicks(offset);\n\t\t}\n\t\tthis._clock.start(time, offset);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now] The time when the transport should stop.\n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * Tone.Transport.stop();\n\t */\n\tTone.Transport.prototype.stop = function(time){\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Pause the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now]\n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.pause = function(time){\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  {Time=} time The time of the event\n\t * @return {Tone.Transport}      this\n\t */\n\tTone.Transport.prototype.toggle = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== Tone.State.Started){\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The time signature as just the numerator over 4.\n\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t *  @memberOf Tone.Transport#\n\t *  @type {Number|Array}\n\t *  @name timeSignature\n\t *  @example\n\t * //common time\n\t * Tone.Transport.timeSignature = 4;\n\t * // 7/8\n\t * Tone.Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Tone.Transport.timeSignature; //returns 3.5\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"timeSignature\", {\n\t\tget : function(){\n\t\t\treturn this._timeSignature;\n\t\t},\n\t\tset : function(timeSig){\n\t\t\tif (Tone.isArray(timeSig)){\n\t\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t\t}\n\t\t\tthis._timeSignature = timeSig;\n\t\t}\n\t});\n\n\t/**\n\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t * @memberOf Tone.Transport#\n\t * @type {Time}\n\t * @name loopStart\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._loopStart).toSeconds();\n\t\t},\n\t\tset : function(startPosition){\n\t\t\tthis._loopStart = this.toTicks(startPosition);\n\t\t}\n\t});\n\n\t/**\n\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t * @memberOf Tone.Transport#\n\t * @type {Time}\n\t * @name loopEnd\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._loopEnd).toSeconds();\n\t\t},\n\t\tset : function(endPosition){\n\t\t\tthis._loopEnd = this.toTicks(endPosition);\n\t\t}\n\t});\n\n\t/**\n\t *  Set the loop start and stop at the same time.\n\t *  @param {TransportTime} startPosition\n\t *  @param {TransportTime} endPosition\n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * //loop over the first measure\n\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t * Tone.Transport.loop = true;\n\t */\n\tTone.Transport.prototype.setLoopPoints = function(startPosition, endPosition){\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The swing value. Between 0-1 where 1 equal to\n\t *  the note + half the subdivision.\n\t *  @memberOf Tone.Transport#\n\t *  @type {NormalRange}\n\t *  @name swing\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"swing\", {\n\t\tget : function(){\n\t\t\treturn this._swingAmount;\n\t\t},\n\t\tset : function(amount){\n\t\t\t//scale the values to a normal range\n\t\t\tthis._swingAmount = amount;\n\t\t}\n\t});\n\n\t/**\n\t *  Set the subdivision which the swing will be applied to.\n\t *  The default value is an 8th note. Value must be less\n\t *  than a quarter note.\n\t *\n\t *  @memberOf Tone.Transport#\n\t *  @type {Time}\n\t *  @name swingSubdivision\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"swingSubdivision\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._swingTicks).toNotation();\n\t\t},\n\t\tset : function(subdivision){\n\t\t\tthis._swingTicks = this.toTicks(subdivision);\n\t\t}\n\t});\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away.\n\t *  @memberOf Tone.Transport#\n\t *  @type {BarsBeatsSixteenths}\n\t *  @name position\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"position\", {\n\t\tget : function(){\n\t\t\tvar now = this.now();\n\t\t\tvar ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn Tone.Ticks(ticks).toBarsBeatsSixteenths();\n\t\t},\n\t\tset : function(progress){\n\t\t\tvar ticks = this.toTicks(progress);\n\t\t\tthis.ticks = ticks;\n\t\t}\n\t});\n\n\t/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away.\n\t *  @memberOf Tone.Transport#\n\t *  @type {Seconds}\n\t *  @name seconds\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"seconds\", {\n\t\tget : function(){\n\t\t\treturn this._clock.seconds;\n\t\t},\n\t\tset : function(s){\n\t\t\tvar now = this.now();\n\t\t\tvar ticks = this.bpm.timeToTicks(s, now);\n\t\t\tthis.ticks = ticks;\n\t\t}\n\t});\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true.\n\t *  @memberOf Tone.Transport#\n\t *  @name progress\n\t *  @type {NormalRange}\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"progress\", {\n\t\tget : function(){\n\t\t\tif (this.loop){\n\t\t\t\tvar now = this.now();\n\t\t\t\tvar ticks = this._clock.getTicksAtTime(now);\n\t\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The transports current tick position.\n\t *\n\t *  @memberOf Tone.Transport#\n\t *  @type {Ticks}\n\t *  @name ticks\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"ticks\", {\n\t\tget : function(){\n\t\t\treturn this._clock.ticks;\n\t\t},\n\t\tset : function(t){\n\t\t\tif (this._clock.ticks !== t){\n\t\t\t\tvar now = this.now();\n\t\t\t\t//stop everything synced to the transport\n\t\t\t\tif (this.state === Tone.State.Started){\n\t\t\t\t\tthis.emit(\"stop\", now);\n\t\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t\t//restart it with the new time\n\t\t\t\t\tthis.emit(\"start\", now, this.seconds);\n\t\t\t\t} else {\n\t\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  {Time} time  When to get the tick value\n\t * @return {Ticks}       The tick value at the given time.\n\t */\n\tTone.Transport.prototype.getTicksAtTime = function(time){\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t};\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  {Time}  time  When to get the elapsed seconds\n\t *  @return  {Seconds}  The number of elapsed seconds\n\t */\n\tTone.Transport.prototype.getSecondsAtTime = function(time){\n\t\treturn this._clock.getSecondsAtTime(time);\n\t};\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value\n\t *  after other objects have been created can cause problems.\n\t *\n\t *  @memberOf Tone.Transport#\n\t *  @type {Number}\n\t *  @name PPQ\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"PPQ\", {\n\t\tget : function(){\n\t\t\treturn this._ppq;\n\t\t},\n\t\tset : function(ppq){\n\t\t\tvar bpm = this.bpm.value;\n\t\t\tthis._ppq = ppq;\n\t\t\tthis.bpm.value = bpm;\n\t\t}\n\t});\n\n\t/**\n\t *  Convert from BPM to frequency (factoring in PPQ)\n\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t *  @private\n\t */\n\tTone.Transport.prototype._fromUnits = function(bpm){\n\t\treturn 1 / (60 / bpm / this.PPQ);\n\t};\n\n\t/**\n\t *  Convert from frequency (with PPQ) into BPM\n\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t *  @return  {BPM}  The frequency value as BPM.\n\t *  @private\n\t */\n\tTone.Transport.prototype._toUnits = function(freq){\n\t\treturn (freq / this.PPQ) * 60;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the time aligned to the next subdivision\n\t *  of the Transport. If the Transport is not started,\n\t *  it will return 0.\n\t *  Note: this will not work precisely during tempo ramps.\n\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t *  @return  {Number}  The context time of the next subdivision.\n\t *  @example\n\t * Tone.Transport.start(); //the transport must be started\n\t * Tone.Transport.nextSubdivision(\"4n\");\n\t */\n\tTone.Transport.prototype.nextSubdivision = function(subdivision){\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== Tone.State.Started){\n\t\t\t//if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tvar now = this.now();\n\t\t\t//the remainder of the current ticks and the subdivision\n\t\t\tvar transportPos = this.getTicksAtTime(now);\n\t\t\tvar remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t};\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that\n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio.\n\t *\n\t *  @param  {Tone.Signal} signal\n\t *  @param {number=} ratio Optionally pass in the ratio between\n\t *                         the two signals. Otherwise it will be computed\n\t *                         based on their current values.\n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.syncSignal = function(signal, ratio){\n\t\tif (!ratio){\n\t\t\t//get the sync ratio\n\t\t\tvar now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0){\n\t\t\t\tratio = signal.getValueAtTime(now) / this.bpm.getValueAtTime(now);\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tvar ratioSignal = new Tone.Gain(ratio);\n\t\tthis.bpm.chain(ratioSignal, signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\t\"ratio\" : ratioSignal,\n\t\t\t\"signal\" : signal,\n\t\t\t\"initial\" : signal.value\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control.\n\t *  See Tone.Transport.syncSignal.\n\t *  @param  {Tone.Signal} signal\n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.unsyncSignal = function(signal){\n\t\tfor (var i = this._syncedSignals.length - 1; i >= 0; i--){\n\t\t\tvar syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal){\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Transport} this\n\t *  @private\n\t */\n\tTone.Transport.prototype.dispose = function(){\n\t\tTone.Emitter.prototype.dispose.call(this);\n\t\tthis._clock.dispose();\n\t\tthis._clock = null;\n\t\tthis._writable(\"bpm\");\n\t\tthis.bpm = null;\n\t\tthis._timeline.dispose();\n\t\tthis._timeline = null;\n\t\tthis._repeatedEvents.dispose();\n\t\tthis._repeatedEvents = null;\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tINITIALIZATION\n\t///////////////////////////////////////////////////////////////////////////////\n\n\tvar TransportConstructor = Tone.Transport;\n\tTone.Transport = new TransportConstructor();\n\n\tTone.Context.on(\"init\", function(context){\n\t\tif (context.transport && context.transport.isTransport){\n\t\t\tTone.Transport = context.transport;\n\t\t} else {\n\t\t\tTone.Transport = new TransportConstructor();\n\t\t}\n\t});\n\n\tTone.Context.on(\"close\", function(context){\n\t\tif (context.transport && context.transport.isTransport){\n\t\t\tcontext.transport.dispose();\n\t\t}\n\t});\n\n\treturn Tone.Transport;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../component/Split\",\n\t\"../component/Merge\", \"../component/CrossFade\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.\n\t *\n\t *\t@constructor\n\t *\t@extends {Tone.Effect}\n\t */\n\tTone.StereoEffect = function(){\n\n\t\t//get the defaults\n\t\tTone.AudioNode.call(this);\n\t\tvar options = Tone.defaults(arguments, [\"wet\"], Tone.Effect);\n\t\tthis.createInsOuts(1, 1);\n\n\t\t/**\n\t\t *  the drywet knob to control the amount of effect\n\t\t *  @type {Tone.CrossFade}\n\t\t *  @private\n\t\t */\n\t\tthis._dryWet = new Tone.CrossFade(options.wet);\n\n\t\t/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.wet = this._dryWet.fade;\n\n\t\t/**\n\t\t *  then split it\n\t\t *  @type {Tone.Split}\n\t\t *  @private\n\t\t */\n\t\tthis._split = new Tone.Split();\n\n\t\t/**\n\t\t *  the effects send LEFT\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.effectSendL = this._split.left;\n\n\t\t/**\n\t\t *  the effects send RIGHT\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.effectSendR = this._split.right;\n\n\t\t/**\n\t\t *  the stereo effect merger\n\t\t *  @type {Tone.Merge}\n\t\t *  @private\n\t\t */\n\t\tthis._merge = new Tone.Merge();\n\n\t\t/**\n\t\t *  the effect return LEFT\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.effectReturnL = this._merge.left;\n\n\t\t/**\n\t\t *  the effect return RIGHT\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.effectReturnR = this._merge.right;\n\n\t\t//connections\n\t\tthis.input.connect(this._split);\n\t\t//dry wet connections\n\t\tthis.input.connect(this._dryWet, 0, 0);\n\t\tthis._merge.connect(this._dryWet, 0, 1);\n\t\tthis._dryWet.connect(this.output);\n\t\tthis._readOnly([\"wet\"]);\n\t};\n\n\tTone.extend(Tone.StereoEffect, Tone.Effect);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.StereoEffect} this\n\t */\n\tTone.StereoEffect.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._dryWet.dispose();\n\t\tthis._dryWet = null;\n\t\tthis._split.dispose();\n\t\tthis._split = null;\n\t\tthis._merge.dispose();\n\t\tthis._merge = null;\n\t\tthis.effectSendL = null;\n\t\tthis.effectSendR = null;\n\t\tthis.effectReturnL = null;\n\t\tthis.effectReturnR = null;\n\t\tthis._writable([\"wet\"]);\n\t\tthis.wet = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.StereoEffect;\n});\n","require(\"./component/AmplitudeEnvelope.js\");\nrequire(\"./component/Analyser.js\");\nrequire(\"./component/Channel.js\");\nrequire(\"./component/Compressor.js\");\nrequire(\"./component/CrossFade.js\");\nrequire(\"./component/Envelope.js\");\nrequire(\"./component/EQ3.js\");\nrequire(\"./component/FeedbackCombFilter.js\");\nrequire(\"./component/FFT.js\");\nrequire(\"./component/Filter.js\");\nrequire(\"./component/Follower.js\");\nrequire(\"./component/FrequencyEnvelope.js\");\nrequire(\"./component/Gate.js\");\nrequire(\"./component/LFO.js\");\nrequire(\"./component/Limiter.js\");\nrequire(\"./component/LowpassCombFilter.js\");\nrequire(\"./component/Merge.js\");\nrequire(\"./component/Meter.js\");\nrequire(\"./component/MidSideCompressor.js\");\nrequire(\"./component/MidSideMerge.js\");\nrequire(\"./component/MidSideSplit.js\");\nrequire(\"./component/Mono.js\");\nrequire(\"./component/MultibandCompressor.js\");\nrequire(\"./component/MultibandSplit.js\");\nrequire(\"./component/Panner.js\");\nrequire(\"./component/Panner3D.js\");\nrequire(\"./component/PanVol.js\");\nrequire(\"./component/ScaledEnvelope.js\");\nrequire(\"./component/Solo.js\");\nrequire(\"./component/Split.js\");\nrequire(\"./component/Volume.js\");\nrequire(\"./component/Waveform.js\");\nrequire(\"./control/CtrlInterpolate.js\");\nrequire(\"./control/CtrlMarkov.js\");\nrequire(\"./control/CtrlPattern.js\");\nrequire(\"./control/CtrlRandom.js\");\nrequire(\"./core/AudioNode.js\");\nrequire(\"./core/Buffer.js\");\nrequire(\"./core/Buffers.js\");\nrequire(\"./core/Bus.js\");\nrequire(\"./core/Clock.js\");\nrequire(\"./core/Context.js\");\nrequire(\"./core/Delay.js\");\nrequire(\"./core/Draw.js\");\nrequire(\"./core/Emitter.js\");\nrequire(\"./core/Gain.js\");\nrequire(\"./core/IntervalTimeline.js\");\nrequire(\"./core/Listener.js\");\nrequire(\"./core/Master.js\");\nrequire(\"./core/Offline.js\");\nrequire(\"./core/OfflineContext.js\");\nrequire(\"./core/Param.js\");\nrequire(\"./core/Timeline.js\");\nrequire(\"./core/TimelineState.js\");\nrequire(\"./core/Transport.js\");\nrequire(\"./core/TransportEvent.js\");\nrequire(\"./core/TransportRepeatEvent.js\");\nrequire(\"./effect/AutoFilter.js\");\nrequire(\"./effect/AutoPanner.js\");\nrequire(\"./effect/AutoWah.js\");\nrequire(\"./effect/BitCrusher.js\");\nrequire(\"./effect/Chebyshev.js\");\nrequire(\"./effect/Chorus.js\");\nrequire(\"./effect/Convolver.js\");\nrequire(\"./effect/Distortion.js\");\nrequire(\"./effect/Effect.js\");\nrequire(\"./effect/FeedbackDelay.js\");\nrequire(\"./effect/FeedbackEffect.js\");\nrequire(\"./effect/Freeverb.js\");\nrequire(\"./effect/JCReverb.js\");\nrequire(\"./effect/MidSideEffect.js\");\nrequire(\"./effect/Phaser.js\");\nrequire(\"./effect/PingPongDelay.js\");\nrequire(\"./effect/PitchShift.js\");\nrequire(\"./effect/Reverb.js\");\nrequire(\"./effect/StereoEffect.js\");\nrequire(\"./effect/StereoFeedbackEffect.js\");\nrequire(\"./effect/StereoWidener.js\");\nrequire(\"./effect/StereoXFeedbackEffect.js\");\nrequire(\"./effect/Tremolo.js\");\nrequire(\"./effect/Vibrato.js\");\nrequire(\"./event/Event.js\");\nrequire(\"./event/Loop.js\");\nrequire(\"./event/Part.js\");\nrequire(\"./event/Pattern.js\");\nrequire(\"./event/Sequence.js\");\nrequire(\"./instrument/AMSynth.js\");\nrequire(\"./instrument/DuoSynth.js\");\nrequire(\"./instrument/FMSynth.js\");\nrequire(\"./instrument/Instrument.js\");\nrequire(\"./instrument/MembraneSynth.js\");\nrequire(\"./instrument/MetalSynth.js\");\nrequire(\"./instrument/Monophonic.js\");\nrequire(\"./instrument/MonoSynth.js\");\nrequire(\"./instrument/NoiseSynth.js\");\nrequire(\"./instrument/PluckSynth.js\");\nrequire(\"./instrument/PolySynth.js\");\nrequire(\"./instrument/Sampler.js\");\nrequire(\"./instrument/Synth.js\");\nrequire(\"./shim/AnalyserNode.js\");\nrequire(\"./shim/AudioBuffer.js\");\nrequire(\"./shim/AudioContext.js\");\nrequire(\"./shim/BufferSourceNode.js\");\nrequire(\"./shim/ConstantSourceNode.js\");\nrequire(\"./shim/OfflineAudioContext.js\");\nrequire(\"./shim/OscillatorNode.js\");\nrequire(\"./shim/StereoPannerNode.js\");\nrequire(\"./shim/WaveShaperNode.js\");\nrequire(\"./signal/Abs.js\");\nrequire(\"./signal/Add.js\");\nrequire(\"./signal/AudioToGain.js\");\nrequire(\"./signal/EqualPowerGain.js\");\nrequire(\"./signal/GainToAudio.js\");\nrequire(\"./signal/GreaterThan.js\");\nrequire(\"./signal/GreaterThanZero.js\");\nrequire(\"./signal/Modulo.js\");\nrequire(\"./signal/Multiply.js\");\nrequire(\"./signal/Negate.js\");\nrequire(\"./signal/Normalize.js\");\nrequire(\"./signal/Pow.js\");\nrequire(\"./signal/Scale.js\");\nrequire(\"./signal/ScaleExp.js\");\nrequire(\"./signal/Signal.js\");\nrequire(\"./signal/SignalBase.js\");\nrequire(\"./signal/Subtract.js\");\nrequire(\"./signal/TickSignal.js\");\nrequire(\"./signal/TransportTimelineSignal.js\");\nrequire(\"./signal/WaveShaper.js\");\nrequire(\"./signal/Zero.js\");\nrequire(\"./source/AMOscillator.js\");\nrequire(\"./source/BufferSource.js\");\nrequire(\"./source/FatOscillator.js\");\nrequire(\"./source/FMOscillator.js\");\nrequire(\"./source/GrainPlayer.js\");\nrequire(\"./source/Noise.js\");\nrequire(\"./source/OmniOscillator.js\");\nrequire(\"./source/Oscillator.js\");\nrequire(\"./source/OscillatorNode.js\");\nrequire(\"./source/Player.js\");\nrequire(\"./source/Players.js\");\nrequire(\"./source/PulseOscillator.js\");\nrequire(\"./source/PWMOscillator.js\");\nrequire(\"./source/Source.js\");\nrequire(\"./source/TickSource.js\");\nrequire(\"./source/UserMedia.js\");\nrequire(\"./type/Frequency.js\");\nrequire(\"./type/Midi.js\");\nrequire(\"./type/Ticks.js\");\nrequire(\"./type/Time.js\");\nrequire(\"./type/TimeBase.js\");\nrequire(\"./type/TransportTime.js\");\nrequire(\"./type/Type.js\");\nmodule.exports = require(\"./core/Tone\");\n","define([\"../core/Tone\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A Timeline class for scheduling and maintaining state\n\t *         along a timeline. All events must have a \"time\" property.\n\t *         Internally, events are stored in time order for fast\n\t *         retrieval.\n\t *  @extends {Tone}\n\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t */\n\tTone.Timeline = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"memory\"], Tone.Timeline);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The array of scheduled timeline events\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._timeline = [];\n\n\t\t/**\n\t\t *  The memory of the timeline, i.e.\n\t\t *  how many events in the past it will retain\n\t\t *  @type {Positive}\n\t\t */\n\t\tthis.memory = options.memory;\n\t};\n\n\tTone.extend(Tone.Timeline);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t */\n\tTone.Timeline.defaults = {\n\t\t\"memory\" : Infinity\n\t};\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.Timeline#\n\t *  @name length\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Timeline.prototype, \"length\", {\n\t\tget : function(){\n\t\t\treturn this._timeline.length;\n\t\t}\n\t});\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param  {Object}  event  The event object to insert into the\n\t *                           timeline.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.add = function(event){\n\t\t//the event needs to have a time attribute\n\t\tif (Tone.isUndef(event.time)){\n\t\t\tthrow new Error(\"Tone.Timeline: events must have a time attribute\");\n\t\t}\n\t\tevent.time = event.time.valueOf();\n\t\tvar index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t//if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory){\n\t\t\tvar diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.remove = function(event){\n\t\tvar index = this._timeline.indexOf(event);\n\t\tif (index !== -1){\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @returns {Object} The event object set after that time.\n\t */\n\tTone.Timeline.prototype.get = function(time, comparator){\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar index = this._search(time, comparator);\n\t\tif (index !== -1){\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tTone.Timeline.prototype.peek = function(){\n\t\treturn this._timeline[0];\n\t};\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t *  @returns {Object} The first event object\n\t */\n\tTone.Timeline.prototype.shift = function(){\n\t\treturn this._timeline.shift();\n\t};\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @returns {Object} The event object after the given time\n\t */\n\tTone.Timeline.prototype.getAfter = function(time, comparator){\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar index = this._search(time, comparator);\n\t\tif (index + 1 < this._timeline.length){\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @returns {Object} The event object before the given time\n\t */\n\tTone.Timeline.prototype.getBefore = function(time, comparator){\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar len = this._timeline.length;\n\t\t//if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1][comparator] < time){\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tvar index = this._search(time, comparator);\n\t\tif (index - 1 >= 0){\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Cancel events after the given time\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.cancel = function(after){\n\t\tif (this._timeline.length > 1){\n\t\t\tvar index = this._search(after);\n\t\t\tif (index >= 0){\n\t\t\t\tif (this._timeline[index].time === after){\n\t\t\t\t\t//get the first item with that time\n\t\t\t\t\tfor (var i = index; i >= 0; i--){\n\t\t\t\t\t\tif (this._timeline[i].time === after){\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1){\n\t\t\t//the first item's time\n\t\t\tif (this._timeline[0].time >= after){\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.cancelBefore = function(time){\n\t\tvar index = this._search(time);\n\t\tif (index >= 0){\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tTone.Timeline.prototype.previousEvent = function(event){\n\t\tvar index = this._timeline.indexOf(event);\n\t\tif (index > 0){\n\t\t\treturn this._timeline[index-1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  {Number}  time\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @return  {Number} the index in the timeline array\n\t *  @private\n\t */\n\tTone.Timeline.prototype._search = function(time, comparator){\n\t\tif (this._timeline.length === 0){\n\t\t\treturn -1;\n\t\t}\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar beginning = 0;\n\t\tvar len = this._timeline.length;\n\t\tvar end = len;\n\t\tif (len > 0 && this._timeline[len - 1][comparator] <= time){\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end){\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tvar midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tvar event = this._timeline[midPoint];\n\t\t\tvar nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[comparator] === time){\n\t\t\t\t//choose the last one that has the same time\n\t\t\t\tfor (var i = midPoint; i < this._timeline.length; i++){\n\t\t\t\t\tvar testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[comparator] === time){\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[comparator] < time && nextEvent[comparator] > time){\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[comparator] > time){\n\t\t\t\t//search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t//search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t *  @param  {Function}  callback\n\t *  @param  {Number=}    lowerBound\n\t *  @param  {Number=}    upperBound\n\t *  @private\n\t */\n\tTone.Timeline.prototype._iterate = function(callback, lowerBound, upperBound){\n\t\tlowerBound = Tone.defaultArg(lowerBound, 0);\n\t\tupperBound = Tone.defaultArg(upperBound, this._timeline.length-1);\n\t\tthis._timeline.slice(lowerBound, upperBound+1).forEach(function(event){\n\t\t\tcallback.call(this, event);\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEach = function(callback){\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachBefore = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar upperBound = this._search(time);\n\t\tif (upperBound !== -1){\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachAfter = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime. \n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime. \n\t *  range = [startTime, endTime). \n\t *  @param  {Number}  startTime The time to check if items are before\n\t *  @param  {Number}  endTime The end of the test interval. \n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachBetween = function(startTime, endTime, callback){\n\t\tvar lowerBound = this._search(startTime);\n\t\tvar upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1){\n\t\t\tif (this._timeline[lowerBound].time !== startTime){\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t//exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime){\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1){\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachFrom = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar lowerBound = this._search(time);\n\t\t//work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time){\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachAtTime = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar upperBound = this._search(time);\n\t\tif (upperBound !== -1){\n\t\t\tthis._iterate(function(event){\n\t\t\t\tif (event.time === time){\n\t\t\t\t\tcallback.call(this, event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Timeline}  this\n\t */\n\tTone.Timeline.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._timeline = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Timeline;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../signal/Subtract\",\n\t\"../signal/EqualPowerGain\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t * @class  Tone.Crossfade provides equal power fading between two inputs.\n\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t *\n\t * @constructor\n\t * @extends {Tone.AudioNode}\n\t * @param {NormalRange} [initialFade=0.5]\n\t * @example\n\t * var crossFade = new Tone.CrossFade(0.5);\n\t * //connect effect A to crossfade from\n\t * //effect output 0 to crossfade input 0\n\t * effectA.connect(crossFade, 0, 0);\n\t * //connect effect B to crossfade from\n\t * //effect output 0 to crossfade input 1\n\t * effectB.connect(crossFade, 0, 1);\n\t * crossFade.fade.value = 0;\n\t * // ^ only effectA is output\n\t * crossFade.fade.value = 1;\n\t * // ^ only effectB is output\n\t * crossFade.fade.value = 0.5;\n\t * // ^ the two signals are mixed equally.\n\t */\n\tTone.CrossFade = function(initialFade){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(2, 1);\n\n\t\t/**\n\t\t *  Alias for <code>input[0]</code>.\n\t\t *  @type {Tone.Gain}\n\t\t */\n\t\tthis.a = this.input[0] = new Tone.Gain();\n\n\t\t/**\n\t\t *  Alias for <code>input[1]</code>.\n\t\t *  @type {Tone.Gain}\n\t\t */\n\t\tthis.b = this.input[1] = new Tone.Gain();\n\n\t\t/**\n\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t * \twill output 100% <code>input[0]</code> and\n\t\t * \ta value of 1 will output 100% <code>input[1]</code>.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.fade = new Tone.Signal(Tone.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  equal power gain cross fade\n\t\t *  @private\n\t\t *  @type {Tone.EqualPowerGain}\n\t\t */\n\t\tthis._equalPowerA = new Tone.EqualPowerGain();\n\n\t\t/**\n\t\t *  equal power gain cross fade\n\t\t *  @private\n\t\t *  @type {Tone.EqualPowerGain}\n\t\t */\n\t\tthis._equalPowerB = new Tone.EqualPowerGain();\n\n\t\t/**\n\t\t *  invert the incoming signal\n\t\t *  @private\n\t\t *  @type {Tone}\n\t\t */\n\t\tthis._one = this.context.getConstant(1);\n\n\t\t/**\n\t\t *  invert the incoming signal\n\t\t *  @private\n\t\t *  @type {Tone.Subtract}\n\t\t */\n\t\tthis._invert = new Tone.Subtract();\n\n\t\t//connections\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t\tthis.fade.chain(this._equalPowerB, this.b.gain);\n\t\tthis._one.connect(this._invert, 0, 0);\n\t\tthis.fade.connect(this._invert, 0, 1);\n\t\tthis._invert.chain(this._equalPowerA, this.a.gain);\n\t\tthis._readOnly(\"fade\");\n\t};\n\n\tTone.extend(Tone.CrossFade, Tone.AudioNode);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.CrossFade} this\n\t */\n\tTone.CrossFade.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable(\"fade\");\n\t\tthis._equalPowerA.dispose();\n\t\tthis._equalPowerA = null;\n\t\tthis._equalPowerB.dispose();\n\t\tthis._equalPowerB = null;\n\t\tthis.fade.dispose();\n\t\tthis.fade = null;\n\t\tthis._invert.dispose();\n\t\tthis._invert = null;\n\t\tthis._one = null;\n\t\tthis.a.dispose();\n\t\tthis.a = null;\n\t\tthis.b.dispose();\n\t\tthis.b = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.CrossFade;\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../signal/Signal\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t *         See Tone.GainToAudio.\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @example\n\t *  var a2g = new Tone.AudioToGain();\n\t */\n\tTone.AudioToGain = function(){\n\n\t\tTone.SignalBase.call(this);\n\t\t/**\n\t\t *  @type {WaveShaperNode}\n\t\t *  @private\n\t\t */\n\t\tthis._norm = this.input = this.output = new Tone.WaveShaper(function(x){\n\t\t\treturn (x + 1) / 2;\n\t\t});\n\t};\n\n\tTone.extend(Tone.AudioToGain, Tone.SignalBase);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.AudioToGain} this\n\t */\n\tTone.AudioToGain.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._norm.dispose();\n\t\tthis._norm = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AudioToGain;\n});\n","define([\"../core/Tone\", \"../type/Type\", \"../core/Master\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Base-class for all instruments\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t */\n\tTone.Instrument = function(options){\n\n\t\t//get the defaults\n\t\toptions = Tone.defaultArg(options, Tone.Instrument.defaults);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The output and volume triming node\n\t\t *  @type  {Tone.Volume}\n\t\t *  @private\n\t\t */\n\t\tthis._volume = this.output = new Tone.Volume(options.volume);\n\n\t\t/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */\n\t\tthis.volume = this._volume.volume;\n\t\tthis._readOnly(\"volume\");\n\n\t\t/**\n\t\t * Keep track of all events scheduled to the transport\n\t\t * when the instrument is 'synced'\n\t\t * @type {Array<Number>}\n\t\t * @private\n\t\t */\n\t\tthis._scheduledEvents = [];\n\t};\n\n\tTone.extend(Tone.Instrument, Tone.AudioNode);\n\n\t/**\n\t *  the default attributes\n\t *  @type {object}\n\t */\n\tTone.Instrument.defaults = {\n\t\t/** the volume of the output in decibels */\n\t\t\"volume\" : 0\n\t};\n\n\t/**\n\t *  @abstract\n\t *  @param {string|number} note the note to trigger\n\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t */\n\tTone.Instrument.prototype.triggerAttack = Tone.noOp;\n\n\t/**\n\t *  @abstract\n\t *  @param {Time} [time=now] when to trigger the release\n\t */\n\tTone.Instrument.prototype.triggerRelease = Tone.noOp;\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * instrument.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * instrument.triggerAttackRelease('C4', '8n', 0)\n\t * instrument.triggerAttackRelease('E4', '8n', '8n')\n\t * instrument.triggerAttackRelease('G4', '8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tTone.Instrument.prototype.sync = function(){\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param {String} method Which method to wrap and sync\n\t * @param  {Number} timePosition What position the time argument appears in\n\t * @private\n\t */\n\tTone.Instrument.prototype._syncMethod = function(method, timePosition){\n\t\tvar originalMethod = this[\"_original_\"+method] = this[method];\n\t\tthis[method] = function(){\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tvar time = args[timePosition];\n\t\t\tvar id = Tone.Transport.schedule(function(t){\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}.bind(this), time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t}.bind(this);\n\t};\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t * @returns {Tone.Instrument} this\n\t */\n\tTone.Instrument.prototype.unsync = function(){\n\t\tthis._scheduledEvents.forEach(function(id){\n\t\t\tTone.Transport.clear(id);\n\t\t});\n\t\tthis._scheduledEvents = [];\n\t\tif (this._original_triggerAttack){\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the attack and then the release after the duration.\n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0.\n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\tTone.Instrument.prototype.triggerAttackRelease = function(note, duration, time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Instrument} this\n\t */\n\tTone.Instrument.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis._writable([\"volume\"]);\n\t\tthis.volume = null;\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Instrument;\n});\n","define([\"../core/Tone\", \"../component/Envelope\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Envelope}\n\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from\n\t *                               0 to it's maximum value.\n\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t *                       \tto fall to the sustain value.\n\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t *                                \tthe release is triggered.\n\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t *  @example\n\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t * \t\"attack\": 0.1,\n\t * \t\"decay\": 0.2,\n\t * \t\"sustain\": 1.0,\n\t * \t\"release\": 0.8\n\t * }).toMaster();\n\t * //create an oscillator and connect it\n\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t * //trigger the envelopes attack and release \"8t\" apart\n\t * ampEnv.triggerAttackRelease(\"8t\");\n\t */\n\tTone.AmplitudeEnvelope = function(){\n\n\t\tTone.Envelope.apply(this, arguments);\n\n\t\t/**\n\t\t *  the input node\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.input = this.output = new Tone.Gain();\n\n\t\tthis._sig.connect(this.output.gain);\n\t};\n\n\tTone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t */\n\tTone.AmplitudeEnvelope.prototype.dispose = function(){\n\t\tTone.Envelope.prototype.dispose.call(this);\n\t\treturn this;\n\t};\n\n\treturn Tone.AmplitudeEnvelope;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Add a signal and a number or two signals. When no value is\n\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t *         the it will be added to the input.\n\t *  \n\t *  @constructor\n\t *  @extends {Tone.Signal}\n\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t *                         and second inputs. \n\t *  @example\n\t * var signal = new Tone.Signal(2);\n\t * var add = new Tone.Add(2);\n\t * signal.connect(add);\n\t * //the output of add equals 4\n\t *  @example\n\t * //if constructed with no arguments\n\t * //it will add the first and second inputs\n\t * var add = new Tone.Add();\n\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t * //the output of add equals 7. \n\t */\n\tTone.Add = function(value){\n\n\t\tTone.Signal.call(this);\n\t\tthis.createInsOuts(2, 0);\n\n\t\t/**\n\t\t *  the summing node\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\n\t\t/**\n\t\t *  @private\n\t\t *  @type {Tone.Signal}\n\t\t */\n\t\tthis._param = this.input[1] = new Tone.Signal(value);\n\n\t\tthis._param.connect(this._sum);\n\t\tthis.proxy = false;\n\t};\n\n\tTone.extend(Tone.Add, Tone.Signal);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Add} this\n\t */\n\tTone.Add.prototype.dispose = function(){\n\t\tTone.Signal.prototype.dispose.call(this);\n\t\tthis._sum.dispose();\n\t\tthis._sum = null;\n\t\treturn this;\n\t}; \n\n\treturn Tone.Add;\n});\n","define([\"../core/Tone\", \"../core/Gain\", \"../signal/SignalBase\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t *         it's own class is that many browsers optimize out Tone.Signal\n\t *         with a value of 0 and will not process nodes further down the graph.\n\t *  @extends {Tone.SignalBase}\n\t */\n\tTone.Zero = function(){\n\n\t\tTone.SignalBase.call(this);\n\n\t\t/**\n\t\t *  The gain node\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._gain = this.input = this.output = new Tone.Gain();\n\n\t\tthis.context.getConstant(0).connect(this._gain);\n\t};\n\n\tTone.extend(Tone.Zero, Tone.SignalBase);\n\n\t/**\n\t *  clean up\n\t *  @return  {Tone.Zero}  this\n\t */\n\tTone.Zero.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._gain.dispose();\n\t\tthis._gain = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Zero;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Decibels} [volume=0] the initial volume\n\t *  @example\n\t * var vol = new Tone.Volume(-12);\n\t * instrument.chain(vol, Tone.Master);\n\t */\n\tTone.Volume = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"volume\"], Tone.Volume);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t * the output node\n\t\t * @type {GainNode}\n\t\t * @private\n\t\t */\n\t\tthis.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\n\t\t/**\n\t\t * The unmuted volume\n\t\t * @type {Decibels}\n\t\t * @private\n\t\t */\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t/**\n\t\t *  The volume control in decibels.\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */\n\t\tthis.volume = this.output.gain;\n\n\t\tthis._readOnly(\"volume\");\n\n\t\t//set the mute initially\n\t\tthis.mute = options.mute;\n\t};\n\n\tTone.extend(Tone.Volume, Tone.AudioNode);\n\n\t/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.Volume.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.Volume#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tObject.defineProperty(Tone.Volume.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this.volume.value === -Infinity;\n\t\t},\n\t\tset : function(mute){\n\t\t\tif (!this.mute && mute){\n\t\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t\t//maybe it should ramp here?\n\t\t\t\tthis.volume.value = -Infinity;\n\t\t\t} else if (this.mute && !mute){\n\t\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Volume} this\n\t */\n\tTone.Volume.prototype.dispose = function(){\n\t\tthis.input.dispose();\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable(\"volume\");\n\t\tthis.volume.dispose();\n\t\tthis.volume = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Volume;\n});\n","define([\"../core/Tone\", \"../signal/Add\", \"../signal/Multiply\", \"../signal/Signal\"], function(Tone){\n\n\t\"use strict\";\n\t\n\t/**\n\t *  @class  Performs a linear scaling on an input signal.\n\t *          Scales a NormalRange input to between\n\t *          outputMin and outputMax.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t *  @example\n\t * var scale = new Tone.Scale(50, 100);\n\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t * //the output of scale equals 75\n\t */\n\tTone.Scale = function(outputMin, outputMax){\n\n\t\tTone.SignalBase.call(this);\n\t\t\n\t\t/** \n\t\t *  @private\n\t\t *  @type {number}\n\t\t */\n\t\tthis._outputMin = Tone.defaultArg(outputMin, 0);\n\n\t\t/** \n\t\t *  @private\n\t\t *  @type {number}\n\t\t */\n\t\tthis._outputMax = Tone.defaultArg(outputMax, 1);\n\n\t\t/** \n\t\t *  @private\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._scale = this.input = new Tone.Multiply(1);\n\t\t\n\t\t/** \n\t\t *  @private\n\t\t *  @type {Tone.Add}\n\t\t *  @private\n\t\t */\n\t\tthis._add = this.output = new Tone.Add(0);\n\n\t\tthis._scale.connect(this._add);\n\t\tthis._setRange();\n\t};\n\n\tTone.extend(Tone.Scale, Tone.SignalBase);\n\n\t/**\n\t * The minimum output value. This number is output when \n\t * the value input value is 0. \n\t * @memberOf Tone.Scale#\n\t * @type {number}\n\t * @name min\n\t */\n\tObject.defineProperty(Tone.Scale.prototype, \"min\", {\n\t\tget : function(){\n\t\t\treturn this._outputMin;\n\t\t},\n\t\tset : function(min){\n\t\t\tthis._outputMin = min;\n\t\t\tthis._setRange();\n\t\t}\n\t});\n\n\t/**\n\t * The maximum output value. This number is output when \n\t * the value input value is 1. \n\t * @memberOf Tone.Scale#\n\t * @type {number}\n\t * @name max\n\t */\n\tObject.defineProperty(Tone.Scale.prototype, \"max\", {\n\t\tget : function(){\n\t\t\treturn this._outputMax;\n\t\t},\n\t\tset : function(max){\n\t\t\tthis._outputMax = max;\n\t\t\tthis._setRange();\n\t\t}\n\t});\n\n\t/**\n\t *  set the values\n\t *  @private\n\t */\n\tTone.Scale.prototype._setRange = function(){\n\t\tthis._add.value = this._outputMin;\n\t\tthis._scale.value = this._outputMax - this._outputMin;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Scale} this\n\t */\n\tTone.Scale.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._add.dispose();\n\t\tthis._add = null;\n\t\tthis._scale.dispose();\n\t\tthis._scale = null;\n\t\treturn this;\n\t}; \n\n\treturn Tone.Scale;\n});\n","define([\"../core/Tone\", \"../instrument/Instrument\", \"../signal/Signal\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  This is an abstract base class for other monophonic instruments to \n\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t *          shouldn't be directly instantiated.\n\t *\n\t *  @constructor\n\t *  @abstract\n\t *  @extends {Tone.Instrument}\n\t */\n\tTone.Monophonic = function(options){\n\n\t\t//get the defaults\n\t\toptions = Tone.defaultArg(options, Tone.Monophonic.defaults);\n\t\tTone.Instrument.call(this, options);\n\n\t\t/**\n\t\t *  The glide time between notes. \n\t\t *  @type {Time}\n\t\t */\n\t\tthis.portamento = options.portamento;\n\t};\n\n\tTone.extend(Tone.Monophonic, Tone.Instrument);\n\n\t/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Monophonic.defaults = {\n\t\t\"portamento\" : 0\n\t};\n\n\t/**\n\t *  Trigger the attack of the note optionally with a given velocity. \n\t *  \n\t *  \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} [time=now]     When the note should start.\n\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t *                                determines how \"loud\" the note \n\t *                                will be triggered.\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\tTone.Monophonic.prototype.triggerAttack = function(note, time, velocity){\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(time, velocity);\n\t\tthis.setNote(note, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */\n\tTone.Monophonic.prototype.triggerRelease = function(time){\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  override this method with the actual method\n\t *  @abstract\n\t *  @private\n\t */\t\n\tTone.Monophonic.prototype._triggerEnvelopeAttack = function(){};\n\n\t/**\n\t *  override this method with the actual method\n\t *  @abstract\n\t *  @private\n\t */\t\n\tTone.Monophonic.prototype._triggerEnvelopeRelease = function(){};\n\n\t/**\n\t *  Get the level of the output at the given time. Measures\n\t *  the envelope(s) value at the time. \n\t *  @param {Time} time The time to query the envelope value\n\t *  @return {NormalRange} The output level between 0-1\n\t */\n\tTone.Monophonic.prototype.getLevelAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t};\n\n\t/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately. \n\t *  @param {Frequency} note The note to change to.\n\t *  @param  {Time} [time=now] The time when the note should be set. \n\t *  @returns {Tone.Monophonic} this\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */\n\tTone.Monophonic.prototype.setNote = function(note, time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this.portamento > 0 && this.getLevelAtTime(time) > 0.05){\n\t\t\tvar portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(note, portTime, time);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(note, time);\n\t\t}\n\t\treturn this;\n\t};\n\n\treturn Tone.Monophonic;\n});\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","define([\"../core/Tone\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Base class for all Signals. Used Internally.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t */\n\tTone.SignalBase = function(){\n\t\tTone.AudioNode.call(this);\n\t};\n\n\tTone.extend(Tone.SignalBase, Tone.AudioNode);\n\n\t/**\n\t *  When signals connect to other signals or AudioParams,\n\t *  they take over the output value of that signal or AudioParam.\n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */\n\tTone.SignalBase.prototype.connect = function(node, outputNumber, inputNumber){\n\t\t//zero it out so that the signal can have full control\n\t\tif ((Tone.Signal && Tone.Signal === node.constructor) ||\n\t\t\t\t(Tone.Param && Tone.Param === node.constructor)){\n\t\t\t//cancel changes\n\t\t\tnode._param.cancelScheduledValues(0);\n\t\t\t//reset the value\n\t\t\tnode._param.setValueAtTime(0, 0);\n\t\t\t//mark the value as overridden\n\t\t\tnode.overridden = true;\n\t\t} else if (node instanceof AudioParam){\n\t\t\tnode.cancelScheduledValues(0);\n\t\t\tnode.setValueAtTime(0, 0);\n\t\t}\n\t\tTone.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t\treturn this;\n\t};\n\n\treturn Tone.SignalBase;\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Emitter gives classes which extend it\n\t *         the ability to listen for and emit events.\n\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t *         MIT (c) 2011 Jerome Etienne.\n\t *\n\t *  @extends {Tone}\n\t */\n\tTone.Emitter = function(){\n\t\tTone.call(this);\n\t\t/**\n\t\t *  Contains all of the events.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t\tthis._events = {};\n\t};\n\n\tTone.extend(Tone.Emitter);\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.on = function(event, callback){\n\t\t//split the event\n\t\tvar events = event.split(/\\W+/);\n\t\tfor (var i = 0; i < events.length; i++){\n\t\t\tvar eventName = events[i];\n\t\t\tif (!this._events.hasOwnProperty(eventName)){\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.once = function(event, callback){\n\t\tvar boundCallback = function(){\n\t\t\t//invoke the callback\n\t\t\tcallback.apply(this, arguments);\n\t\t\tthis.off(event, boundCallback);\n\t\t}.bind(this);\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to\n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.off = function(event, callback){\n\t\tvar events = event.split(/\\W+/);\n\t\tfor (var ev = 0; ev < events.length; ev++){\n\t\t\tevent = events[ev];\n\t\t\tif (this._events.hasOwnProperty(event)){\n\t\t\t\tif (Tone.isUndef(callback)){\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tvar eventList = this._events[event];\n\t\t\t\t\tfor (var i = 0; i < eventList.length; i++){\n\t\t\t\t\t\tif (eventList[i] === callback){\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*} args... The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */\n\tTone.Emitter.prototype.emit = function(event){\n\t\tif (this._events){\n\t\t\tvar args = Array.apply(null, arguments).slice(1);\n\t\t\tif (this._events.hasOwnProperty(event)){\n\t\t\t\tvar eventList = this._events[event].slice(0);\n\t\t\t\tfor (var i = 0, len = eventList.length; i < len; i++){\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t *  @param  {Object|Function}  object  The object or class to extend.\n\t *  @returns {Tone.Emitter}\n\t */\n\tTone.Emitter.mixin = function(object){\n\t\tvar functions = [\"on\", \"once\", \"off\", \"emit\"];\n\t\tobject._events = {};\n\t\tfor (var i = 0; i < functions.length; i++){\n\t\t\tvar func = functions[i];\n\t\t\tvar emitterFunc = Tone.Emitter.prototype[func];\n\t\t\tobject[func] = emitterFunc;\n\t\t}\n\t\treturn Tone.Emitter;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Emitter}  this\n\t */\n\tTone.Emitter.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._events = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Emitter;\n});\n","define([\"../core/Tone\", \"../shim/OfflineAudioContext\"], function(Tone){\n\n\tif (Tone.supported){\n\t\tif (!Tone.global.hasOwnProperty(\"AudioContext\") && Tone.global.hasOwnProperty(\"webkitAudioContext\")){\n\t\t\tTone.global.AudioContext = Tone.global.webkitAudioContext;\n\t\t}\n\n\t\t//not functionally equivalent, but only an API placeholder\n\t\tif (!AudioContext.prototype.close){\n\t\t\tAudioContext.prototype.close = function(){\n\t\t\t\tif (Tone.isFunction(this.suspend)){\n\t\t\t\t\tthis.suspend();\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t};\n\t\t}\n\n\t\t//not functionally equivalent\n\t\tif (!AudioContext.prototype.resume){\n\t\t\tAudioContext.prototype.resume = function(){\n\t\t\t\t//play some silent audio to jumpstart the context\n\t\t\t\tvar buffer = this.createBuffer(1, 1, this.sampleRate);\n\t\t\t\tvar source = this.createBufferSource();\n\t\t\t\tsource.buffer = buffer;\n\t\t\t\tsource.connect(this.destination);\n\t\t\t\tsource.start(0);\n\t\t\t\treturn Promise.resolve();\n\t\t\t};\n\t\t}\n\n\t\t//createGain\n\t\tif (!AudioContext.prototype.createGain && AudioContext.prototype.createGainNode){\n\t\t\tAudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t\t}\n\n\t\t//createDelay\n\t\tif (!AudioContext.prototype.createDelay && AudioContext.prototype.createDelayNode){\n\t\t\tAudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t\t}\n\n\t\t//test decodeAudioData returns a promise\n\t\t// https://github.com/mohayonao/web-audio-api-shim/blob/master/src/AudioContext.js\n\t\t// MIT License (c) 2015 @mohayonao\n\t\tvar decodeAudioDataPromise = false;\n\t\tvar offlineContext = new OfflineAudioContext(1, 1, 44100);\n\t\tvar audioData = new Uint32Array([1179011410, 48, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 8, 0, 0, 0, 0]).buffer;\n\t\ttry {\n\t\t\tvar ret = offlineContext.decodeAudioData(audioData);\n\t\t\tif (ret && Tone.isFunction(ret.then)){\n\t\t\t\tdecodeAudioDataPromise = true;\n\t\t\t}\n\t\t} catch (e){\n\t\t\tdecodeAudioDataPromise = false;\n\t\t}\n\n\t\tif (!decodeAudioDataPromise){\n\t\t\tAudioContext.prototype._native_decodeAudioData = AudioContext.prototype.decodeAudioData;\n\t\t\tAudioContext.prototype.decodeAudioData = function(audioData){\n\t\t\t\treturn new Promise(function(success, error){\n\t\t\t\t\tthis._native_decodeAudioData(audioData, success, error);\n\t\t\t\t}.bind(this));\n\t\t\t};\n\t\t}\n\t}\n});\n","define([\"../core/Tone\", \"../core/Timeline\", \"../type/Type\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t *          and <code>getValueAtTime(time)</code>.\n\t *\n\t *  @extends {Tone.Timeline}\n\t *  @param {String} initial The initial state of the TimelineState. \n\t *                          Defaults to <code>undefined</code>\n\t */\n\tTone.TimelineState = function(initial){\n\n\t\tTone.Timeline.call(this);\n\n\t\t/**\n\t\t *  The initial state\n\t\t *  @private\n\t\t *  @type {String}\n\t\t */\n\t\tthis._initial = initial;\n\t};\n\n\tTone.extend(Tone.TimelineState, Tone.Timeline);\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t */\n\tTone.TimelineState.prototype.getValueAtTime = function(time){\n\t\tvar event = this.get(time);\n\t\tif (event !== null){\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t};\n\n\t/**\n\t *  Add a state to the timeline.\n\t *  @param  {String}  state The name of the state to set.\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.TimelineState} this\n\t */\n\tTone.TimelineState.prototype.setStateAtTime = function(state, time){\n\t\t//all state changes need to be >= the previous state time\n\t\t//TODO throw error if time < the previous event time\n\t\tthis.add({\n\t\t\t\"state\" : state,\n\t\t\t\"time\" : time\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Return the event before the time with the given state\n\t *  @param {Tone.State} state The state to look for\n\t *  @param  {Time}  time  When to check before\t\t\t\n\t *  @return  {Object}  The event with the given state before the time\n\t */\n\tTone.TimelineState.prototype.getLastState = function(state, time){\n\t\ttime = this.toSeconds(time);\n\t\tvar index = this._search(time);\n\t\tfor (var i = index; i >= 0; i--){\n\t\t\tvar event = this._timeline[i];\n\t\t\tif (event.state === state){\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  Return the event after the time with the given state\n\t *  @param {Tone.State} state The state to look for\n\t *  @param  {Time}  time  When to check from\n\t *  @return  {Object}  The event with the given state after the time\n\t */\n\tTone.TimelineState.prototype.getNextState = function(state, time){\n\t\ttime = this.toSeconds(time);\n\t\tvar index = this._search(time);\n\t\tif (index !== -1){\n\t\t\tfor (var i = index; i < this._timeline.length; i++){\n\t\t\t\tvar event = this._timeline[i];\n\t\t\t\tif (event.state === state){\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\treturn Tone.TimelineState;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../signal/Signal\", \n\t\"../signal/Multiply\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\t\n\t/**\n\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t * \t        audio source and its own output. This is a base-class\n\t * \t        for feedback effects. \n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t */\n\tTone.FeedbackEffect = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"feedback\"], Tone.FeedbackEffect);\n\t\tTone.Effect.call(this, options);\n\t\t\n\t\t/**\n\t\t *  the gain which controls the feedback\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  The amount of signal which is fed back into the effect input. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.feedback = this._feedbackGain.gain;\n\n\t\t//the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t\tthis._readOnly([\"feedback\"]);\n\t};\n\n\tTone.extend(Tone.FeedbackEffect, Tone.Effect);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.FeedbackEffect.defaults = {\n\t\t\"feedback\" : 0.125\n\t};\n\n\t/**\n\t *  Clean up. \n\t *  @returns {Tone.FeedbackEffect} this\n\t */\n\tTone.FeedbackEffect.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._writable([\"feedback\"]);\n\t\tthis._feedbackGain.dispose();\n\t\tthis._feedbackGain = null;\n\t\tthis.feedback = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.FeedbackEffect;\n});\n","define([\"../core/Tone\", \"../core/Buffer\", \"../source/Source\", \"../core/Gain\",\n\t\"../core/AudioNode\", \"../shim/BufferSourceNode\"], function(Tone){\n\n\t/**\n\t *  @class Wrapper around the native BufferSourceNode.\n\t *  @extends {Tone.AudioNode}\n\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t *  @param  {Function}  onload  The callback to invoke when the\n\t *                               buffer is done playing.\n\t */\n\tTone.BufferSource = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"buffer\", \"onload\"], Tone.BufferSource);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The callback to invoke after the\n\t\t *  buffer source is done playing.\n\t\t *  @type  {Function}\n\t\t */\n\t\tthis.onended = options.onended;\n\n\t\t/**\n\t\t *  The time that the buffer was started.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._startTime = -1;\n\n\t\t/**\n\t\t *  An additional flag if the actual BufferSourceNode\n\t\t *  has been started. b/c stopping an unstarted buffer\n\t\t *  will throw it into an invalid state\n\t\t *  @type  {Boolean}\n\t\t *  @private\n\t\t */\n\t\tthis._sourceStarted = false;\n\n\t\t/**\n\t\t *  Flag if the source has already been stopped\n\t\t *  @type  {Boolean}\n\t\t *  @private\n\t\t */\n\t\tthis._sourceStopped = false;\n\n\t\t/**\n\t\t *  The time that the buffer is scheduled to stop.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._stopTime = -1;\n\n\t\t/**\n\t\t *  The gain node which envelopes the BufferSource\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._gainNode = this.output = new Tone.Gain(0);\n\n\t\t/**\n\t\t *  The buffer source\n\t\t *  @type  {AudioBufferSourceNode}\n\t\t *  @private\n\t\t */\n\t\tthis._source = this.context.createBufferSource();\n\t\tthis._source.connect(this._gainNode);\n\t\tthis._source.onended = this._onended.bind(this);\n\n\t\t/**\n\t\t * The private buffer instance\n\t\t * @type {Tone.Buffer}\n\t\t * @private\n\t\t */\n\t\tthis._buffer = new Tone.Buffer(options.buffer, options.onload);\n\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t\tthis.playbackRate = new Tone.Param({\n\t\t\tparam : this._source.playbackRate,\n\t\t\tunits : Tone.Type.Positive,\n\t\t\tvalue : options.playbackRate\n\t\t});\n\n\t\t/**\n\t\t *  The fadeIn time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.fadeIn = options.fadeIn;\n\n\t\t/**\n\t\t *  The fadeOut time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.fadeOut = options.fadeOut;\n\n\t\t/**\n\t\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t\t * @type {String}\n\t\t */\n\t\tthis.curve = options.curve;\n\n\t\t/**\n\t\t * The onended timeout\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._onendedTimeout = -1;\n\n\t\t//set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t};\n\n\tTone.extend(Tone.BufferSource, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.BufferSource.defaults = {\n\t\t\"onended\" : Tone.noOp,\n\t\t\"onload\" : Tone.noOp,\n\t\t\"loop\" : false,\n\t\t\"loopStart\" : 0,\n\t\t\"loopEnd\" : 0,\n\t\t\"fadeIn\" : 0,\n\t\t\"fadeOut\" : 0,\n\t\t\"curve\" : \"linear\",\n\t\t\"playbackRate\" : 1\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.BufferSource#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this.getStateAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  Get the playback state at the given time\n\t *  @param  {Time}  time  The time to test the state at\n\t *  @return  {Tone.State}  The playback state. \n\t */\n\tTone.BufferSource.prototype.getStateAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && \n\t\t\tthis._startTime <= time && \n\t\t\t(this._stopTime === -1 || time < this._stopTime) && \n\t\t\t!this._sourceStopped){\n\t\t\treturn Tone.State.Started;\n\t\t} else {\n\t\t\treturn Tone.State.Stopped;\n\t\t}\n\t};\n\n\t/**\n\t *  Start the buffer\n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length\n\t *                                of the sample (minus any offset)\n\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t *  @return  {Tone.BufferSource}  this\n\t */\n\tTone.BufferSource.prototype.start = function(time, offset, duration, gain){\n\t\tthis.log(\"start\", time, offset, duration, gain);\n\t\tthis.assert(this._startTime === -1, \"can only be started once\");\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tthis.assert(!this._sourceStopped, \"source is already stopped\");\n\n\t\ttime = this.toSeconds(time);\n\t\t//if it's a loop the default offset is the loopstart point\n\t\tif (this.loop){\n\t\t\toffset = Tone.defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t//otherwise the default offset is 0\n\t\t\toffset = Tone.defaultArg(offset, 0);\n\t\t}\n\t\toffset = this.toSeconds(offset);\n\t\t//make sure the offset is not less than 0\n\t\toffset = Math.max(offset, 0);\n\n\t\tgain = Tone.defaultArg(gain, 1);\n\n\t\t//apply a fade in envelope\n\t\tvar fadeInTime = this.toSeconds(this.fadeIn);\n\t\tif (fadeInTime > 0){\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this.curve === \"linear\"){\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\n\t\tthis._startTime = time;\n\n\t\t//if a duration is given, schedule a stop\n\t\tif (Tone.isDefined(duration)){\n\t\t\tvar computedDur = this.toSeconds(duration);\n\t\t\t//make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\n\t\t\tthis.stop(time + computedDur);\n\t\t}\n\n\t\t//start the buffer source\n\t\tif (this.loop){\n\t\t\t//modify the offset if it's greater than the loop time\n\t\t\tvar loopEnd = this.loopEnd || this.buffer.duration;\n\t\t\tvar loopStart = this.loopStart;\n\t\t\tvar loopDuration = loopEnd - loopStart;\n\t\t\t//move the offset back\n\t\t\tif (offset >= loopEnd){\n\t\t\t\toffset = ((offset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t}\n\t\tthis._source.buffer = this.buffer.get();\n\t\tthis._source.loopEnd = this.loopEnd || this.buffer.duration;\n\t\tif (offset < this.buffer.duration){\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(time, offset);\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the buffer. Optionally add a ramp time to fade the\n\t *  buffer out. If there is a fadeOut ramp, the ramp starts at \n\t *  the given time and ends at time + fadeOut. \n\t *  @param  {Time=}  time         The time the buffer should stop.\n\t *  @return  {Tone.BufferSource}  this\n\t */\n\tTone.BufferSource.prototype.stop = function(time){\n\t\tthis.log(\"stop\", time);\n\t\tthis.assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tthis.assert(!this._sourceStopped, \"source is already stopped\");\n\n\t\ttime = this.toSeconds(time);\n\n\t\t//if the event has already been scheduled, clear it\n\t\tif (this._stopTime !== -1){\n\t\t\tthis.cancelStop();\n\t\t}\n\n\t\t//the fadeOut time\n\t\tvar fadeOutTime = this.toSeconds(this.fadeOut);\n\n\t\t//cancel the previous curve\n\t\tthis._stopTime = time + fadeOutTime;\n\n\t\tif (fadeOutTime > 0){\n\t\t\t//start the fade out curve at the given time\n\t\t\tif (this.curve === \"linear\"){\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t//stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\n\t\tTone.context.clearTimeout(this._onendedTimeout);\n\t\tthis._onendedTimeout = Tone.context.setTimeout(this._onended.bind(this), this._stopTime - this.now());\n\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t *  @return  {Tone.BufferSource}  this\n\t */\n\tTone.BufferSource.prototype.cancelStop = function(){\n\t\tif (this._startTime !== -1 && !this._sourceStopped){\n\t\t\t//cancel the stop envelope\n\t\t\tvar fadeInTime = this.toSeconds(this.fadeIn);\n\t\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + fadeInTime + this.sampleTime);\n\t\t\tthis.context.clearTimeout(this._onendedTimeout);\n\t\t\tthis._stopTime = -1;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Internal callback when the buffer is ended.\n\t *  Invokes `onended` and disposes the node.\n\t *  @private\n\t */\n\tTone.BufferSource.prototype._onended = function(){\n\t\tif (!this._sourceStopped){\n\t\t\tthis._sourceStopped = true;\n\t\t\t//allow additional time for the exponential curve to fully decay\n\t\t\tvar additionalTail = this.curve === \"exponential\" ? this.fadeOut * 2 : 0;\n\t\t\tif (this._sourceStarted && this._stopTime !== -1){\n\t\t\t\tthis._source.stop(this._stopTime + additionalTail);\n\t\t\t}\n\t\t\tthis.onended(this);\n\t\t}\n\t};\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t * @memberOf Tone.BufferSource#\n\t * @type {Time}\n\t * @name loopStart\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn this._source.loopStart;\n\t\t},\n\t\tset : function(loopStart){\n\t\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t\t}\n\t});\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t * @memberOf Tone.BufferSource#\n\t * @type {Time}\n\t * @name loopEnd\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn this._source.loopEnd;\n\t\t},\n\t\tset : function(loopEnd){\n\t\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t\t}\n\t});\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t * @memberOf Tone.BufferSource#\n\t * @type {Tone.Buffer}\n\t * @name buffer\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"buffer\", {\n\t\tget : function(){\n\t\t\treturn this._buffer;\n\t\t},\n\t\tset : function(buffer){\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t});\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t * @memberOf Tone.BufferSource#\n\t * @type {Boolean}\n\t * @name loop\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"loop\", {\n\t\tget : function(){\n\t\t\treturn this._source.loop;\n\t\t},\n\t\tset : function(loop){\n\t\t\tthis._source.loop = loop;\n\t\t\tthis.cancelStop();\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.BufferSource}  this\n\t */\n\tTone.BufferSource.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.onended = null;\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._source = null;\n\t\tthis._gainNode.dispose();\n\t\tthis._gainNode = null;\n\t\tthis._buffer.dispose();\n\t\tthis._buffer = null;\n\t\tthis._startTime = -1;\n\t\tthis.playbackRate = null;\n\t\tTone.context.clearTimeout(this._onendedTimeout);\n\t\treturn this;\n\t};\n\n\treturn Tone.BufferSource;\n});\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","define([\"../core/Tone\", \"../signal/Signal\",\n\t\"../signal/Pow\", \"../type/Type\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t *          envelope generator. Tone.Envelope outputs a signal which\n\t *          can be connected to an AudioParam or Tone.Signal.\n\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from\n\t *                         0 to it's maximum value.\n\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t *                       \tto fall to the sustain value. Value must be greater than 0.\n\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t *                                \tthe release is triggered.\n\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                         \tValue must be greater than 0.\n\t *  @example\n\t * //an amplitude envelope\n\t * var gainNode = Tone.context.createGain();\n\t * var env = new Tone.Envelope({\n\t * \t\"attack\" : 0.1,\n\t * \t\"decay\" : 0.2,\n\t * \t\"sustain\" : 1,\n\t * \t\"release\" : 0.8,\n\t * });\n\t * env.connect(gainNode.gain);\n\t */\n\tTone.Envelope = function(){\n\n\t\t//get all of the defaults\n\t\tvar options = Tone.defaults(arguments, [\"attack\", \"decay\", \"sustain\", \"release\"], Tone.Envelope);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t *  time it takes for the envelope to reach it's maximum value.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.attack = options.attack;\n\n\t\t/**\n\t\t *  After the attack portion of the envelope, the value will fall\n\t\t *  over the duration of the decay time to it's sustain value.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.decay = options.decay;\n\n\t\t/**\n\t\t * \tThe sustain value is the value\n\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t * \tcalled, but before triggerRelease is invoked.\n\t\t *  @type {NormalRange}\n\t\t */\n\t\tthis.sustain = options.sustain;\n\n\t\t/**\n\t\t *  After triggerRelease is called, the envelope's\n\t\t *  value will fall to it's miminum value over the\n\t\t *  duration of the release time.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.release = options.release;\n\n\t\t/**\n\t\t *  the next time the envelope is at standby\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._attackCurve = \"linear\";\n\n\t\t/**\n\t\t *  the next time the envelope is at standby\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._releaseCurve = \"exponential\";\n\n\t\t/**\n\t\t *  the signal\n\t\t *  @type {Tone.Signal}\n\t\t *  @private\n\t\t */\n\t\tthis._sig = this.output = new Tone.Signal(0);\n\n\t\t//set the attackCurve initially\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t};\n\n\tTone.extend(Tone.Envelope, Tone.AudioNode);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t */\n\tTone.Envelope.defaults = {\n\t\t\"attack\" : 0.01,\n\t\t\"decay\" : 0.1,\n\t\t\"sustain\" : 0.5,\n\t\t\"release\" : 1,\n\t\t\"attackCurve\" : \"linear\",\n\t\t\"decayCurve\" : \"exponential\",\n\t\t\"releaseCurve\" : \"exponential\",\n\t};\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * syncronizing visual output to the envelope.\n\t * @memberOf Tone.Envelope#\n\t * @type {Number}\n\t * @name value\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Envelope.prototype, \"value\", {\n\t\tget : function(){\n\t\t\treturn this.getValueAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  Get the curve\n\t *  @param  {Array|String}  curve\n\t *  @param  {String}  direction  In/Out\n\t *  @return  {String}  The curve name\n\t *  @private\n\t */\n\tTone.Envelope.prototype._getCurve = function(curve, direction){\n\t\tif (Tone.isString(curve)){\n\t\t\treturn curve;\n\t\t} else if (Tone.isArray(curve)){\n\t\t\t//look up the name in the curves array\n\t\t\tfor (var t in Tone.Envelope.Type){\n\t\t\t\tif (Tone.Envelope.Type[t][direction] === curve){\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//otherwise just return the array\n\t\t\treturn curve;\n\t\t}\n\t};\n\n\t/**\n\t *  Assign a the curve to the given name using the direction\n\t *  @param  {String}  name\n\t *  @param  {String}  direction In/Out\n\t *  @param  {Array}  curve\n\t *  @private\n\t */\n\tTone.Envelope.prototype._setCurve = function(name, direction, curve){\n\t\t//check if it's a valid type\n\t\tif (Tone.Envelope.Type.hasOwnProperty(curve)){\n\t\t\tvar curveDef = Tone.Envelope.Type[curve];\n\t\t\tif (Tone.isObject(curveDef)){\n\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (Tone.isArray(curve)){\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Tone.Envelope: invalid curve: \" + curve);\n\t\t}\n\t};\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * <ul>\n\t *   <li>linear</li>\n\t *   <li>exponential</li>\n\t *   <li>sine</li>\n\t *   <li>cosine</li>\n\t *   <li>bounce</li>\n\t *   <li>ripple</li>\n\t *   <li>step</li>\n\t * </ul>\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */\n\tObject.defineProperty(Tone.Envelope.prototype, \"attackCurve\", {\n\t\tget : function(){\n\t\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t\t},\n\t\tset : function(curve){\n\t\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t\t}\n\t});\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */\n\tObject.defineProperty(Tone.Envelope.prototype, \"releaseCurve\", {\n\t\tget : function(){\n\t\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t\t},\n\t\tset : function(curve){\n\t\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t\t}\n\t});\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @memberOf Tone.Envelope#\n\t * @type {String}\n\t * @name decayCurve\n\t * @example\n\t * env.decayCurve = \"linear\";\n\t */\n\tObject.defineProperty(Tone.Envelope.prototype, \"decayCurve\", {\n\t\tget : function(){\n\t\t\treturn this._decayCurve;\n\t\t},\n\t\tset : function(curve){\n\t\t\tvar curves = [\"linear\", \"exponential\"];\n\t\t\tif (!curves.includes(curve)){\n\t\t\t\tthrow new Error(\"Tone.Envelope: invalid curve: \" + curve);\n\t\t\t} else {\n\t\t\t\tthis._decayCurve = curve;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Trigger the attack/decay portion of the ADSR envelope.\n\t *  @param  {Time} [time=now] When the attack should start.\n\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t *                               number between 0-1\n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\tTone.Envelope.prototype.triggerAttack = function(time, velocity){\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tvar originalAttack = this.toSeconds(this.attack);\n\t\tvar attack = originalAttack;\n\t\tvar decay = this.toSeconds(this.decay);\n\t\tvelocity = Tone.defaultArg(velocity, 1);\n\t\t//check if it's not a complete attack\n\t\tvar currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0){\n\t\t\t//subtract the current value from the attack time\n\t\t\tvar attackRate = 1 / attack;\n\t\t\tvar remainingDistance = 1 - currentValue;\n\t\t\t//the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t//attack\n\t\tif (this._attackCurve === \"linear\"){\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\"){\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else if (attack > 0){\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tvar curve = this._attackCurve;\n\t\t\t//find the starting position in the curve\n\t\t\tfor (var i = 1; i < curve.length; i++){\n\t\t\t\t//the starting index is between the two values\n\t\t\t\tif (curve[i-1] <= currentValue && currentValue <= curve[i]){\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t//the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t//decay\n\t\tif (decay){\n\t\t\tvar decayValue = velocity * this.sustain;\n\t\t\tvar decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\"){\n\t\t\t\tthis._sig.linearRampTo(decayValue, decay, decayStart+this.sampleTime);\n\t\t\t} else if (this._decayCurve === \"exponential\"){\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Triggers the release of the envelope.\n\t *  @param  {Time} [time=now] When the release portion of the envelope should start.\n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */\n\tTone.Envelope.prototype.triggerRelease = function(time){\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tvar currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0){\n\t\t\tvar release = this.toSeconds(this.release);\n\t\t\tif (this._releaseCurve === \"linear\"){\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\"){\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tvar curve = this._releaseCurve;\n\t\t\t\tif (Tone.isArray(curve)){\n\t\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\t\tthis._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */\n\tTone.Envelope.prototype.getValueAtTime = function(time){\n\t\treturn this._sig.getValueAtTime(time);\n\t};\n\n\t/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease.\n\t *  @param {Time} duration The duration of the sustain.\n\t *  @param {Time} [time=now] When the attack should be triggered.\n\t *  @param {number} [velocity=1] The velocity of the envelope.\n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */\n\tTone.Envelope.prototype.triggerAttackRelease = function(duration, time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t *  @param  {Time} after\n\t *  @returns {Tone.Envelope} this\n\t */\n\tTone.Envelope.prototype.cancel = function(after){\n\t\tthis._sig.cancelScheduledValues(after);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Borrows the connect method from Tone.Signal.\n\t *  @function\n\t *  @private\n\t */\n\tTone.Envelope.prototype.connect = Tone.SignalBase.prototype.connect;\n\n\t/**\n \t *  Generate some complex envelope curves.\n \t */\n\t(function _createCurves(){\n\n\t\tvar curveLen = 128;\n\n\t\tvar i, k;\n\n\t\t//cosine curve\n\t\tvar cosineCurve = [];\n\t\tfor (i = 0; i < curveLen; i++){\n\t\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t\t}\n\n\t\t//ripple curve\n\t\tvar rippleCurve = [];\n\t\tvar rippleCurveFreq = 6.4;\n\t\tfor (i = 0; i < curveLen - 1; i++){\n\t\t\tk = (i / (curveLen - 1));\n\t\t\tvar sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\t\trippleCurve[i] = sineWave/10 + k * 0.83;\n\t\t}\n\t\trippleCurve[curveLen - 1] = 1;\n\n\t\t//stairs curve\n\t\tvar stairsCurve = [];\n\t\tvar steps = 5;\n\t\tfor (i = 0; i < curveLen; i++){\n\t\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t\t}\n\n\t\t//in-out easing curve\n\t\tvar sineCurve = [];\n\t\tfor (i = 0; i < curveLen; i++){\n\t\t\tk = i / (curveLen - 1);\n\t\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t\t}\n\n\t\t//a bounce curve\n\t\tvar bounceCurve = [];\n\t\tfor (i = 0; i < curveLen; i++){\n\t\t\tk = i / (curveLen - 1);\n\t\t\tvar freq = Math.pow(k, 3) * 4 + 0.2;\n\t\t\tvar val = Math.cos(freq * Math.PI * 2 * k);\n\t\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t\t}\n\n\t\t/**\n\t\t *  Invert a value curve to make it work for the release\n\t\t *  @private\n\t\t */\n\t\tfunction invertCurve(curve){\n\t\t\tvar out = new Array(curve.length);\n\t\t\tfor (var j = 0; j < curve.length; j++){\n\t\t\t\tout[j] = 1 - curve[j];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t *  reverse the curve\n\t\t *  @private\n\t\t */\n\t\tfunction reverseCurve(curve){\n\t\t\treturn curve.slice(0).reverse();\n\t\t}\n\n\t\t/**\n\t\t *  attack and release curve arrays\n\t\t *  @type  {Object}\n\t\t *  @private\n\t\t */\n\t\tTone.Envelope.Type = {\n\t\t\t\"linear\" : \"linear\",\n\t\t\t\"exponential\" : \"exponential\",\n\t\t\t\"bounce\" : {\n\t\t\t\tIn : invertCurve(bounceCurve),\n\t\t\t\tOut : bounceCurve\n\t\t\t},\n\t\t\t\"cosine\" : {\n\t\t\t\tIn : cosineCurve,\n\t\t\t\tOut : reverseCurve(cosineCurve)\n\t\t\t},\n\t\t\t\"step\" : {\n\t\t\t\tIn : stairsCurve,\n\t\t\t\tOut : invertCurve(stairsCurve)\n\t\t\t},\n\t\t\t\"ripple\" : {\n\t\t\t\tIn : rippleCurve,\n\t\t\t\tOut : invertCurve(rippleCurve)\n\t\t\t},\n\t\t\t\"sine\" : {\n\t\t\t\tIn : sineCurve,\n\t\t\t\tOut : invertCurve(sineCurve)\n\t\t\t}\n\t\t};\n\n\t})();\n\n\t/**\n\t *  Disconnect and dispose.\n\t *  @returns {Tone.Envelope} this\n\t */\n\tTone.Envelope.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._sig.dispose();\n\t\tthis._sig = null;\n\t\tthis._attackCurve = null;\n\t\tthis._releaseCurve = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Envelope;\n});\n","define([\"../core/Tone\", \"../type/TimeBase\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Frequency is a primitive type for encoding Frequency values.\n\t *         Eventually all time values are evaluated to hertz\n\t *         using the `eval` method.\n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * Tone.Frequency(\"C3\") // 261\n\t * Tone.Frequency(38, \"midi\") //\n\t * Tone.Frequency(\"C3\").transpose(4);\n\t */\n\tTone.Frequency = function(val, units){\n\t\tif (this instanceof Tone.Frequency){\n\n\t\t\tTone.TimeBase.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Frequency(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Frequency, Tone.TimeBase);\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tTone.Frequency.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n\t\t\"midi\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\tmethod : function(value){\n\t\t\t\tif (this._defaultUnits === \"midi\"){\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn Tone.Frequency.mtof(value);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"note\" : {\n\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\tmethod : function(pitch, octave){\n\t\t\t\tvar index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\tvar noteNumber = index + (parseInt(octave) + 1) * 12;\n\t\t\t\tif (this._defaultUnits === \"midi\"){\n\t\t\t\t\treturn noteNumber;\n\t\t\t\t} else {\n\t\t\t\t\treturn Tone.Frequency.mtof(noteNumber);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"tr\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\tmethod : function(m, q, s){\n\t\t\t\tvar total = 1;\n\t\t\t\tif (m && m !== \"0\"){\n\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t}\n\t\t\t\tif (q && q !== \"0\"){\n\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t}\n\t\t\t\tif (s && s !== \"0\"){\n\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t}\n\t\t\t\treturn total;\n\t\t\t}\n\t\t}\n\t});\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @param  {Interval}  interval\n\t *  @return  {Tone.Frequency} A new transposed frequency\n\t *  @example\n\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\tTone.Frequency.prototype.transpose = function(interval){\n\t\treturn new this.constructor(this.valueOf() * Tone.intervalToFrequencyRatio(interval));\n\t};\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @param  {Array}  intervals\n\t *  @return  {Array<Tone.Frequency>} Returns an array of Frequencies\n\t *  @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tTone.Frequency.prototype.harmonize = function(intervals){\n\t\treturn intervals.map(function(interval){\n\t\t\treturn this.transpose(interval);\n\t\t}.bind(this));\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t */\n\tTone.Frequency.prototype.toMidi = function(){\n\t\treturn Tone.Frequency.ftom(this.valueOf());\n\t};\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\tTone.Frequency.prototype.toNote = function(){\n\t\tvar freq = this.toFrequency();\n\t\tvar log = Math.log2(freq / Tone.Frequency.A4);\n\t\tvar noteNumber = Math.round(12 * log) + 57;\n\t\tvar octave = Math.floor(noteNumber/12);\n\t\tif (octave < 0){\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tvar noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t};\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t *  @return  {Seconds}\n\t */\n\tTone.Frequency.prototype.toSeconds = function(){\n\t\treturn 1 / Tone.TimeBase.prototype.toSeconds.call(this);\n\t};\n\n\t/**\n\t *  Return the value in Hertz\n\t *  @return  {Frequency}\n\t */\n\tTone.Frequency.prototype.toFrequency = function(){\n\t\treturn Tone.TimeBase.prototype.toFrequency.call(this);\n\t};\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t *  @return  {Ticks}\n\t */\n\tTone.Frequency.prototype.toTicks = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * Tone.Transport.PPQ);\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._noArg = function(){\n\t\treturn 0;\n\t};\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t *  @param {Frequency} freq\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._frequencyToUnits = function(freq){\n\t\treturn freq;\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._ticksToUnits = function(ticks){\n\t\treturn 1 / ((ticks * 60) / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._beatsToUnits = function(beats){\n\t\treturn 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._secondsToUnits = function(seconds){\n\t\treturn 1 / seconds;\n\t};\n\n\t/**\n\t *  The default units if none are given.\n\t *  @private\n\t */\n\tTone.Frequency.prototype._defaultUnits = \"hz\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tFREQUENCY CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Note to scale index\n\t *  @type  {Object}\n\t */\n\tvar noteToScaleIndex = {\n\t\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n\t};\n\n\t/**\n\t *  scale index to note (sharps)\n\t *  @type  {Array}\n\t */\n\tvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n\t/**\n\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t *  A4's values in Hertz.\n\t *  @type {Frequency}\n\t *  @static\n\t */\n\tTone.Frequency.A4 = 440;\n\n\t/**\n\t *  Convert a MIDI note to frequency value.\n\t *  @param  {MIDI} midi The midi number to convert.\n\t *  @return {Frequency} the corresponding frequency value\n\t *  @static\n\t *  @example\n\t * Tone.Frequency.mtof(69); // returns 440\n\t */\n\tTone.Frequency.mtof = function(midi){\n\t\treturn Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t};\n\n\t/**\n\t *  Convert a frequency value to a MIDI note.\n\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t *  @returns  {MIDI}\n\t *  @static\n\t *  @example\n\t * Tone.Frequency.ftom(440); // returns 69\n\t */\n\tTone.Frequency.ftom = function(frequency){\n\t\treturn 69 + Math.round(12 * Math.log2(frequency / Tone.Frequency.A4));\n\t};\n\n\treturn Tone.Frequency;\n});\n","define([\"../core/Tone\", \"../type/Time\"], function(Tone){\n\n\t/**\n\t *  @class Tone.TransportTime is a the time along the Transport's\n\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t *         against the AudioContext's clock, it is evaluated against\n\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t *  @constructor\n\t *  @param  {Time}  val    The time value as a number or string\n\t *  @param  {String=}  units  Unit values\n\t *  @extends {Tone.Time}\n\t */\n\tTone.TransportTime = function(val, units){\n\t\tif (this instanceof Tone.TransportTime){\n\n\t\t\tTone.Time.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.TransportTime(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.TransportTime, Tone.Time);\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TransportTime.prototype._now = function(){\n\t\treturn Tone.Transport.seconds;\n\t};\n\n\treturn Tone.TransportTime;\n});\n","define([\"../core/Tone\", \"../core/AudioNode\", \"../shim/AnalyserNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Wrapper around the native Web Audio's\n\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t *          Extracts FFT or Waveform data from the incoming signal.\n\t *  @extends {Tone.AudioNode}\n\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\".\n\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t *                       two in the range 32 to 32768.\n\t */\n\tTone.Analyser = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"type\", \"size\"], Tone.Analyser);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The analyser node.\n\t\t *  @private\n\t\t *  @type {AnalyserNode}\n\t\t */\n\t\tthis._analyser = this.input = this.output = this.context.createAnalyser();\n\n\t\t/**\n\t\t *  The analysis type\n\t\t *  @type {String}\n\t\t *  @private\n\t\t */\n\t\tthis._type = options.type;\n\n\t\t/**\n\t\t *  The buffer that the FFT data is written to\n\t\t *  @type {TypedArray}\n\t\t *  @private\n\t\t */\n\t\tthis._buffer = null;\n\n\t\t//set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t};\n\n\tTone.extend(Tone.Analyser, Tone.AudioNode);\n\n\t/**\n\t *  The default values.\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.Analyser.defaults = {\n\t\t\"size\" : 1024,\n\t\t\"type\" : \"fft\",\n\t\t\"smoothing\" : 0.8\n\t};\n\n\t/**\n\t *  Possible return types of analyser.getValue()\n\t *  @enum {String}\n\t */\n\tTone.Analyser.Type = {\n\t\tWaveform : \"waveform\",\n\t\tFFT : \"fft\"\n\t};\n\n\t/**\n\t *  Run the analysis given the current settings and return the\n\t *  result as a TypedArray.\n\t *  @returns {TypedArray}\n\t */\n\tTone.Analyser.prototype.getValue = function(){\n\t\tif (this._type === Tone.Analyser.Type.FFT){\n\t\t\tthis._analyser.getFloatFrequencyData(this._buffer);\n\t\t} else if (this._type === Tone.Analyser.Type.Waveform){\n\t\t\tthis._analyser.getFloatTimeDomainData(this._buffer);\n\t\t}\n\t\treturn this._buffer;\n\t};\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t *  @memberOf Tone.Analyser#\n\t *  @type {Number}\n\t *  @name size\n\t */\n\tObject.defineProperty(Tone.Analyser.prototype, \"size\", {\n\t\tget : function(){\n\t\t\treturn this._analyser.frequencyBinCount;\n\t\t},\n\t\tset : function(size){\n\t\t\tthis._analyser.fftSize = size * 2;\n\t\t\tthis._buffer = new Float32Array(size);\n\t\t}\n\t});\n\n\t/**\n\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t *  @memberOf Tone.Analyser#\n\t *  @type {String}\n\t *  @name type\n\t */\n\tObject.defineProperty(Tone.Analyser.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\tset : function(type){\n\t\t\tif (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT){\n\t\t\t\tthrow new TypeError(\"Tone.Analyser: invalid type: \"+type);\n\t\t\t}\n\t\t\tthis._type = type;\n\t\t}\n\t});\n\n\t/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t *  @memberOf Tone.Analyser#\n\t *  @type {NormalRange}\n\t *  @name smoothing\n\t */\n\tObject.defineProperty(Tone.Analyser.prototype, \"smoothing\", {\n\t\tget : function(){\n\t\t\treturn this._analyser.smoothingTimeConstant;\n\t\t},\n\t\tset : function(val){\n\t\t\tthis._analyser.smoothingTimeConstant = val;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Analyser}  this\n\t */\n\tTone.Analyser.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._analyser.disconnect();\n\t\tthis._analyser = null;\n\t\tthis._buffer = null;\n\t};\n\n\treturn Tone.Analyser;\n});\n","define([\"../core/Tone\", \"../core/Param\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Compressor is a thin wrapper around the Web Audio\n\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds\n\t *         by narrowing or \"compressing\" an audio signal's dynamic range.\n\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t *  @example\n\t * var comp = new Tone.Compressor(-30, 3);\n\t */\n\tTone.Compressor = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"threshold\", \"ratio\"], Tone.Compressor);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  the compressor node\n\t\t *  @type {DynamicsCompressorNode}\n\t\t *  @private\n\t\t */\n\t\tthis._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\n\t\t/**\n\t\t *  the threshold vaue\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */\n\t\tthis.threshold = new Tone.Param({\n\t\t\t\"param\" : this._compressor.threshold,\n\t\t\t\"units\" : Tone.Type.Decibels,\n\t\t\t\"convert\" : false\n\t\t});\n\n\t\t/**\n\t\t *  The attack parameter\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\n\t\t/**\n\t\t *  The release parameter\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\n\t\t/**\n\t\t *  The knee parameter\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */\n\t\tthis.knee = new Tone.Param({\n\t\t\t\"param\" : this._compressor.knee,\n\t\t\t\"units\" : Tone.Type.Decibels,\n\t\t\t\"convert\" : false\n\t\t});\n\n\t\t/**\n\t\t *  The ratio value\n\t\t *  @type {Number}\n\t\t *  @signal\n\t\t */\n\t\tthis.ratio = new Tone.Param({\n\t\t\t\"param\" : this._compressor.ratio,\n\t\t\t\"convert\" : false\n\t\t});\n\n\t\t//set the defaults\n\t\tthis._readOnly([\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t\tthis.set(options);\n\t};\n\n\tTone.extend(Tone.Compressor, Tone.AudioNode);\n\n\t/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Compressor.defaults = {\n\t\t\"ratio\" : 12,\n\t\t\"threshold\" : -24,\n\t\t\"release\" : 0.25,\n\t\t\"attack\" : 0.003,\n\t\t\"knee\" : 30\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Compressor} this\n\t */\n\tTone.Compressor.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t\tthis._compressor.disconnect();\n\t\tthis._compressor = null;\n\t\tthis.attack.dispose();\n\t\tthis.attack = null;\n\t\tthis.release.dispose();\n\t\tthis.release = null;\n\t\tthis.threshold.dispose();\n\t\tthis.threshold = null;\n\t\tthis.ratio.dispose();\n\t\tthis.ratio = null;\n\t\tthis.knee.dispose();\n\t\tthis.knee = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Compressor;\n});\n","define([\"../core/Tone\", \"../signal/Scale\", \"../signal/Pow\"], function(Tone){\n\n\t/**\n\t *  @class  Performs an exponential scaling on an input signal.\n\t *          Scales a NormalRange value [0,1] exponentially\n\t *          to the output range of outputMin to outputMax.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @param {number} [outputMin=0] The output value when the input is 0.\n\t *  @param {number} [outputMax=1]\tThe output value when the input is 1.\n\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t *  @example\n\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t */\n\tTone.ScaleExp = function(outputMin, outputMax, exponent){\n\n\t\tTone.SignalBase.call(this);\n\n\t\t/**\n\t\t *  scale the input to the output range\n\t\t *  @type {Tone.Scale}\n\t\t *  @private\n\t\t */\n\t\tthis._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\n\t\t/**\n\t\t *  @private\n\t\t *  @type {Tone.Pow}\n\t\t *  @private\n\t\t */\n\t\tthis._exp = this.input = new Tone.Pow(Tone.defaultArg(exponent, 2));\n\n\t\tthis._exp.connect(this._scale);\n\t};\n\n\tTone.extend(Tone.ScaleExp, Tone.SignalBase);\n\n\t/**\n\t * Instead of interpolating linearly between the <code>min</code> and\n\t * <code>max</code> values, setting the exponent will interpolate between\n\t * the two values with an exponential curve.\n\t * @memberOf Tone.ScaleExp#\n\t * @type {number}\n\t * @name exponent\n\t */\n\tObject.defineProperty(Tone.ScaleExp.prototype, \"exponent\", {\n\t\tget : function(){\n\t\t\treturn this._exp.value;\n\t\t},\n\t\tset : function(exp){\n\t\t\tthis._exp.value = exp;\n\t\t}\n\t});\n\n\t/**\n\t * The minimum output value. This number is output when\n\t * the value input value is 0.\n\t * @memberOf Tone.ScaleExp#\n\t * @type {number}\n\t * @name min\n\t */\n\tObject.defineProperty(Tone.ScaleExp.prototype, \"min\", {\n\t\tget : function(){\n\t\t\treturn this._scale.min;\n\t\t},\n\t\tset : function(min){\n\t\t\tthis._scale.min = min;\n\t\t}\n\t});\n\n\t/**\n\t * The maximum output value. This number is output when\n\t * the value input value is 1.\n\t * @memberOf Tone.ScaleExp#\n\t * @type {number}\n\t * @name max\n\t */\n\tObject.defineProperty(Tone.ScaleExp.prototype, \"max\", {\n\t\tget : function(){\n\t\t\treturn this._scale.max;\n\t\t},\n\t\tset : function(max){\n\t\t\tthis._scale.max = max;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.ScaleExp} this\n\t */\n\tTone.ScaleExp.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._scale.dispose();\n\t\tthis._scale = null;\n\t\tthis._exp.dispose();\n\t\tthis._exp = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.ScaleExp;\n});\n","define([\"../core/Tone\", \"../component/ScaledEnvelope\", \"../component/Envelope\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t *         it's got a `baseFrequency` and `octaves` parameter.\n\t *\n\t *  @extends {Tone.Envelope}\n\t *  @constructor\n\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t *  @param {Time} [decay]\tthe decay time in seconds\n\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t *  @param {Time} [release]\tthe release time in seconds\n\t *  @example\n\t *  var freqEnv = new Tone.FrequencyEnvelope({\n\t *  \t\"attack\" : 0.2,\n\t *  \t\"baseFrequency\" : \"C2\",\n\t *  \t\"octaves\" : 4\n\t *  });\n\t *  freqEnv.connect(oscillator.frequency);\n\t */\n\tTone.FrequencyEnvelope = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"attack\", \"decay\", \"sustain\", \"release\"], Tone.Envelope);\n\t\t//merge it with the frequency envelope defaults\n\t\toptions = Tone.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t\tTone.ScaledEnvelope.call(this, options);\n\n\t\t/**\n\t\t *  Stores the octave value\n\t\t *  @type {Positive}\n\t\t *  @private\n\t\t */\n\t\tthis._octaves = options.octaves;\n\n\t\t//setup\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\tthis.exponent = options.exponent;\n\t};\n\n\tTone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t */\n\tTone.FrequencyEnvelope.defaults = {\n\t\t\"baseFrequency\" : 200,\n\t\t\"octaves\" : 4,\n\t\t\"exponent\" : 1\n\t};\n\n\t/**\n\t * The envelope's mininum output value. This is the value which it\n\t * starts at.\n\t * @memberOf Tone.FrequencyEnvelope#\n\t * @type {Frequency}\n\t * @name baseFrequency\n\t */\n\tObject.defineProperty(Tone.FrequencyEnvelope.prototype, \"baseFrequency\", {\n\t\tget : function(){\n\t\t\treturn this._scale.min;\n\t\t},\n\t\tset : function(min){\n\t\t\tthis._scale.min = this.toFrequency(min);\n\t\t\t//also update the octaves\n\t\t\tthis.octaves = this._octaves;\n\t\t}\n\t});\n\n\t/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t * @memberOf Tone.FrequencyEnvelope#\n\t * @type {Positive}\n\t * @name octaves\n\t */\n\tObject.defineProperty(Tone.FrequencyEnvelope.prototype, \"octaves\", {\n\t\tget : function(){\n\t\t\treturn this._octaves;\n\t\t},\n\t\tset : function(octaves){\n\t\t\tthis._octaves = octaves;\n\t\t\tthis._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t\t}\n\t});\n\n\t/**\n\t * The envelope's exponent value.\n\t * @memberOf Tone.FrequencyEnvelope#\n\t * @type {number}\n\t * @name exponent\n\t */\n\tObject.defineProperty(Tone.FrequencyEnvelope.prototype, \"exponent\", {\n\t\tget : function(){\n\t\t\treturn this._exp.value;\n\t\t},\n\t\tset : function(exp){\n\t\t\tthis._exp.value = exp;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.FrequencyEnvelope} this\n\t */\n\tTone.FrequencyEnvelope.prototype.dispose = function(){\n\t\tTone.ScaledEnvelope.prototype.dispose.call(this);\n\t\treturn this;\n\t};\n\n\treturn Tone.FrequencyEnvelope;\n});\n","define([\"../core/Tone\", \"../component/Volume\", \"../core/Context\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A single master output which is connected to the\n\t *          AudioDestinationNode (aka your speakers).\n\t *          It provides useful conveniences such as the ability\n\t *          to set the volume and mute the entire application.\n\t *          It also gives you the ability to apply master effects to your application.\n\t *          <br><br>\n\t *          Like Tone.Transport, A single Tone.Master is created\n\t *          on initialization and you do not need to explicitly construct one.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @singleton\n\t *  @example\n\t * //the audio will go from the oscillator to the speakers\n\t * oscillator.connect(Tone.Master);\n\t * //a convenience for connecting to the master output is also provided:\n\t * oscillator.toMaster();\n\t * //the above two examples are equivalent.\n\t */\n\tTone.Master = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tTone.getContext(function(){\n\t\t\tthis.createInsOuts(1, 0);\n\n\t\t\t/**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._volume = this.output = new Tone.Volume();\n\n\t\t\t/**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t\t\tthis.volume = this._volume.volume;\n\n\t\t\tthis._readOnly(\"volume\");\n\t\t\t//connections\n\t\t\tthis.input.chain(this.output, this.context.destination);\n\n\t\t\t//master is a singleton so it adds itself to the context\n\t\t\tthis.context.master = this;\n\t\t}.bind(this));\n\t};\n\n\tTone.extend(Tone.Master, Tone.AudioNode);\n\n\t/**\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.Master.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t * Is an instanceof Tone.Master\n\t * @type {Boolean}\n\t */\n\tTone.Master.prototype.isMaster = true;\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.Master#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * Tone.Master.mute = true;\n\t */\n\tObject.defineProperty(Tone.Master.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param {AudioNode|Tone} args... All arguments will be connected in a row\n\t *                                  and the Master will be routed through it.\n\t *  @return  {Tone.Master}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Tone.Master.chain(lowBump, masterCompressor);\n\t */\n\tTone.Master.prototype.chain = function(){\n\t\tthis.input.disconnect();\n\t\tthis.input.chain.apply(this.input, arguments);\n\t\targuments[arguments.length - 1].connect(this.output);\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Master}  this\n\t */\n\tTone.Master.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable(\"volume\");\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis.volume = null;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUGMENT TONE's PROTOTYPE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t *  @returns {Tone.AudioNode} this\n\t *  @example\n\t * //connect an oscillator to the master output\n\t * var osc = new Tone.Oscillator().toMaster();\n\t */\n\tTone.AudioNode.prototype.toMaster = function(){\n\t\tthis.connect(this.context.master);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  initialize the module and listen for new audio contexts\n\t */\n\tvar MasterConstructor = Tone.Master;\n\tTone.Master = new MasterConstructor();\n\n\tTone.Context.on(\"init\", function(context){\n\t\t// if it already exists, just restore it\n\t\tif (context.master && context.master.isMaster){\n\t\t\tTone.Master = context.master;\n\t\t} else {\n\t\t\tTone.Master = new MasterConstructor();\n\t\t}\n\t});\n\n\tTone.Context.on(\"close\", function(context){\n\t\tif (context.master && context.master.isMaster){\n\t\t\tcontext.master.dispose();\n\t\t}\n\t});\n\n\treturn Tone.Master;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../core/Buffer\",\n\t\"../source/BufferSource\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Source}\n\t *  @param {string} type the noise type (white|pink|brown)\n\t *  @example\n\t * //initialize the noise and start\n\t * var noise = new Tone.Noise(\"pink\").start();\n\t *\n\t * //make an autofilter to shape the noise\n\t * var autoFilter = new Tone.AutoFilter({\n\t * \t\"frequency\" : \"8m\",\n\t * \t\"min\" : 800,\n\t * \t\"max\" : 15000\n\t * }).connect(Tone.Master);\n\t *\n\t * //connect the noise\n\t * noise.connect(autoFilter);\n\t * //start the autofilter LFO\n\t * autoFilter.start()\n\t */\n\tTone.Noise = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"type\"], Tone.Noise);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  @private\n\t\t *  @type {AudioBufferSourceNode}\n\t\t */\n\t\tthis._source = null;\n\n\t\t/**\n\t\t *  the buffer\n\t\t *  @private\n\t\t *  @type {AudioBuffer}\n\t\t */\n\t\tthis._type = options.type;\n\n\t\t/**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t\tthis._playbackRate = options.playbackRate;\n\t};\n\n\tTone.extend(Tone.Noise, Tone.Source);\n\n\t/**\n\t *  the default parameters\n\t *\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Noise.defaults = {\n\t\t\"type\" : \"white\",\n\t\t\"playbackRate\" : 1\n\t};\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @memberOf Tone.Noise#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * noise.type = \"white\";\n\t */\n\tObject.defineProperty(Tone.Noise.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\tset : function(type){\n\t\t\tif (this._type !== type){\n\t\t\t\tif (type in _noiseBuffers){\n\t\t\t\t\tthis._type = type;\n\t\t\t\t\t//if it's playing, stop and restart it\n\t\t\t\t\tif (this.state === Tone.State.Started){\n\t\t\t\t\t\tvar now = this.now();\n\t\t\t\t\t\tthis._stop(now);\n\t\t\t\t\t\tthis._start(now);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError(\"Tone.Noise: invalid type: \"+type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The playback rate of the noise. Affects\n\t *  the \"frequency\" of the noise.\n\t *  @type {Positive}\n\t *  @signal\n\t */\n\tObject.defineProperty(Tone.Noise.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._playbackRate = rate;\n\t\t\tif (this._source){\n\t\t\t\tthis._source.playbackRate.value = rate;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  internal start method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tTone.Noise.prototype._start = function(time){\n\t\tvar buffer = _noiseBuffers[this._type];\n\t\tthis._source = new Tone.BufferSource(buffer).connect(this.output);\n\t\tthis._source.loop = true;\n\t\tthis._source.playbackRate.value = this._playbackRate;\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t};\n\n\t/**\n\t *  internal stop method\n\t *\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tTone.Noise.prototype._stop = function(time){\n\t\tif (this._source){\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t};\n\n\t/**\n\t * Restarts the noise.\n\t * @param  {Time} time When to restart the noise.\n\t * @return {Tone.Noise}      this\n\t */\n\tTone.Noise.prototype.restart = function(time){\n\t\t//TODO could be optimized by cancelling the buffer source 'stop'\n\t\t//stop and restart\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Noise} this\n\t */\n\tTone.Noise.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tif (this._source !== null){\n\t\t\tthis._source.disconnect();\n\t\t\tthis._source = null;\n\t\t}\n\t\tthis._buffer = null;\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// THE BUFFERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t//Noise buffer stats\n\tvar bufferLength = 44100 * 5;\n\tvar channels = 2;\n\n\t/**\n\t *\tThe noise arrays. Generated on initialization.\n\t *  borrowed heavily from https://github.com/zacharydenton/noise.js\n\t *  (c) 2013 Zach Denton (MIT)\n\t *  @static\n\t *  @private\n\t *  @type {Array}\n\t */\n\tvar _noiseBuffers = {};\n\tvar _noiseCache = {};\n\n\tObject.defineProperty(_noiseBuffers, \"pink\", {\n\t\tget : function(){\n\t\t\tif (!_noiseCache.pink){\n\t\t\t\tvar buffer = [];\n\t\t\t\tfor (var channelNum = 0; channelNum < channels; channelNum++){\n\t\t\t\t\tvar channel = new Float32Array(bufferLength);\n\t\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t\tvar b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\t\tfor (var i = 0; i < bufferLength; i++){\n\t\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_noiseCache.pink = new Tone.Buffer().fromArray(buffer);\n\t\t\t}\n\t\t\treturn _noiseCache.pink;\n\t\t}\n\t});\n\n\tObject.defineProperty(_noiseBuffers, \"brown\", {\n\t\tget : function(){\n\t\t\tif (!_noiseCache.brown){\n\t\t\t\tvar buffer = [];\n\t\t\t\tfor (var channelNum = 0; channelNum < channels; channelNum++){\n\t\t\t\t\tvar channel = new Float32Array(bufferLength);\n\t\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t\tvar lastOut = 0.0;\n\t\t\t\t\tfor (var i = 0; i < bufferLength; i++){\n\t\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_noiseCache.brown = new Tone.Buffer().fromArray(buffer);\n\t\t\t}\n\t\t\treturn _noiseCache.brown;\n\t\t}\n\t});\n\n\tObject.defineProperty(_noiseBuffers, \"white\", {\n\t\tget : function(){\n\t\t\tif (!_noiseCache.white){\n\t\t\t\tvar buffer = [];\n\t\t\t\tfor (var channelNum = 0; channelNum < channels; channelNum++){\n\t\t\t\t\tvar channel = new Float32Array(bufferLength);\n\t\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\t\tfor (var i = 0; i < bufferLength; i++){\n\t\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_noiseCache.white = new Tone.Buffer().fromArray(buffer);\n\t\t\t}\n\t\t\treturn _noiseCache.white;\n\t\t}\n\t});\n\n\treturn Tone.Noise;\n});\n","define([\"../core/Tone\", \"../component/AmplitudeEnvelope\", \"../source/OmniOscillator\",\n\t\"../signal/Signal\", \"../instrument/Monophonic\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t *          routed through a Tone.AmplitudeEnvelope.\n\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth\n\t *                          see defaults below\n\t *  @example\n\t * var synth = new Tone.Synth().toMaster();\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\tTone.Synth = function(options){\n\n\t\t//get the defaults\n\t\toptions = Tone.defaultArg(options, Tone.Synth.defaults);\n\t\tTone.Monophonic.call(this, options);\n\n\t\t/**\n\t\t *  The oscillator.\n\t\t *  @type {Tone.OmniOscillator}\n\t\t */\n\t\tthis.oscillator = new Tone.OmniOscillator(options.oscillator);\n\n\t\t/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this.oscillator.frequency;\n\n\t\t/**\n\t\t *  The detune control.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = this.oscillator.detune;\n\n\t\t/**\n\t\t *  The amplitude envelope.\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */\n\t\tthis.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\n\t\t//connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\tthis._readOnly([\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t};\n\n\tTone.extend(Tone.Synth, Tone.Monophonic);\n\n\t/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.Synth.defaults = {\n\t\t\"oscillator\" : {\n\t\t\t\"type\" : \"triangle\"\n\t\t},\n\t\t\"envelope\" : {\n\t\t\t\"attack\" : 0.005,\n\t\t\t\"decay\" : 0.1,\n\t\t\t\"sustain\" : 0.3,\n\t\t\t\"release\" : 1\n\t\t}\n\t};\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param {Time} [time=now] the time the attack should start\n\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t *  @returns {Tone.Synth} this\n\t *  @private\n\t */\n\tTone.Synth.prototype._triggerEnvelopeAttack = function(time, velocity){\n\t\t//the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t//if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0){\n\t\t\tthis.oscillator.stop(time + this.envelope.attack + this.envelope.decay);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param {Time} [time=now] the time the release should start\n\t *  @returns {Tone.Synth} this\n\t *  @private\n\t */\n\tTone.Synth.prototype._triggerEnvelopeRelease = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.envelope.release);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Synth} this\n\t */\n\tTone.Synth.prototype.dispose = function(){\n\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\tthis._writable([\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t\tthis.oscillator.dispose();\n\t\tthis.oscillator = null;\n\t\tthis.envelope.dispose();\n\t\tthis.envelope = null;\n\t\tthis.frequency = null;\n\t\tthis.detune = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Synth;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../source/Oscillator\", \"../source/PulseOscillator\", \"../source/PWMOscillator\",\n\t\"../source/FMOscillator\", \"../source/AMOscillator\", \"../source/FatOscillator\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t *         into one class. The oscillator class can be changed by setting the `type`.\n\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively.\n\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t *         to a FatOscillator of type \"sawtooth\".\n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t *  @param {String} type The type of the oscillator.\n\t *  @example\n\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t */\n\tTone.OmniOscillator = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"type\"], Tone.OmniOscillator);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The detune control\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\n\t\t/**\n\t\t *  the type of the oscillator source\n\t\t *  @type {String}\n\t\t *  @private\n\t\t */\n\t\tthis._sourceType = undefined;\n\n\t\t/**\n\t\t *  the oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._oscillator = null;\n\n\t\t//set the oscillator\n\t\tthis.type = options.type;\n\t\tthis._readOnly([\"frequency\", \"detune\"]);\n\t\t//set the options\n\t\tthis.set(options);\n\t};\n\n\tTone.extend(Tone.OmniOscillator, Tone.Source);\n\n\t/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.OmniOscillator.defaults = {\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"type\" : \"sine\",\n\t\t\"phase\" : 0\n\t};\n\n\t/**\n\t *  @enum {String}\n\t *  @private\n\t */\n\tvar OmniOscType = {\n\t\tPulse : \"PulseOscillator\",\n\t\tPWM : \"PWMOscillator\",\n\t\tOsc : \"Oscillator\",\n\t\tFM : \"FMOscillator\",\n\t\tAM : \"AMOscillator\",\n\t\tFat : \"FatOscillator\"\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param {Time} [time=now] the time to start the oscillator\n\t *  @private\n\t */\n\tTone.OmniOscillator.prototype._start = function(time){\n\t\tthis._oscillator.start(time);\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param {Time} [time=now] the time to start the oscillator\n\t *  @private\n\t */\n\tTone.OmniOscillator.prototype._stop = function(time){\n\t\tthis._oscillator.stop(time);\n\t};\n\n\tTone.OmniOscillator.prototype.restart = function(time){\n\t\tthis._oscillator.restart(time);\n\t};\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not.\n\t *\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {String}\n\t * @name type\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"type\", {\n\t\tget : function(){\n\t\t\tvar prefix = \"\";\n\t\t\tif (this._sourceType === OmniOscType.FM){\n\t\t\t\tprefix = \"fm\";\n\t\t\t} else if (this._sourceType === OmniOscType.AM){\n\t\t\t\tprefix = \"am\";\n\t\t\t} else if (this._sourceType === OmniOscType.Fat){\n\t\t\t\tprefix = \"fat\";\n\t\t\t}\n\t\t\treturn prefix + this._oscillator.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tif (type.substr(0, 2) === \"fm\"){\n\t\t\t\tthis._createNewOscillator(OmniOscType.FM);\n\t\t\t\tthis._oscillator.type = type.substr(2);\n\t\t\t} else if (type.substr(0, 2) === \"am\"){\n\t\t\t\tthis._createNewOscillator(OmniOscType.AM);\n\t\t\t\tthis._oscillator.type = type.substr(2);\n\t\t\t} else if (type.substr(0, 3) === \"fat\"){\n\t\t\t\tthis._createNewOscillator(OmniOscType.Fat);\n\t\t\t\tthis._oscillator.type = type.substr(3);\n\t\t\t} else if (type === \"pwm\"){\n\t\t\t\tthis._createNewOscillator(OmniOscType.PWM);\n\t\t\t} else if (type === \"pulse\"){\n\t\t\t\tthis._createNewOscillator(OmniOscType.Pulse);\n\t\t\t} else {\n\t\t\t\tthis._createNewOscillator(OmniOscType.Osc);\n\t\t\t\tthis._oscillator.type = type;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The partials of the waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"partials\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.partials;\n\t\t},\n\t\tset : function(partials){\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t});\n\n\t/**\n\t * The partial count of the oscillator. This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t * @example\n\t * //set the maximum number of partials\n\t * osc.partialCount = 0;\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"partialCount\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.partialCount;\n\t\t},\n\t\tset : function(partialCount){\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t});\n\n\t/**\n\t *  Set a member/attribute of the oscillator.\n\t *  @param {Object|String} params\n\t *  @param {number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone.OmniOscillator} this\n\t */\n\tTone.OmniOscillator.prototype.set = function(params, value){\n\t\t//make sure the type is set first\n\t\tif (params === \"type\"){\n\t\t\tthis.type = value;\n\t\t} else if (Tone.isObject(params) && params.hasOwnProperty(\"type\")){\n\t\t\tthis.type = params.type;\n\t\t}\n\t\t//then set the rest\n\t\tTone.prototype.set.apply(this, arguments);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n\t *  \t\t\t\t\t                  all available.\n\t *  @returns {Object}\n\t */\n\tTone.OmniOscillator.prototype.get = function(params){\n\t\tvar options = this._oscillator.get(params);\n\t\toptions.type = this.type;\n\t\treturn options;\n\t};\n\n\t/**\n\t *  connect the oscillator to the frequency and detune signals\n\t *  @private\n\t */\n\tTone.OmniOscillator.prototype._createNewOscillator = function(oscType){\n\t\tif (oscType !== this._sourceType){\n\t\t\tthis._sourceType = oscType;\n\t\t\tvar OscillatorConstructor = Tone[oscType];\n\t\t\t//short delay to avoid clicks on the change\n\t\t\tvar now = this.now();\n\t\t\tif (this._oscillator !== null){\n\t\t\t\tvar oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t//dispose the old one\n\t\t\t\tthis.context.setTimeout(function(){\n\t\t\t\t\toldOsc.dispose();\n\t\t\t\t\toldOsc = null;\n\t\t\t\t}, this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscillatorConstructor();\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tif (this.state === Tone.State.Started){\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Degrees}\n\t * @name phase\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.phase;\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._oscillator.phase = phase;\n\t\t}\n\t});\n\n\t/**\n\t * The source type names\n\t * @private\n\t * @type {Object}\n\t */\n\tvar SourceTypeNames = {\n\t\tPulseOscillator : \"pulse\",\n\t\tPWMOscillator : \"pwm\",\n\t\tOscillator : \"oscillator\",\n\t\tFMOscillator : \"fm\",\n\t\tAMOscillator : \"am\",\n\t\tFatOscillator : \"fat\"\n\t};\n\n\t/**\n\t * The source type of the oscillator. \n\t * @memberOf Tone.OmniOscillator#\n\t * @type {String}\n\t * @name sourceType\n\t * @example\n\t * var omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n\t * omniOsc.sourceType // 'fm'\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"sourceType\", {\n\t\tget : function(){\n\t\t\treturn SourceTypeNames[this._sourceType];\n\t\t},\n\t\tset : function(sType){\n\t\t\t//the basetype defaults to sine\n\t\t\tvar baseType = \"sine\";\n\t\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\"){\n\t\t\t\tbaseType = this._oscillator.type;\n\t\t\t} \n\n\t\t\t//set the type\n\t\t\tif (sType === SourceTypeNames.FMOscillator){\n\t\t\t\tthis.type = \"fm\" + baseType;\n\t\t\t} else if (sType === SourceTypeNames.AMOscillator){\n\t\t\t\tthis.type = \"am\" + baseType;\n\t\t\t} else if (sType === SourceTypeNames.FatOscillator){\n\t\t\t\tthis.type = \"fat\" + baseType;\n\t\t\t} else if (sType === SourceTypeNames.Oscillator){\n\t\t\t\tthis.type = baseType;\n\t\t\t} else if (sType === SourceTypeNames.PulseOscillator){\n\t\t\t\tthis.type = \"pulse\";\n\t\t\t} else if (sType === SourceTypeNames.PWMOscillator){\n\t\t\t\tthis.type = \"pwm\";\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The base type of the oscillator.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {String}\n\t * @name baseType\n\t * @example\n\t * var omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n\t * omniOsc.sourceType // 'fm'\n\t * omniOsc.baseType //'square'\n\t * omniOsc.partialCount //4\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"baseType\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.baseType;\n\t\t},\n\t\tset : function(baseType){\n\t\t\tif (this.sourceType !== SourceTypeNames.PulseOscillator && this.sourceType !== SourceTypeNames.PWMOscillator){\n\t\t\t\tthis._oscillator.baseType = baseType;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {NormalRange}\n\t * @signal\n\t * @name width\n\t * @example\n\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2;\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"width\", {\n\t\tget : function(){\n\t\t\tif (this._sourceType === OmniOscType.Pulse){\n\t\t\t\treturn this._oscillator.width;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The number of detuned oscillators\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Number}\n\t * @name count\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"count\", {\n\t\tget : function(){\n\t\t\tif (this._sourceType === OmniOscType.Fat){\n\t\t\t\treturn this._oscillator.count;\n\t\t\t}\n\t\t},\n\t\tset : function(count){\n\t\t\tif (this._sourceType === OmniOscType.Fat){\n\t\t\t\tthis._oscillator.count = count;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Cents}\n\t * @name spread\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"spread\", {\n\t\tget : function(){\n\t\t\tif (this._sourceType === OmniOscType.Fat){\n\t\t\t\treturn this._oscillator.spread;\n\t\t\t}\n\t\t},\n\t\tset : function(spread){\n\t\t\tif (this._sourceType === OmniOscType.Fat){\n\t\t\t\tthis._oscillator.spread = spread;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {String}\n\t * @name modulationType\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"modulationType\", {\n\t\tget : function(){\n\t\t\tif (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM){\n\t\t\t\treturn this._oscillator.modulationType;\n\t\t\t}\n\t\t},\n\t\tset : function(mType){\n\t\t\tif (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM){\n\t\t\t\tthis._oscillator.modulationType = mType;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t * See Tone.FMOscillator for more info.\n\t * @type {Positive}\n\t * @signal\n\t * @name modulationIndex\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"modulationIndex\", {\n\t\tget : function(){\n\t\t\tif (this._sourceType === OmniOscType.FM){\n\t\t\t\treturn this._oscillator.modulationIndex;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info.\n\t *  @memberOf Tone.OmniOscillator#\n\t *  @signal\n\t *  @type {Positive}\n\t *  @name harmonicity\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"harmonicity\", {\n\t\tget : function(){\n\t\t\tif (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM){\n\t\t\t\treturn this._oscillator.harmonicity;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator\n\t * (only if the oscillator type is set to pwm). See\n\t * Tone.PWMOscillator for more info.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Frequency}\n\t * @signal\n\t * @name modulationFrequency\n\t * @example\n\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2;\n\t */\n\tObject.defineProperty(Tone.OmniOscillator.prototype, \"modulationFrequency\", {\n\t\tget : function(){\n\t\t\tif (this._sourceType === OmniOscType.PWM){\n\t\t\t\treturn this._oscillator.modulationFrequency;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.OmniOscillator} this\n\t */\n\tTone.OmniOscillator.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis._writable([\"frequency\", \"detune\"]);\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis._oscillator.dispose();\n\t\tthis._oscillator = null;\n\t\tthis._sourceType = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.OmniOscillator;\n});\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var core = module.exports = { version: '2.6.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","define([\"../core/Tone\"], function(Tone){\n\tif (Tone.supported){\n\n\t\tif (!Tone.global.hasOwnProperty(\"OfflineAudioContext\") && Tone.global.hasOwnProperty(\"webkitOfflineAudioContext\")){\n\t\t\tTone.global.OfflineAudioContext = Tone.global.webkitOfflineAudioContext;\n\t\t}\n\n\t\t//returns promise?\n\t\tvar context = new OfflineAudioContext(1, 1, 44100);\n\t\tvar ret = context.startRendering();\n\t\tif (!(ret && Tone.isFunction(ret.then))){\n\t\t\tOfflineAudioContext.prototype._native_startRendering = OfflineAudioContext.prototype.startRendering;\n\t\t\tOfflineAudioContext.prototype.startRendering = function(){\n\t\t\t\treturn new Promise(function(done){\n\t\t\t\t\tthis.oncomplete = function(e){\n\t\t\t\t\t\tdone(e.renderedBuffer);\n\t\t\t\t\t};\n\t\t\t\t\tthis._native_startRendering();\n\t\t\t\t}.bind(this));\n\t\t\t};\n\t\t}\n\t}\n});\n","define([\"../core/Tone\", \"../type/TimeBase\", \"../type/Frequency\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Time is a primitive type for encoding Time values.\n\t *         Tone.Time can be constructed with or without the `new` keyword. Tone.Time can be passed\n\t *         into the parameter of any method which takes time as an argument.\n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number|Object}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * var t = Tone.Time(\"4n\");//a quarter note\n\t */\n\tTone.Time = function(val, units){\n\t\tif (this instanceof Tone.Time){\n\n\t\t\tTone.TimeBase.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Time(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Time, Tone.TimeBase);\n\n\t/**\n\t * Extend the base expressions\n\t */\n\tTone.Time.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n\t\t\"quantize\" : {\n\t\t\tregexp : /^@(.+)/,\n\t\t\tmethod : function(capture){\n\t\t\t\tif (Tone.Transport){\n\t\t\t\t\tvar quantTo = new this.constructor(capture);\n\t\t\t\t\treturn this._secondsToUnits(Tone.Transport.nextSubdivision(quantTo));\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"now\" : {\n\t\t\tregexp : /^\\+(.+)/,\n\t\t\tmethod : function(capture){\n\t\t\t\treturn this._now() + (new this.constructor(capture));\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Quantize the time by the given subdivision. Optionally add a\n\t *  percentage which will move the time value towards the ideal\n\t *  quantized value by that percentage.\n\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t *                                   towards the quantized value by\n\t *                                   a percentage.\n\t *  @return  {Number}  this\n\t *  @example\n\t * Tone.Time(21).quantize(2) //returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tTone.Time.prototype.quantize = function(subdiv, percent){\n\t\tpercent = Tone.defaultArg(percent, 1);\n\t\tvar subdivision = new this.constructor(subdiv);\n\t\tvar value = this.valueOf();\n\t\tvar multiple = Math.round(value / subdivision);\n\t\tvar ideal = multiple * subdivision;\n\t\tvar diff = ideal - value;\n\t\treturn value + diff * percent;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t */\n\tTone.Time.prototype.toNotation = function(){\n\t\tvar time = this.toSeconds();\n\t\tvar testNotations = [\"1m\"];\n\t\tfor (var power = 1; power < 8; power++){\n\t\t\tvar subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\");\n\t\t\ttestNotations.push(subdiv + \"n\");\n\t\t\ttestNotations.push(subdiv + \"t\");\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t//find the closets notation representation\n\t\tvar closest = testNotations[0];\n\t\tvar closestSeconds = Tone.Time(testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(function(notation){\n\t\t\tvar notationSeconds = Tone.Time(notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)){\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t};\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t *  @return  {BarsBeatsSixteenths}\n\t */\n\tTone.Time.prototype.toBarsBeatsSixteenths = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tvar measures = Math.floor(quarters / this._getTimeSignature());\n\t\tvar sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tsixteenths = sixteenths.toString();\n\t\tif (sixteenths.length > 3){\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));\n\t\t}\n\t\tvar progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t};\n\n\t/**\n\t *  Return the time in ticks.\n\t *  @return  {Ticks}\n\t */\n\tTone.Time.prototype.toTicks = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t};\n\n\t/**\n\t *  Return the time in seconds.\n\t *  @return  {Seconds}\n\t */\n\tTone.Time.prototype.toSeconds = function(){\n\t\treturn this.valueOf();\n\t};\n\n\t/**\n\t *  Return the value as a midi note.\n\t *  @return  {Midi}\n\t */\n\tTone.Time.prototype.toMidi = function(){\n\t\treturn Tone.Frequency.ftom(this.toFrequency());\n\t};\n\n\treturn Tone.Time;\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t/**\n\t *  @class Tone.TimeBase is a flexible encoding of time\n\t *         which can be evaluated to and from a string.\n\t *  @extends {Tone}\n\t *  @param  {Time}  val    The time value as a number, string or object\n\t *  @param  {String=}  units  Unit values\n\t *  @example\n\t * Tone.TimeBase(4, \"n\")\n\t * Tone.TimeBase(2, \"t\")\n\t * Tone.TimeBase(\"2t\")\n\t * Tone.TimeBase({\"2t\" : 2})\n\t * Tone.TimeBase(\"2t\") + Tone.TimeBase(\"4n\");\n\t */\n\tTone.TimeBase = function(val, units){\n\n\t\t//allows it to be constructed with or without 'new'\n\t\tif (this instanceof Tone.TimeBase){\n\n\t\t\t/**\n\t\t\t *  The value\n\t\t\t *  @type  {Number|String|Tone.TimeBase}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._val = val;\n\n\t\t\t/**\n\t\t\t * The units\n\t\t\t * @type {String?}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._units = units;\n\n\t\t\t//test if the value is a string representation of a number\n\t\t\tif (Tone.isUndef(this._units) && Tone.isString(this._val) &&\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\tparseFloat(this._val) == this._val && this._val.charAt(0) !== \"+\"){\n\t\t\t\tthis._val = parseFloat(this._val);\n\t\t\t\tthis._units = this._defaultUnits;\n\t\t\t} else if (val && val.constructor === this.constructor){\n\t\t\t\t//if they're the same type, just copy values over\n\t\t\t\tthis._val = val._val;\n\t\t\t\tthis._units = val._units;\n\t\t\t} else if (val instanceof Tone.TimeBase){\n\t\t\t\tswitch (this._defaultUnits){\n\t\t\t\t\tcase \"s\" :\n\t\t\t\t\t\tthis._val = val.toSeconds();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"i\" :\n\t\t\t\t\t\tthis._val = val.toTicks();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"hz\" :\n\t\t\t\t\t\tthis._val = val.toFrequency();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"midi\" :\n\t\t\t\t\t\tthis._val = val.toMidi();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\tthrow new Error(\"Unrecognized default units \"+this._defaultUnits);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn new Tone.TimeBase(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.TimeBase);\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tABSTRACT SYNTAX TREE PARSER\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the primary expressions.\n\t *  @private\n\t *  @type  {Object}\n\t */\n\tTone.TimeBase.prototype._expressions = {\n\t\t\"n\" : {\n\t\t\tregexp : /^(\\d+)n(\\.?)$/i,\n\t\t\tmethod : function(value, dot){\n\t\t\t\tvalue = parseInt(value);\n\t\t\t\tvar scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\tif (value === 1){\n\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature())*scalar;\n\t\t\t\t} else {\n\t\t\t\t\treturn this._beatsToUnits(4 / value)*scalar;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"t\" : {\n\t\t\tregexp : /^(\\d+)t$/i,\n\t\t\tmethod : function(value){\n\t\t\t\tvalue = parseInt(value);\n\t\t\t\treturn this._beatsToUnits(8 / (parseInt(value) * 3));\n\t\t\t}\n\t\t},\n\t\t\"m\" : {\n\t\t\tregexp : /^(\\d+)m$/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._beatsToUnits(parseInt(value) * this._getTimeSignature());\n\t\t\t}\n\t\t},\n\t\t\"i\" : {\n\t\t\tregexp : /^(\\d+)i$/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._ticksToUnits(parseInt(value));\n\t\t\t}\n\t\t},\n\t\t\"hz\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t}\n\t\t},\n\t\t\"tr\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\tmethod : function(m, q, s){\n\t\t\t\tvar total = 0;\n\t\t\t\tif (m && m !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t}\n\t\t\t\tif (q && q !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t}\n\t\t\t\tif (s && s !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t}\n\t\t\t\treturn total;\n\t\t\t}\n\t\t},\n\t\t\"s\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t}\n\t\t},\n\t\t\"samples\" : {\n\t\t\tregexp : /^(\\d+)samples$/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn parseInt(value) / this.context.sampleRate;\n\t\t\t}\n\t\t},\n\t\t\"default\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._expressions[this._defaultUnits].method.call(this, value);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  The default units if none are given.\n\t *  @type {String}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._defaultUnits = \"s\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTRANSPORT FALLBACKS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm, or 120 if Transport is not available\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._getBpm = function(){\n\t\tif (Tone.Transport){\n\t\t\treturn Tone.Transport.bpm.value;\n\t\t} else {\n\t\t\treturn 120;\n\t\t}\n\t};\n\n\t/**\n\t * Return the timeSignature or 4 if Transport is not available\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._getTimeSignature = function(){\n\t\tif (Tone.Transport){\n\t\t\treturn Tone.Transport.timeSignature;\n\t\t} else {\n\t\t\treturn 4;\n\t\t}\n\t};\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._getPPQ = function(){\n\t\tif (Tone.Transport){\n\t\t\treturn Tone.Transport.PPQ;\n\t\t} else {\n\t\t\treturn 192;\n\t\t}\n\t};\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._now = function(){\n\t\treturn this.now();\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t *  @param {Frequency} freq\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._frequencyToUnits = function(freq){\n\t\treturn 1/freq;\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._beatsToUnits = function(beats){\n\t\treturn (60 / this._getBpm()) * beats;\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._secondsToUnits = function(seconds){\n\t\treturn seconds;\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._ticksToUnits = function(ticks){\n\t\treturn ticks * (this._beatsToUnits(1) / this._getPPQ());\n\t};\n\n\t/**\n\t * With no arguments, return 'now'\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._noArg = function(){\n\t\treturn this._now();\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time\n\t *  in seconds.\n\t *  @return  {Seconds}\n\t */\n\tTone.TimeBase.prototype.valueOf = function(){\n\t\tif (Tone.isUndef(this._val)){\n\t\t\treturn this._noArg();\n\t\t} else if (Tone.isString(this._val) && Tone.isUndef(this._units)){\n\t\t\tfor (var units in this._expressions){\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())){\n\t\t\t\t\tthis._units = units;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Tone.isObject(this._val)){\n\t\t\tvar total = 0;\n\t\t\tfor (var typeName in this._val){\n\t\t\t\tvar quantity = this._val[typeName];\n\t\t\t\tvar time = (new this.constructor(typeName)).valueOf() * quantity;\n\t\t\t\ttotal += time;\n\t\t\t}\n\t\t\treturn total;\n\t\t}\n\t\tif (Tone.isDefined(this._units)){\n\t\t\tvar expr = this._expressions[this._units];\n\t\t\tvar matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching){\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, parseFloat(this._val));\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._val;\n\t\t}\n\t};\n\n\t/**\n\t *  Return the value in seconds\n\t *  @return {Seconds}\n\t */\n\tTone.TimeBase.prototype.toSeconds = function(){\n\t\treturn this.valueOf();\n\t};\n\n\t/**\n\t *  Return the value in hertz\n\t *  @return {Frequency}\n\t */\n\tTone.TimeBase.prototype.toFrequency = function(){\n\t\treturn 1 / this.toSeconds();\n\t};\n\n\t/**\n\t *  Return the time in samples\n\t *  @return  {Samples}\n\t */\n\tTone.TimeBase.prototype.toSamples = function(){\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t};\n\n\t/**\n\t *  Return the time in milliseconds.\n\t *  @return  {Milliseconds}\n\t */\n\tTone.TimeBase.prototype.toMilliseconds = function(){\n\t\treturn this.toSeconds() * 1000;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return {Tone.TimeBase} this\n\t */\n\tTone.TimeBase.prototype.dispose = function(){\n\t\tthis._val = null;\n\t\tthis._units = null;\n\t};\n\n\treturn Tone.TimeBase;\n});\n","define([\"../core/Tone\", \"../core/OfflineContext\"], function(Tone){\n\n\tif (Tone.supported){\n\n\t\tvar ua = navigator.userAgent.toLowerCase();\n\t\tvar isMobileSafari = ua.includes(\"safari\") && !ua.includes(\"chrome\") && ua.includes(\"mobile\");\n\t\tif (isMobileSafari){\n\t\t\t//mobile safari has a bizarre bug with the offline context\n\t\t\t//when a BufferSourceNode is started, it starts the offline context\n\t\t\t//\n\t\t\t//deferring all BufferSource starts till the last possible moment\n\t\t\t//reduces the likelihood of this happening\n\t\t\tTone.OfflineContext.prototype.createBufferSource = function(){\n\t\t\t\tvar bufferSource = this._context.createBufferSource();\n\t\t\t\tvar _native_start = bufferSource.start;\n\t\t\t\tbufferSource.start = function(time){\n\t\t\t\t\tthis.setTimeout(function(){\n\t\t\t\t\t\t_native_start.call(bufferSource, time);\n\t\t\t\t\t}.bind(this), 0);\n\t\t\t\t}.bind(this);\n\t\t\t\treturn bufferSource;\n\t\t\t};\n\t\t}\n\t}\n\n});\n","define([\"../core/Tone\", \"../core/Context\", \"../shim/OfflineAudioContext\"], function(Tone){\n\n\t/**\n\t *  @class Wrapper around the OfflineAudioContext\n\t *  @extends {Tone.Context}\n\t *  @param  {Number}  channels  The number of channels to render\n\t *  @param  {Number}  duration  The duration to render in samples\n\t *  @param {Number} sampleRate the sample rate to render at\n\t */\n\tTone.OfflineContext = function(channels, duration, sampleRate){\n\n\t\t/**\n\t\t *  The offline context\n\t\t *  @private\n\t\t *  @type  {OfflineAudioContext}\n\t\t */\n\t\tvar offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\n\t\t//wrap the methods/members\n\t\tTone.Context.call(this, {\n\t\t\t\"context\" : offlineContext,\n\t\t\t\"clockSource\" : \"offline\",\n\t\t\t\"lookAhead\" : 0,\n\t\t\t\"updateInterval\" : 128 / sampleRate\n\t\t});\n\n\t\t/**\n\t\t *  A private reference to the duration\n\t\t *  @private\n\t\t *  @type  {Number}\n\t\t */\n\t\tthis._duration = duration;\n\n\t\t/**\n\t\t *  An artificial clock source\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._currentTime = 0;\n\t};\n\n\tTone.extend(Tone.OfflineContext, Tone.Context);\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t *  @return  {Number}\n\t */\n\tTone.OfflineContext.prototype.now = function(){\n\t\treturn this._currentTime;\n\t};\n\n\t/**\n\t *  Overwrite resume, should not do anything in the OfflineAudioContext.\n\t *  @return {Promise}\n\t */\n\tTone.OfflineContext.prototype.resume = function(){\n\t\treturn Promise.resolve();\n\t};\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t *  @return  {Promise}\n\t */\n\tTone.OfflineContext.prototype.render = function(){\n\t\twhile (this._duration - this._currentTime >= 0){\n\t\t\t//invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t//increment the clock\n\t\t\tthis._currentTime += this.blockTime;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t};\n\n\t/**\n\t *  Close the context\n\t *  @return  {Promise}\n\t */\n\tTone.OfflineContext.prototype.close = function(){\n\t\tthis._context = null;\n\t\treturn Promise.resolve();\n\t};\n\n\treturn Tone.OfflineContext;\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t *         must be AudioRange.\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t *  @example\n\t * var pow = new Tone.Pow(2);\n\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t * //output of pow is 0.25. \n\t */\n\tTone.Pow = function(exp){\n\n\t\tTone.SignalBase.call(this);\n\t\t\n\t\t/**\n\t\t * the exponent\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis._exp = Tone.defaultArg(exp, 1);\n\n\t\t/**\n\t\t *  @type {WaveShaperNode}\n\t\t *  @private\n\t\t */\n\t\tthis._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t};\n\n\tTone.extend(Tone.Pow, Tone.SignalBase);\n\n\t/**\n\t * The value of the exponent.\n\t * @memberOf Tone.Pow#\n\t * @type {number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Pow.prototype, \"value\", {\n\t\tget : function(){\n\t\t\treturn this._exp;\n\t\t},\n\t\tset : function(exp){\n\t\t\tthis._exp = exp;\n\t\t\tthis._expScaler.setMap(this._expFunc(this._exp));\n\t\t}\n\t});\n\n\t/**\n\t *  the function which maps the waveshaper\n\t *  @param   {number} exp\n\t *  @return {function}\n\t *  @private\n\t */\n\tTone.Pow.prototype._expFunc = function(exp){\n\t\treturn function(val){\n\t\t\treturn Math.pow(Math.abs(val), exp);\n\t\t};\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Pow} this\n\t */\n\tTone.Pow.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._expScaler.dispose();\n\t\tthis._expScaler = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Pow;\n});\n","define([\"../core/Tone\", \"../component/CrossFade\", \"../component/Merge\", \"../component/Split\", \"../shim/StereoPannerNode\",\n\t\"../signal/Signal\", \"../signal/AudioToGain\", \"../signal/Zero\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t *          support 3D. Panner uses the StereoPannerNode when available.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {NormalRange} [initialPan=0] The initail panner value (center).\n\t *  @example\n\t *  //pan the input signal hard right.\n\t *  var panner = new Tone.Panner(1);\n\t */\n\tTone.Panner = function(initialPan){\n\n\t\tTone.AudioNode.call(this);\n\t\t/**\n\t\t*  the panner node\n\t\t*  @type {StereoPannerNode}\n\t\t*  @private\n\t\t*/\n\t\tthis._panner = this.input = this.output = this.context.createStereoPanner();\n\n\t\t/**\n\t\t*  The pan control. -1 = hard left, 1 = hard right.\n\t\t*  @type {AudioRange}\n\t\t*  @signal\n\t\t*/\n\t\tthis.pan = this._panner.pan;\n\n\t\t//initial value\n\t\tthis.pan.value = Tone.defaultArg(initialPan, 0);\n\t\tthis._readOnly(\"pan\");\n\t};\n\n\tTone.extend(Tone.Panner, Tone.AudioNode);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Panner} this\n\t */\n\tTone.Panner.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable(\"pan\");\n\t\tthis._panner.disconnect();\n\t\tthis._panner = null;\n\t\tthis.pan = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Panner;\n});\n","define([\"../core/Tone\", \"../component/Filter\", \"../signal/Signal\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t *         with two crossover frequency controls.\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t */\n\tTone.MultibandSplit = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"lowFrequency\", \"highFrequency\"], Tone.MultibandSplit);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  the input\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis.input = new Tone.Gain();\n\n\t\t/**\n\t\t *  the outputs\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis.output = new Array(3);\n\n\t\t/**\n\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t *  @type {Tone.Filter}\n\t\t */\n\t\tthis.low = this.output[0] = new Tone.Filter(0, \"lowpass\");\n\n\t\t/**\n\t\t *  the lower filter of the mid band\n\t\t *  @type {Tone.Filter}\n\t\t *  @private\n\t\t */\n\t\tthis._lowMidFilter = new Tone.Filter(0, \"highpass\");\n\n\t\t/**\n\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t *  @type {Tone.Filter}\n\t\t */\n\t\tthis.mid = this.output[1] = new Tone.Filter(0, \"lowpass\");\n\n\t\t/**\n\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t *  @type {Tone.Filter}\n\t\t */\n\t\tthis.high = this.output[2] = new Tone.Filter(0, \"highpass\");\n\n\t\t/**\n\t\t *  The low/mid crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The mid/high crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The quality of all the filters\n\t\t *  @type {Number}\n\t\t *  @signal\n\t\t */\n\t\tthis.Q = new Tone.Signal(options.Q);\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t//the frequency control signal\n\t\tthis.lowFrequency.connect(this.low.frequency);\n\t\tthis.lowFrequency.connect(this._lowMidFilter.frequency);\n\t\tthis.highFrequency.connect(this.mid.frequency);\n\t\tthis.highFrequency.connect(this.high.frequency);\n\t\t//the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\tthis._readOnly([\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t};\n\n\tTone.extend(Tone.MultibandSplit, Tone.AudioNode);\n\n\t/**\n\t *  @private\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.MultibandSplit.defaults = {\n\t\t\"lowFrequency\" : 400,\n\t\t\"highFrequency\" : 2500,\n\t\t\"Q\" : 1,\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.MultibandSplit} this\n\t */\n\tTone.MultibandSplit.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis.low = null;\n\t\tthis._lowMidFilter.dispose();\n\t\tthis._lowMidFilter = null;\n\t\tthis.mid.dispose();\n\t\tthis.mid = null;\n\t\tthis.high.dispose();\n\t\tthis.high = null;\n\t\tthis.lowFrequency.dispose();\n\t\tthis.lowFrequency = null;\n\t\tthis.highFrequency.dispose();\n\t\tthis.highFrequency = null;\n\t\tthis.Q.dispose();\n\t\tthis.Q = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MultibandSplit;\n});\n","define([\"../core/Tone\", \"../signal/ScaleExp\", \"../signal/Signal\",\n\t\"../core/Param\", \"../core/Delay\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Time|Object} [delayTime] The delay time of the filter.\n\t *  @param {NormalRange=} resonance The amount of feedback the filter has.\n\t */\n\tTone.FeedbackCombFilter = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"delayTime\", \"resonance\"], Tone.FeedbackCombFilter);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  the delay node\n\t\t *  @type {DelayNode}\n\t\t *  @private\n\t\t */\n\t\tthis._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\n\t\t/**\n\t\t *  The amount of delay of the comb filter.\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.delayTime = this._delay.delayTime;\n\n\t\t/**\n\t\t *  the feedback node\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  The amount of feedback of the delayed signal.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.resonance = this._feedback.gain;\n\n\t\tthis._delay.chain(this._feedback, this._delay);\n\t\tthis._readOnly([\"resonance\", \"delayTime\"]);\n\t};\n\n\tTone.extend(Tone.FeedbackCombFilter, Tone.AudioNode);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.FeedbackCombFilter.defaults = {\n\t\t\"delayTime\" : 0.1,\n\t\t\"resonance\" : 0.5\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.FeedbackCombFilter} this\n\t */\n\tTone.FeedbackCombFilter.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"resonance\", \"delayTime\"]);\n\t\tthis._delay.dispose();\n\t\tthis._delay = null;\n\t\tthis.delayTime = null;\n\t\tthis._feedback.dispose();\n\t\tthis._feedback = null;\n\t\tthis.resonance = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.FeedbackCombFilter;\n});\n","define([\"../core/Tone\", \"../signal/Abs\", \"../signal/Subtract\", \n\t\"../signal/Signal\", \"../type/Type\", \"../core/Delay\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Follower is a  crude envelope follower which will follow\n\t *          the amplitude of an incoming signal. Read more about envelope followers (also known\n\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Time} [smoothing=0.05] The rate of change of the follower.\n\t *  @example\n\t * var follower = new Tone.Follower(0.3);\n\t */\n\tTone.Follower = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"smoothing\"], Tone.Follower);\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(1, 1);\n\n\t\t/**\n\t\t *  @type {Tone.Abs}\n\t\t *  @private\n\t\t */\n\t\tthis._abs = new Tone.Abs();\n\n\t\t/**\n\t\t *  the lowpass filter which smooths the input\n\t\t *  @type {BiquadFilterNode}\n\t\t *  @private\n\t\t */\n\t\tthis._filter = this.context.createBiquadFilter();\n\t\tthis._filter.type = \"lowpass\";\n\t\tthis._filter.frequency.value = 0;\n\t\tthis._filter.Q.value = 0;\n\n\t\t/**\n\t\t *  @type {Tone.Subtract}\n\t\t *  @private\n\t\t */\n\t\tthis._sub = new Tone.Subtract();\n\n\t\t/**\n\t\t *  delay node to compare change over time\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._delay = new Tone.Delay(this.blockTime);\n\n\t\t/**\n\t\t *  the smoothing value\n\t\t *  @private\n\t\t *  @type {Number}\n\t\t */\n\t\tthis._smoothing = options.smoothing;\n\n\t\tthis.input.connect(this._delay, this._sub);\n\t\tthis.input.connect(this._sub, 0, 1);\n\t\tthis._sub.chain(this._abs, this._filter, this.output);\n\n\t\t//set the smoothing initially\n\t\tthis.smoothing = options.smoothing;\n\t};\n\n\tTone.extend(Tone.Follower, Tone.AudioNode);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.Follower.defaults = {\n\t\t\"smoothing\" : 0.05,\n\t};\n\n\t/**\n\t * The attack time.\n\t * @memberOf Tone.Follower#\n\t * @type {Time}\n\t * @name smoothing\n\t */\n\tObject.defineProperty(Tone.Follower.prototype, \"smoothing\", {\n\t\tget : function(){\n\t\t\treturn this._smoothing;\n\t\t},\n\t\tset : function(smoothing){\n\t\t\tthis._smoothing = smoothing;\n\t\t\tthis._filter.frequency.value = Tone.Time(smoothing).toFrequency() * 0.5;\n\t\t}\n\t});\n\n\t/**\n\t *  Borrows the connect method from Signal so that the output can be used\n\t *  as a Tone.Signal control signal.\n\t *  @function\n\t */\n\tTone.Follower.prototype.connect = Tone.SignalBase.prototype.connect;\n\n\t/**\n\t *  dispose\n\t *  @returns {Tone.Follower} this\n\t */\n\tTone.Follower.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._filter.disconnect();\n\t\tthis._filter = null;\n\t\tthis._delay.dispose();\n\t\tthis._delay = null;\n\t\tthis._sub.disconnect();\n\t\tthis._sub = null;\n\t\tthis._abs.dispose();\n\t\tthis._abs = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Follower;\n});\n","define([\"../core/Tone\", \"../signal/TickSignal\", \"../core/TimelineState\",\n\t\"../core/Timeline\", \"../core/Param\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Uses [Tone.TickSignal](TickSignal) to track elapsed ticks with\n\t *  \t\tcomplex automation curves.\n\t *\n\t * \t@constructor\n     *  @param {Frequency} frequency The initial frequency that the signal ticks at\n     *  @param {Tone.Param=} param A parameter to control (such as playbackRate)\n\t *  @extends {Tone}\n\t */\n\tTone.TickSource = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\"], Tone.TickSource);\n\n\t\t/**\n\t\t *  The frequency the callback function should be invoked.\n\t\t *  @type  {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.TickSignal(options.frequency);\n\t\tthis._readOnly(\"frequency\");\n\n\t\t/**\n\t\t *  The state timeline\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, 0);\n\n\t\t/**\n\t\t * The offset values of the ticks\n\t\t * @type {Tone.Timeline}\n\t\t * @private\n\t\t */\n\t\tthis._tickOffset = new Tone.Timeline();\n\t\t//add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t};\n\n\tTone.extend(Tone.TickSource);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.TickSource.defaults = {\n\t\t\"frequency\" : 1,\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.TickSource#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.TickSource.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._state.getValueAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  {Time=}  time    The time the clock should start\n\t *  @param {Ticks} [offset=0] The number of ticks to start the source at\n\t *  @return  {Tone.TickSource}  this\n\t */\n\tTone.TickSource.prototype.start = function(time, offset){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) !== Tone.State.Started){\n\t\t\tthis._state.setStateAtTime(Tone.State.Started, time);\n\t\t\tif (Tone.isDefined(offset)){\n\t\t\t\tthis.setTicksAtTime(offset, time);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.TickSource} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tTone.TickSource.prototype.stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\t//cancel the previous stop\n\t\tif (this._state.getValueAtTime(time) === Tone.State.Stopped){\n\t\t\tvar event = this._state.get(time);\n\t\t\tif (event.time > 0){\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, time);\n\t\tthis.setTicksAtTime(0, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.TickSource} this\n\t */\n\tTone.TickSource.prototype.pause = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === Tone.State.Started){\n\t\t\tthis._state.setStateAtTime(Tone.State.Paused, time);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t *  @param {Time} [time=now] When to clear the events after\n\t *  @returns {Tone.TickSource} this\n\t */\n\tTone.TickSource.prototype.cancel = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  {Time} time  When to get the tick value\n\t * @return {Ticks}     The number of ticks\n\t */\n\tTone.TickSource.prototype.getTicksAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar stopEvent = this._state.getLastState(Tone.State.Stopped, time);\n\t\t//this event allows forEachBetween to iterate until the current time\n\t\tvar tmpEvent = { state : Tone.State.Paused, time : time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t//keep track of the previous offset event\n\t\tvar lastState = stopEvent;\n\t\tvar elapsedTicks = 0;\n\n\t\t//iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, function(e){\n\t\t\tvar periodStartTime = lastState.time;\n\t\t\t//if there is an offset event in this period use that\n\t\t\tvar offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent.time >= lastState.time){\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === Tone.State.Started && e.state !== Tone.State.Started){\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t} \n\t\t\tlastState = e;\n\t\t}.bind(this));\n\n\t\t//remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t//return the ticks\n\t\treturn elapsedTicks;\n\t};\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked. Returns -1 when stopped.\n\t *  @memberOf Tone.TickSource#\n\t *  @name ticks\n\t *  @type {Ticks}\n\t */\n\tObject.defineProperty(Tone.TickSource.prototype, \"ticks\", {\n\t\tget : function(){\n\t\t\treturn this.getTicksAtTime(this.now());\n\t\t},\n\t\tset : function(t){\n\t\t\tthis.setTicksAtTime(t, this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  The time since ticks=0 that the TickSource has been running. Accounts\n\t *  for tempo curves\n\t *  @memberOf Tone.TickSource#\n\t *  @name seconds\n\t *  @type {Seconds}\n\t */\n\tObject.defineProperty(Tone.TickSource.prototype, \"seconds\", {\n\t\tget : function(){\n\t\t\treturn this.getSecondsAtTime(this.now());\n\t\t},\n\t\tset : function(s){\n\t\t\tvar now = this.now();\n\t\t\tvar ticks = this.frequency.timeToTicks(s, now);\n\t\t\tthis.setTicksAtTime(ticks, now);\n\t\t}\n\t});\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  {Time}  time  When to get the elapsed seconds\n\t *  @return  {Seconds}  The number of elapsed seconds\n\t */\n\tTone.TickSource.prototype.getSecondsAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar stopEvent = this._state.getLastState(Tone.State.Stopped, time);\n\t\t//this event allows forEachBetween to iterate until the current time\n\t\tvar tmpEvent = { state : Tone.State.Paused, time : time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t//keep track of the previous offset event\n\t\tvar lastState = stopEvent;\n\t\tvar elapsedSeconds = 0;\n\n\t\t//iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, function(e){\n\t\t\tvar periodStartTime = lastState.time;\n\t\t\t//if there is an offset event in this period use that\n\t\t\tvar offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent.time >= lastState.time){\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === Tone.State.Started && e.state !== Tone.State.Started){\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t} \n\t\t\tlastState = e;\n\t\t}.bind(this));\n\n\t\t//remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t//return the ticks\n\t\treturn elapsedSeconds;\n\t};\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  {Ticks} ticks The tick value to set\n\t * @param  {Time} time  When to set the tick value\n\t * @return {Tone.TickSource}       this\n\t */\n\tTone.TickSource.prototype.setTicksAtTime = function(ticks, time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\t\"time\" : time,\n\t\t\t\"ticks\" : ticks,\n\t\t\t\"seconds\" : this.frequency.getDurationOfTicks(ticks, time)\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  {Time}  time  The time to query.\n\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t *  @example\n\t * source.start(\"+0.1\");\n\t * source.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tTone.TickSource.prototype.getStateAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t};\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value. \n\t * @param  {Ticks} ticks The tick number.\n\t * @param  {Time=} before When to measure the tick value from. \n\t * @return {Time}       The time of the tick\n\t */\n\tTone.TickSource.prototype.getTimeOfTick = function(tick, before){\n\t\tbefore = Tone.defaultArg(before, this.now());\n\t\tvar offset = this._tickOffset.get(before);\n\t\tvar event = this._state.get(before);\n\t\tvar startTime = Math.max(offset.time, event.time);\n\t\tvar absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t};\n\n\t/**\n\t *  Invoke the callback event at all scheduled ticks between the \n\t *  start time and the end time\n\t *  @param  {Time}    startTime  The beginning of the search range\n\t *  @param  {Time}    endTime    The end of the search range\n\t *  @param  {Function<Time,Ticks>}  callback   The callback to invoke with each tick\n\t *  @return  {Tone.TickSource}    this\n\t */\n\tTone.TickSource.prototype.forEachTickBetween = function(startTime, endTime, callback){\n\n\t\t//only iterate through the sections where it is \"started\"\n\t\tvar lastStateEvent = this._state.get(startTime);\n\t\tthis._state.forEachBetween(startTime, endTime, function(event){\n\t\t\tif (lastStateEvent.state === Tone.State.Started && event.state !== Tone.State.Started){\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t}.bind(this));\n\n\t\tstartTime = Math.max(lastStateEvent.time, startTime);\n\n\t\tif (lastStateEvent.state === Tone.State.Started && this._state){\n\t\t\t//figure out the difference between the frequency ticks and the \n\t\t\tvar startTicks = this.frequency.getTicksAtTime(startTime);\n\t\t\tvar ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tvar diff = startTicks - ticksAtStart;\n\t\t\tvar offset = diff % 1;\n\t\t\tif (offset !== 0){\n\t\t\t\toffset = 1 - offset;\n\t\t\t}\n\t\t\tvar nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\tvar error = null;\n\t\t\twhile (nextTickTime < endTime && this._state){\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e){\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._state){\n\t\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\n\t\tif (error){\n\t\t\tthrow error;\n\t\t}\n\t\t\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.TickSource} this\n\t */\n\tTone.TickSource.prototype.dispose = function(){\n\t\tTone.Param.prototype.dispose.call(this);\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t\tthis._tickOffset.dispose();\n\t\tthis._tickOffset = null;\n\t\tthis._writable(\"frequency\");\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.TickSource;\n});\n","define([\"../core/Tone\", \"../type/Ticks\"], function(Tone){\n\n\t/**\n\t *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]\n\t *         to schedule events. Do no invoke this class directly, it is\n\t *         handled from within Tone.Transport.\n\t *  @extends {Tone}\n\t *  @param {Object} options\n\t */\n\tTone.TransportEvent = function(Transport, options){\n\n\t\toptions = Tone.defaultArg(options, Tone.TransportEvent.defaults);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t * Reference to the Transport that created it\n\t\t * @type {Tone.Transport}\n\t\t */\n\t\tthis.Transport = Transport;\n\n\t\t/**\n\t\t * The unique id of the event\n\t\t * @type {Number}\n\t\t */\n\t\tthis.id = Tone.TransportEvent._eventId++;\n\n\t\t/**\n\t\t * The time the event starts\n\t\t * @type {Ticks}\n\t\t */\n\t\tthis.time = Tone.Ticks(options.time);\n\n\t\t/**\n\t\t * The callback to invoke\n\t\t * @type {Function}\n\t\t */\n\t\tthis.callback = options.callback;\n\n\t\t/**\n\t\t * If the event should be removed after being created.\n\t\t * @type {Boolean}\n\t\t * @private\n\t\t */\n\t\tthis._once = options.once;\n\t};\n\n\tTone.extend(Tone.TransportEvent);\n\n\t/**\n\t * The defaults\n\t * @static\n\t * @type {Object}\n\t */\n\tTone.TransportEvent.defaults = {\n\t\t\"once\" : false,\n\t\t\"callback\" : Tone.noOp,\n\t};\n\n\t/**\n\t * Current ID counter\n\t * @private\n\t * @static\n\t * @type {Number}\n\t */\n\tTone.TransportEvent._eventId = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  {Time} time  The AudioContext time in seconds of the event\n\t */\n\tTone.TransportEvent.prototype.invoke = function(time){\n\t\tif (this.callback){\n\t\t\tthis.callback(time);\n\t\t\tif (this._once && this.Transport){\n\t\t\t\tthis.Transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Clean up\n\t * @return {Tone.TransportEvent} this\n\t */\n\tTone.TransportEvent.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis.Transport = null;\n\t\tthis.callback = null;\n\t\tthis.time = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.TransportEvent;\n});\n","define([\"../core/Tone\", \"../type/TransportTime\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Ticks is a primitive type for encoding Time values.\n\t *         Tone.Ticks can be constructed with or without the `new` keyword. Tone.Ticks can be passed\n\t *         into the parameter of any method which takes time as an argument.\n\t *  @constructor\n\t *  @extends {Tone.TransportTime}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * var t = Tone.Ticks(\"4n\");//a quarter note\n\t */\n\tTone.Ticks = function(val, units){\n\t\tif (this instanceof Tone.Ticks){\n\n\t\t\tTone.TransportTime.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Ticks(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Ticks, Tone.TransportTime);\n\n\t/**\n\t *  The default units if none are given.\n\t *  @type {String}\n\t *  @private\n\t */\n\tTone.Ticks.prototype._defaultUnits = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t * @return {Ticks}\n\t * @private\n\t */\n\tTone.Ticks.prototype._now = function(){\n\t\treturn Tone.Transport.ticks;\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Ticks.prototype._beatsToUnits = function(beats){\n\t\treturn this._getPPQ() * beats;\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Ticks.prototype._secondsToUnits = function(seconds){\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Ticks.prototype._ticksToUnits = function(ticks){\n\t\treturn ticks;\n\t};\n\n\t/**\n\t *  Return the time in ticks\n\t *  @return  {Ticks}\n\t */\n\tTone.Ticks.prototype.toTicks = function(){\n\t\treturn this.valueOf();\n\t};\n\n\t/**\n\t *  Return the time in ticks\n\t *  @return  {Ticks}\n\t */\n\tTone.Ticks.prototype.toSeconds = function(){\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t};\n\n\treturn Tone.Ticks;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../component/Filter\", \"../core/AudioNode\", \"../component/FeedbackCombFilter\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to\n\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t *                                signal as it is fedback.\n\t */\n\tTone.LowpassCombFilter = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"delayTime\", \"resonance\", \"dampening\"], Tone.LowpassCombFilter);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  the delay node\n\t\t *  @type {DelayNode}\n\t\t *  @private\n\t\t */\n\t\tthis._combFilter = this.output = new Tone.FeedbackCombFilter(options.delayTime, options.resonance);\n\n\t\t/**\n\t\t *  The delayTime of the comb filter.\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.delayTime = this._combFilter.delayTime;\n\n\t\t/**\n\t\t *  the lowpass filter\n\t\t *  @type  {BiquadFilterNode}\n\t\t *  @private\n\t\t */\n\t\tthis._lowpass = this.input = new Tone.Filter({\n\t\t\t\"frequency\" : options.dampening,\n\t\t\t\"type\" : \"lowpass\",\n\t\t\t\"Q\" : 0,\n\t\t\t\"rolloff\" : -12\n\t\t});\n\n\t\t/**\n\t\t *  The dampening control of the feedback\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.dampening = this._lowpass.frequency;\n\t\t\n\t\t/**\n\t\t *  The amount of feedback of the delayed signal.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.resonance = this._combFilter.resonance;\n\n\t\t//connections\n\t\tthis._lowpass.connect(this._combFilter);\n\t\tthis._readOnly([\"dampening\", \"resonance\", \"delayTime\"]);\n\t};\n\n\tTone.extend(Tone.LowpassCombFilter, Tone.AudioNode);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.LowpassCombFilter.defaults = {\n\t\t\"delayTime\" : 0.1,\n\t\t\"resonance\" : 0.5,\n\t\t\"dampening\" : 3000\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.LowpassCombFilter} this\n\t */\n\tTone.LowpassCombFilter.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"dampening\", \"resonance\", \"delayTime\"]);\n\t\tthis._combFilter.dispose();\n\t\tthis._combFilter = null;\n\t\tthis.resonance = null;\n\t\tthis.delayTime = null;\n\t\tthis._lowpass.dispose();\n\t\tthis._lowpass = null;\n\t\tthis.dampening = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.LowpassCombFilter;\n});\n","define([\"../core/Tone\", \"../signal/Add\", \"../signal/Subtract\", \"../signal/Signal\",\n\t\"../component/Split\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Mid/Side processing separates the the 'mid' signal\n\t *         (which comes out of both the left and the right channel)\n\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t *         <code>\n\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t *         </code>\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t */\n\tTone.MidSideSplit = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(0, 2);\n\n\t\t/**\n\t\t *  split the incoming signal into left and right channels\n\t\t *  @type  {Tone.Split}\n\t\t *  @private\n\t\t */\n\t\tthis._split = this.input = new Tone.Split();\n\n\t\t/**\n\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t *  <code>output[0]</code>\n\t\t *  @type {Tone.Add}\n\t\t */\n\t\tthis._midAdd = new Tone.Add();\n\n\t\t/**\n\t\t * Multiply the _midAdd by sqrt(1/2)\n\t\t * @type {Tone.Multiply}\n\t\t */\n\t\tthis.mid = this.output[0] = new Tone.Multiply(Math.SQRT1_2);\n\n\t\t/**\n\t\t *  The side output. Connect to side processing. Also Output 1\n\t\t *  @type {Tone.Subtract}\n\t\t */\n\t\tthis._sideSubtract = new Tone.Subtract();\n\n\t\t/**\n\t\t * Multiply the _midAdd by sqrt(1/2)\n\t\t * @type {Tone.Multiply}\n\t\t */\n\t\tthis.side = this.output[1] = new Tone.Multiply(Math.SQRT1_2);\n\n\t\tthis._split.connect(this._midAdd, 0, 0);\n\t\tthis._split.connect(this._midAdd, 1, 1);\n\t\tthis._split.connect(this._sideSubtract, 0, 0);\n\t\tthis._split.connect(this._sideSubtract, 1, 1);\n\t\tthis._midAdd.connect(this.mid);\n\t\tthis._sideSubtract.connect(this.side);\n\t};\n\n\tTone.extend(Tone.MidSideSplit, Tone.AudioNode);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.MidSideSplit} this\n\t */\n\tTone.MidSideSplit.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.mid.dispose();\n\t\tthis.mid = null;\n\t\tthis.side.dispose();\n\t\tthis.side = null;\n\t\tthis._midAdd.dispose();\n\t\tthis._midAdd = null;\n\t\tthis._sideSubtract.dispose();\n\t\tthis._sideSubtract = null;\n\t\tthis._split.dispose();\n\t\tthis._split = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MidSideSplit;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../signal/Subtract\", \"../signal/Add\",\n\t\"../component/Merge\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Mid/Side processing separates the the 'mid' signal\n\t *         (which comes out of both the left and the right channel)\n\t *         and the 'side' (which only comes out of the the side channels).\n\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t *         by Tone.MidSideSplit.<br><br>\n\t *         <code>\n\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t *         </code>\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t */\n\tTone.MidSideMerge = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(2, 0);\n\n\t\t/**\n\t\t *  The mid signal input. Alias for\n\t\t *  <code>input[0]</code>\n\t\t *  @type  {Tone.Gain}\n\t\t */\n\t\tthis.mid = this.input[0] = new Tone.Gain();\n\n\t\t/**\n\t\t *  recombine the mid/side into Left\n\t\t *  @type {Tone.Add}\n\t\t *  @private\n\t\t */\n\t\tthis._left = new Tone.Add();\n\n\t\t/**\n\t\t * Multiply the left by sqrt(1/2)\n\t\t * @type {Tone.Multiply}\n\t\t */\n\t\tthis._timesTwoLeft = new Tone.Multiply(Math.SQRT1_2);\n\n\t\t/**\n\t\t *  The side signal input. Alias for\n\t\t *  <code>input[1]</code>\n\t\t *  @type  {Tone.Gain}\n\t\t */\n\t\tthis.side = this.input[1] = new Tone.Gain();\n\n\t\t/**\n\t\t *  recombine the mid/side into Right\n\t\t *  @type {Tone.Subtract}\n\t\t *  @private\n\t\t */\n\t\tthis._right = new Tone.Subtract(/*\"($0 - $1) * $2\"*/);\n\n\t\t/**\n\t\t * Multiply the right by sqrt(1/2)\n\t\t * @type {Tone.Multiply}\n\t\t */\n\t\tthis._timesTwoRight = new Tone.Multiply(Math.SQRT1_2);\n\n\t\t/**\n\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t *  @type {Tone.Merge}\n\t\t *  @private\n\t\t */\n\t\tthis._merge = this.output = new Tone.Merge();\n\n\t\tthis.mid.connect(this._left, 0, 0);\n\t\tthis.side.connect(this._left, 0, 1);\n\t\tthis.mid.connect(this._right, 0, 0);\n\t\tthis.side.connect(this._right, 0, 1);\n\t\tthis._left.connect(this._timesTwoLeft);\n\t\tthis._right.connect(this._timesTwoRight);\n\t\tthis._timesTwoLeft.connect(this._merge, 0, 0);\n\t\tthis._timesTwoRight.connect(this._merge, 0, 1);\n\t};\n\n\tTone.extend(Tone.MidSideMerge, Tone.AudioNode);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.MidSideMerge} this\n\t */\n\tTone.MidSideMerge.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.mid.dispose();\n\t\tthis.mid = null;\n\t\tthis.side.dispose();\n\t\tthis.side = null;\n\t\tthis._left.dispose();\n\t\tthis._left = null;\n\t\tthis._timesTwoLeft.dispose();\n\t\tthis._timesTwoLeft = null;\n\t\tthis._right.dispose();\n\t\tthis._right = null;\n\t\tthis._timesTwoRight.dispose();\n\t\tthis._timesTwoRight = null;\n\t\tthis._merge.dispose();\n\t\tthis._merge = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MidSideMerge;\n});\n","define([\"../core/Tone\", \"../core/Transport\", \"../type/Type\", \"../core/TimelineState\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t *          callback for a single or repeatable events along the timeline.\n\t *\n\t *  @extends {Tone}\n\t *  @param {function} callback The callback to invoke at the time.\n\t *  @param {*} value The value or values which should be passed to\n\t *                      the callback function on invocation.\n\t *  @example\n\t * var chord = new Tone.Event(function(time, chord){\n\t * \t//the chord as well as the exact time of the event\n\t * \t//are passed in as arguments to the callback function\n\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t * //start the chord at the beginning of the transport timeline\n\t * chord.start();\n\t * //loop it every measure for 8 measures\n\t * chord.loop = 8;\n\t * chord.loopEnd = \"1m\";\n\t */\n\tTone.Event = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"callback\", \"value\"], Tone.Event);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  Loop value\n\t\t *  @type  {Boolean|Positive}\n\t\t *  @private\n\t\t */\n\t\tthis._loop = options.loop;\n\n\t\t/**\n\t\t *  The callback to invoke.\n\t\t *  @type  {Function}\n\t\t */\n\t\tthis.callback = options.callback;\n\n\t\t/**\n\t\t *  The value which is passed to the\n\t\t *  callback function.\n\t\t *  @type  {*}\n\t\t *  @private\n\t\t */\n\t\tthis.value = options.value;\n\n\t\t/**\n\t\t *  When the note is scheduled to start.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\n\t\t/**\n\t\t *  When the note is scheduled to start.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\n\t\t/**\n\t\t *  Tracks the scheduled events\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\n\t\t/**\n\t\t *  The playback speed of the note. A speed of 1\n\t\t *  is no change.\n\t\t *  @private\n\t\t *  @type {Positive}\n\t\t */\n\t\tthis._playbackRate = 1;\n\n\t\t/**\n\t\t *  A delay time from when the event is scheduled to start\n\t\t *  @type {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._startOffset = 0;\n\n\t\t/**\n\t\t *  private holder of probability value\n\t\t *  @type {NormalRange}\n\t\t *  @private\n\t\t */\n\t\tthis._probability = options.probability;\n\n\t\t/**\n\t\t *  the amount of variation from the\n\t\t *  given time.\n\t\t *  @type {Boolean|Time}\n\t\t *  @private\n\t\t */\n\t\tthis._humanize = options.humanize;\n\n\t\t/**\n\t\t *  If mute is true, the callback won't be\n\t\t *  invoked.\n\t\t *  @type {Boolean}\n\t\t */\n\t\tthis.mute = options.mute;\n\n\t\t//set the initial values\n\t\tthis.playbackRate = options.playbackRate;\n\t};\n\n\tTone.extend(Tone.Event);\n\n\t/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Event.defaults = {\n\t\t\"callback\" : Tone.noOp,\n\t\t\"loop\" : false,\n\t\t\"loopEnd\" : \"1m\",\n\t\t\"loopStart\" : 0,\n\t\t\"playbackRate\" : 1,\n\t\t\"value\" : null,\n\t\t\"probability\" : 1,\n\t\t\"mute\" : false,\n\t\t\"humanize\" : false,\n\t};\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param {Time} after Only reschedules events after the given time.\n\t *  @return  {Tone.Event}  this\n\t *  @private\n\t */\n\tTone.Event.prototype._rescheduleEvents = function(after){\n\t\t//if no argument is given, schedules all of the events\n\t\tafter = Tone.defaultArg(after, -1);\n\t\tthis._state.forEachFrom(after, function(event){\n\t\t\tvar duration;\n\t\t\tif (event.state === Tone.State.Started){\n\t\t\t\tif (Tone.isDefined(event.id)){\n\t\t\t\t\tTone.Transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tvar startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop){\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (Tone.isNumber(this._loop)){\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tvar nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null){\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity){\n\t\t\t\t\t\t//schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t\t\t\t\t\tduration = Tone.Ticks(duration);\n\t\t\t\t\t}\n\t\t\t\t\tvar interval = Tone.Ticks(this._getLoopDuration());\n\t\t\t\t\tevent.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.Ticks(startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = Tone.Transport.schedule(this._tick.bind(this), Tone.Ticks(startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.Event#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._state.getValueAtTime(Tone.Transport.ticks);\n\t\t}\n\t});\n\n\t/**\n\t *  The start from the scheduled start time\n\t *  @type {Ticks}\n\t *  @memberOf Tone.Event#\n\t *  @name startOffset\n\t *  @private\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"startOffset\", {\n\t\tget : function(){\n\t\t\treturn this._startOffset;\n\t\t},\n\t\tset : function(offset){\n\t\t\tthis._startOffset = offset;\n\t\t}\n\t});\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t *  @memberOf Tone.Event#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"probability\", {\n\t\tget : function(){\n\t\t\treturn this._probability;\n\t\t},\n\t\tset : function(prob){\n\t\t\tthis._probability = prob;\n\t\t}\n\t});\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t *  @example\n\t * event.humanize = true;\n\t *  @type {Boolean|Time}\n\t *  @name humanize\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"humanize\", {\n\t\tget : function(){\n\t\t\treturn this._humanize;\n\t\t},\n\t\tset : function(variation){\n\t\t\tthis._humanize = variation;\n\t\t}\n\t});\n\n\t/**\n\t *  Start the note at the given time.\n\t *  @param  {TimelinePosition}  time  When the note should start.\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.start = function(time){\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === Tone.State.Stopped){\n\t\t\tthis._state.add({\n\t\t\t\t\"state\" : Tone.State.Started,\n\t\t\t\t\"time\" : time,\n\t\t\t\t\"id\" : undefined,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(time);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.stop = function(time){\n\t\tthis.cancel(time);\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(time) === Tone.State.Started){\n\t\t\tthis._state.setStateAtTime(Tone.State.Stopped, time);\n\t\t\tvar previousEvent = this._state.getBefore(time);\n\t\t\tvar reschedulTime = time;\n\t\t\tif (previousEvent !== null){\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.cancel = function(time){\n\t\ttime = Tone.defaultArg(time, -Infinity);\n\t\ttime = this.toTicks(time);\n\t\tthis._state.forEachFrom(time, function(event){\n\t\t\tTone.Transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The callback function invoker. Also\n\t *  checks if the Event is done playing\n\t *  @param  {Number}  time  The time of the event in seconds\n\t *  @private\n\t */\n\tTone.Event.prototype._tick = function(time){\n\t\tvar ticks = Tone.Transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === Tone.State.Started){\n\t\t\tif (this.probability < 1 && Math.random() > this.probability){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize){\n\t\t\t\tvar variation = 0.02;\n\t\t\t\tif (!Tone.isBoolean(this.humanize)){\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t};\n\n\t/**\n\t *  Get the duration of the loop.\n\t *  @return  {Ticks}\n\t *  @private\n\t */\n\tTone.Event.prototype._getLoopDuration = function(){\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t};\n\n\t/**\n\t *  If the note should loop or not\n\t *  between Tone.Event.loopStart and\n\t *  Tone.Event.loopEnd. An integer\n\t *  value corresponds to the number of\n\t *  loops the Event does after it starts.\n\t *  @memberOf Tone.Event#\n\t *  @type {Boolean|Positive}\n\t *  @name loop\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"loop\", {\n\t\tget : function(){\n\t\t\treturn this._loop;\n\t\t},\n\t\tset : function(loop){\n\t\t\tthis._loop = loop;\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t});\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @memberOf Tone.Event#\n\t *  @type {Positive}\n\t *  @name playbackRate\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._playbackRate = rate;\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t});\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if Tone.Event.loop is true.\n\t *  @memberOf Tone.Event#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._loopEnd).toSeconds();\n\t\t},\n\t\tset : function(loopEnd){\n\t\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\t\tif (this._loop){\n\t\t\t\tthis._rescheduleEvents();\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The time when the loop should start.\n\t *  @memberOf Tone.Event#\n\t *  @type {Time}\n\t *  @name loopStart\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._loopStart).toSeconds();\n\t\t},\n\t\tset : function(loopStart){\n\t\t\tthis._loopStart = this.toTicks(loopStart);\n\t\t\tif (this._loop){\n\t\t\t\tthis._rescheduleEvents();\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t *  @memberOf Tone.Event#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"progress\", {\n\t\tget : function(){\n\t\t\tif (this._loop){\n\t\t\t\tvar ticks = Tone.Transport.ticks;\n\t\t\t\tvar lastEvent = this._state.get(ticks);\n\t\t\t\tif (lastEvent !== null && lastEvent.state === Tone.State.Started){\n\t\t\t\t\tvar loopDuration = this._getLoopDuration();\n\t\t\t\t\tvar progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\t\treturn progress / loopDuration;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.dispose = function(){\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t\tthis.callback = null;\n\t\tthis.value = null;\n\t};\n\n\treturn Tone.Event;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../source/Oscillator\",\n\t\"../signal/Signal\", \"../signal/WaveShaper\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is\n\t *         a square and only odd-numbered harmonics are present. At all other widths\n\t *         even-numbered harmonics are present. Read more\n\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Source}\n\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t *  @param {NormalRange} [width] The width of the pulse\n\t *  @example\n\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t */\n\tTone.PulseOscillator = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"width\"], Tone.Oscillator);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  The width of the pulse.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  gate the width amount\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._widthGate = new Tone.Gain(0);\n\n\t\t/**\n\t\t *  the sawtooth oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._sawtooth = new Tone.Oscillator({\n\t\t\tfrequency : options.frequency,\n\t\t\tdetune : options.detune,\n\t\t\ttype : \"sawtooth\",\n\t\t\tphase : options.phase\n\t\t});\n\n\t\t/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this._sawtooth.frequency;\n\n\t\t/**\n\t\t *  The detune in cents.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = this._sawtooth.detune;\n\n\t\t/**\n\t\t *  Threshold the signal to turn it into a square\n\t\t *  @type {Tone.WaveShaper}\n\t\t *  @private\n\t\t */\n\t\tthis._thresh = new Tone.WaveShaper(function(val){\n\t\t\tif (val < 0){\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t});\n\n\t\t//connections\n\t\tthis._sawtooth.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\tthis._readOnly([\"width\", \"frequency\", \"detune\"]);\n\t};\n\n\tTone.extend(Tone.PulseOscillator, Tone.Source);\n\n\t/**\n\t *  The default parameters.\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.PulseOscillator.defaults = {\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"phase\" : 0,\n\t\t\"width\" : 0.2,\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param  {Time} time\n\t *  @private\n\t */\n\tTone.PulseOscillator.prototype._start = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t};\n\n\t/**\n\t *  stop the oscillator\n\t *  @param  {Time} time\n\t *  @private\n\t */\n\tTone.PulseOscillator.prototype._stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._sawtooth.stop(time);\n\t\t//the width is still connected to the output.\n\t\t//that needs to be stopped also\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t};\n\n\t/**\n\t *  restart the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.PulseOscillator.prototype.restart = function(time){\n\t\tthis._sawtooth.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t};\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.PulseOscillator#\n\t * @type {Degrees}\n\t * @name phase\n\t */\n\tObject.defineProperty(Tone.PulseOscillator.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._sawtooth.phase;\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._sawtooth.phase = phase;\n\t\t}\n\t});\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t * @readOnly\n\t * @memberOf Tone.PulseOscillator#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.PulseOscillator.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn \"pulse\";\n\t\t}\n\t});\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t * @readOnly\n\t * @memberOf Tone.PulseOscillator#\n\t * @type {string}\n\t * @name baseType\n\t */\n\tObject.defineProperty(Tone.PulseOscillator.prototype, \"baseType\", {\n\t\tget : function(){\n\t\t\treturn \"pulse\";\n\t\t}\n\t});\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t * @memberOf Tone.PulseOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @private\n\t */\n\tObject.defineProperty(Tone.PulseOscillator.prototype, \"partials\", {\n\t\tget : function(){\n\t\t\treturn [];\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up method.\n\t *  @return {Tone.PulseOscillator} this\n\t */\n\tTone.PulseOscillator.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis._sawtooth.dispose();\n\t\tthis._sawtooth = null;\n\t\tthis._writable([\"width\", \"frequency\", \"detune\"]);\n\t\tthis.width.dispose();\n\t\tthis.width = null;\n\t\tthis._widthGate.dispose();\n\t\tthis._widthGate = null;\n\t\tthis._thresh.dispose();\n\t\tthis._thresh = null;\n\t\tthis.frequency = null;\n\t\tthis.detune = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.PulseOscillator;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../source/Oscillator\",\n\t\"../signal/Multiply\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.FMOscillator\n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t *  @param {String} type The type of the carrier oscillator.\n\t *  @param {String} modulationType The type of the modulator oscillator.\n\t *  @example\n\t * //a sine oscillator frequency-modulated by a square wave\n\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t */\n\tTone.FMOscillator = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"type\", \"modulationType\"], Tone.FMOscillator);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  The carrier oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._carrier = new Tone.Oscillator(options.frequency, options.type);\n\n\t\t/**\n\t\t *  The oscillator's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = this._carrier.detune;\n\t\tthis.detune.value = options.detune;\n\n\t\t/**\n\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t *  modulating signal (ma) -- as in ma/mf.\n\t\t *\t@type {Positive}\n\t\t *\t@signal\n\t\t */\n\t\tthis.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t\tthis.modulationIndex.units = Tone.Type.Positive;\n\n\t\t/**\n\t\t *  The modulating oscillator\n\t\t *  @type  {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\n\t\t/**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t\t *  Harmonicity = 2 means a change of an octave.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch the modulator an octave below carrier\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */\n\t\tthis.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\tthis.harmonicity.units = Tone.Type.Positive;\n\n\t\t/**\n\t\t *  the node where the modulation happens\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._modulationNode = new Tone.Gain(0);\n\n\t\t//connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\tthis.phase = options.phase;\n\n\t\tthis._readOnly([\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t};\n\n\tTone.extend(Tone.FMOscillator, Tone.Source);\n\n\t/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.FMOscillator.defaults = {\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"phase\" : 0,\n\t\t\"type\" : \"sine\",\n\t\t\"modulationIndex\" : 2,\n\t\t\"modulationType\" : \"square\",\n\t\t\"harmonicity\" : 1\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param  {Time} [time=now]\n\t *  @private\n\t */\n\tTone.FMOscillator.prototype._start = function(time){\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t};\n\n\t/**\n\t *  stop the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.FMOscillator.prototype._stop = function(time){\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t};\n\n\t/**\n\t *  stop the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.FMOscillator.prototype.restart = function(time){\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t};\n\n\t/**\n\t * The type of the carrier oscillator\n\t * @memberOf Tone.FMOscillator#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.FMOscillator.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._carrier.type = type;\n\t\t}\n\t});\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @memberOf Tone.FMOscillator#\n\t * @type {string}\n\t * @name baseType\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tObject.defineProperty(Tone.FMOscillator.prototype, \"baseType\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.baseType;\n\t\t},\n\t\tset : function(baseType){\n\t\t\tthis._carrier.baseType = baseType;\n\t\t}\n\t});\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials. \n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is \n\t * not settable, but equals the length of the partials array.\n\t * @memberOf Tone.FMOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tObject.defineProperty(Tone.FMOscillator.prototype, \"partialCount\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.partialCount;\n\t\t},\n\t\tset : function(partialCount){\n\t\t\tthis._carrier.partialCount = partialCount;\n\t\t}\n\t});\n\n\t/**\n\t * The type of the modulator oscillator\n\t * @memberOf Tone.FMOscillator#\n\t * @type {String}\n\t * @name modulationType\n\t */\n\tObject.defineProperty(Tone.FMOscillator.prototype, \"modulationType\", {\n\t\tget : function(){\n\t\t\treturn this._modulator.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._modulator.type = type;\n\t\t}\n\t});\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.FMOscillator#\n\t * @type {number}\n\t * @name phase\n\t */\n\tObject.defineProperty(Tone.FMOscillator.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.phase;\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._carrier.phase = phase;\n\t\t\tthis._modulator.phase = phase;\n\t\t}\n\t});\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf Tone.FMOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tObject.defineProperty(Tone.FMOscillator.prototype, \"partials\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.partials;\n\t\t},\n\t\tset : function(partials){\n\t\t\tthis._carrier.partials = partials;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.FMOscillator} this\n\t */\n\tTone.FMOscillator.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis._writable([\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis.detune = null;\n\t\tthis.harmonicity.dispose();\n\t\tthis.harmonicity = null;\n\t\tthis._carrier.dispose();\n\t\tthis._carrier = null;\n\t\tthis._modulator.dispose();\n\t\tthis._modulator = null;\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationNode = null;\n\t\tthis.modulationIndex.dispose();\n\t\tthis.modulationIndex = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.FMOscillator;\n});\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = require('./_export');\n\n$export($export.P, 'Function', { bind: require('./_bind') });\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","define([\"../core/Tone\", \"../shim/AudioContext\"], function(Tone){\n\n\tif (Tone.supported && !Tone.global.AudioContext.prototype._native_createWaveShaper){\n\n\t\t//fixes safari only bug which is still present in 11\n\t\tvar ua = navigator.userAgent.toLowerCase();\n\t\tvar isSafari = ua.includes(\"safari\") && !ua.includes(\"chrome\");\n\t\tif (isSafari){\n\n\t\t\tvar WaveShaperNode = function(context){\n\n\t\t\t\tthis._internalNode = this.input = this.output = context._native_createWaveShaper();\n\n\t\t\t\tthis._curve = null;\n\n\t\t\t\tfor (var prop in this._internalNode){\n\t\t\t\t\tthis._defineProperty(this._internalNode, prop);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tObject.defineProperty(WaveShaperNode.prototype, \"curve\", {\n\t\t\t\t\"get\" : function(){\n\t\t\t\t\treturn this._curve;\n\t\t\t\t},\n\t\t\t\t\"set\" : function(curve){\n\t\t\t\t\tthis._curve = curve;\n\t\t\t\t\tvar array = new Float32Array(curve.length+1);\n\t\t\t\t\tarray.set(curve, 1);\n\t\t\t\t\tarray[0] = curve[0];\n\t\t\t\t\tthis._internalNode.curve = array;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tWaveShaperNode.prototype._defineProperty = function(context, prop){\n\t\t\t\tif (Tone.isUndef(this[prop])){\n\t\t\t\t\tObject.defineProperty(this, prop, {\n\t\t\t\t\t\t\"get\" : function(){\n\t\t\t\t\t\t\tif (typeof context[prop] === \"function\"){\n\t\t\t\t\t\t\t\treturn context[prop].bind(context);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn context[prop];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"set\" : function(val){\n\t\t\t\t\t\t\tcontext[prop] = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tTone.global.AudioContext.prototype._native_createWaveShaper = Tone.global.AudioContext.prototype.createWaveShaper;\n\t\t\tTone.global.AudioContext.prototype.createWaveShaper = function(){\n\t\t\t\treturn new WaveShaperNode(this);\n\t\t\t};\n\t\t}\n\t}\n\n});\n","define([\"../core/Tone\", \"../shim/AudioContext\", \"../shim/BufferSourceNode\",\n\t\"../core/Context\", \"../core/Gain\"], function(Tone){\n\n\tif (Tone.supported && !Tone.global.AudioContext.prototype.createConstantSource){\n\n\t\tvar ConstantSourceNode = function(context){\n\t\t\tthis.context = context;\n\n\t\t\tvar buffer = context.createBuffer(1, 128, context.sampleRate);\n\t\t\tvar arr = buffer.getChannelData(0);\n\t\t\tfor (var i = 0; i < arr.length; i++){\n\t\t\t\tarr[i] = 1;\n\t\t\t}\n\n\t\t\tthis._bufferSource = context.createBufferSource();\n\t\t\tthis._bufferSource.channelCount = 1;\n\t\t\tthis._bufferSource.channelCountMode = \"explicit\";\n\t\t\tthis._bufferSource.buffer = buffer;\n\t\t\tthis._bufferSource.loop = true;\n\n\t\t\tvar gainNode = this._output = context.createGain();\n\t\t\tthis.offset = gainNode.gain;\n\n\t\t\tthis._bufferSource.connect(gainNode);\n\t\t};\n\n\t\tConstantSourceNode.prototype.start = function(time){\n\t\t\tthis._bufferSource.start(time);\n\t\t\treturn this;\n\t\t};\n\n\t\tConstantSourceNode.prototype.stop = function(time){\n\t\t\tthis._bufferSource.stop(time);\n\t\t\treturn this;\n\t\t};\n\n\t\tConstantSourceNode.prototype.connect = function(){\n\t\t\tthis._output.connect.apply(this._output, arguments);\n\t\t\treturn this;\n\t\t};\n\n\t\tConstantSourceNode.prototype.disconnect = function(){\n\t\t\tthis._output.disconnect.apply(this._output, arguments);\n\t\t\treturn this;\n\t\t};\n\n\t\tAudioContext.prototype.createConstantSource = function(){\n\t\t\treturn new ConstantSourceNode(this);\n\t\t};\n\n\t\tTone.Context.prototype.createConstantSource = function(){\n\t\t\treturn new ConstantSourceNode(this);\n\t\t};\n\t}\n});\n","define([\"../core/Tone\", \"../shim/AudioContext\"], function(Tone){\n\n\t/**\n\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t *  @private\n\t */\n\tif (Tone.supported){\n\t\tif (!AnalyserNode.prototype.getFloatTimeDomainData){\n\t\t\t//referenced https://github.com/mohayonao/get-float-time-domain-data\n\t\t\tAnalyserNode.prototype.getFloatTimeDomainData = function(array){\n\t\t\t\tvar uint8 = new Uint8Array(array.length);\n\t\t\t\tthis.getByteTimeDomainData(uint8);\n\t\t\t\tfor (var i = 0; i < uint8.length; i++){\n\t\t\t\t\tarray[i] = (uint8[i] - 128) / 128;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n});\n","define([\"../core/Tone\", \"../component/Panner\", \"../component/Volume\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {AudioRange} pan the initial pan\n\t *  @param {number} volume The output volume.\n\t *  @example\n\t * //pan the incoming signal left and drop the volume\n\t * var panVol = new Tone.PanVol(-0.25, -12);\n\t */\n\tTone.PanVol = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"pan\", \"volume\"], Tone.PanVol);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The panning node\n\t\t *  @type {Tone.Panner}\n\t\t *  @private\n\t\t */\n\t\tthis._panner = this.input = new Tone.Panner(options.pan);\n\n\t\t/**\n\t\t *  The L/R panning control.\n\t\t *  @type {AudioRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.pan = this._panner.pan;\n\n\t\t/**\n\t\t *  The volume node\n\t\t *  @type {Tone.Volume}\n\t\t *  @private\n\t\t */\n\t\tthis._volume = this.output = new Tone.Volume(options.volume);\n\n\t\t/**\n\t\t *  The volume control in decibels.\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */\n\t\tthis.volume = this._volume.volume;\n\n\t\t//connections\n\t\tthis._panner.connect(this._volume);\n\t\tthis.mute = options.mute;\n\n\t\tthis._readOnly([\"pan\", \"volume\"]);\n\t};\n\n\tTone.extend(Tone.PanVol, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @type  {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.PanVol.defaults = {\n\t\t\"pan\" : 0,\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t * Mute/unmute the volume\n\t * @memberOf Tone.PanVol#\n\t * @name mute\n\t * @type {Boolean}\n\t */\n\tObject.defineProperty(Tone.PanVol.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.PanVol} this\n\t */\n\tTone.PanVol.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"pan\", \"volume\"]);\n\t\tthis._panner.dispose();\n\t\tthis._panner = null;\n\t\tthis.pan = null;\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis.volume = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.PanVol;\n});\n","define([\"../core/Tone\", \"../signal/Multiply\", \"../signal/Signal\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @example\n\t * var neg = new Tone.Negate();\n\t * var sig = new Tone.Signal(-2).connect(neg);\n\t * //output of neg is positive 2. \n\t */\n\tTone.Negate = function(){\n\n\t\tTone.SignalBase.call(this);\n\t\t/**\n\t\t *  negation is done by multiplying by -1\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t};\n\n\tTone.extend(Tone.Negate, Tone.SignalBase);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Negate} this\n\t */\n\tTone.Negate.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._multiply.dispose();\n\t\tthis._multiply = null;\n\t\treturn this;\n\t}; \n\n\treturn Tone.Negate;\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @example\n\t * var eqPowGain = new Tone.EqualPowerGain();\n\t */\n\tTone.EqualPowerGain = function(){\n\n\t\tTone.SignalBase.call(this);\n\t\t/**\n\t\t *  @type {Tone.WaveShaper}\n\t\t *  @private\n\t\t */\n\t\tthis._eqPower = this.input = this.output = new Tone.WaveShaper(function(val){\n\t\t\tif (Math.abs(val) < 0.001){\n\t\t\t\t//should output 0 when input is 0\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Tone.equalPowerScale(val);\n\t\t\t}\n\t\t}.bind(this), 4096);\n\t};\n\n\tTone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.EqualPowerGain} this\n\t */\n\tTone.EqualPowerGain.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._eqPower.dispose();\n\t\tthis._eqPower = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.EqualPowerGain;\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../component/Merge\", \"../signal/Zero\",\n\t\"../component/Split\", \"../core/Gain\", \"../signal/Signal\", \"../core/Context\"], function(Tone){\n\n\tif (Tone.supported && !Tone.global.AudioContext.prototype.createStereoPanner){\n\n\t\t/**\n\t\t * @class Shimmed StereoPannerNode\n\t\t * @param  {AudioContext} context\n\t\t * @private\n\t\t */\n\t\tvar StereoPannerNode = function(context){\n\n\t\t\t/**\n\t\t\t * The audio context\n\t\t\t * @type {AudioContext}\n\t\t\t */\n\t\t\tthis.context = context;\n\n\t\t\t/**\n\t\t\t * The left/right panning. [-1, 1]\n\t\t\t * @type {AudioRange}\n\t\t\t * @signal\n\t\t\t */\n\t\t\tthis.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\n\t\t\t/**\n\t\t\t * Equal power scaling of the right gain\n\t\t\t * @type {Tone.WaveShaper}\n\t\t\t */\n\t\t\tvar rightWaveShaper = new Tone.WaveShaper(function(val){\n\t\t\t\treturn Tone.equalPowerScale((val+1)/2);\n\t\t\t}, 4096);\n\n\t\t\t/**\n\t\t\t * Equal power scaling of the left gain\n\t\t\t * @type {Tone.WaveShaper}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar leftWaveShaper = new Tone.WaveShaper(function(val){\n\t\t\t\treturn Tone.equalPowerScale(1 - (val+1)/2);\n\t\t\t}, 4096);\n\n\t\t\t/**\n\t\t\t * The left gain value\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar leftGain = new Tone.Gain();\n\n\t\t\t/**\n\t\t\t * The right gain value\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar rightGain = new Tone.Gain();\n\n\t\t\t/**\n\t\t\t * Split the incoming signal\n\t\t\t * @type {Tone.Split}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar split = this.input = new Tone.Split();\n\t\t\t//fixes safari issue with splitting audio\n\t\t\tsplit._splitter.channelCountMode = \"explicit\";\n\n\t\t\t/**\n\t\t\t * Keeps the waveshapers from optimizing 0s\n\t\t\t * @type {Tone.Zero}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar zero = new Tone.Zero();\n\t\t\tzero.fan(rightWaveShaper, leftWaveShaper);\n\n\t\t\t/**\n\t\t\t * Merge the outgoing signal\n\t\t\t * @type {Tone.Merge}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar merge = this.output = new Tone.Merge();\n\n\t\t\t//connections\n\t\t\tsplit.left.chain(leftGain, merge.left);\n\t\t\tsplit.right.chain(rightGain, merge.right);\n\t\t\tthis.pan.chain(leftWaveShaper, leftGain.gain);\n\t\t\tthis.pan.chain(rightWaveShaper, rightGain.gain);\n\t\t};\n\n\t\tStereoPannerNode.prototype.disconnect = function(){\n\t\t\tthis.output.disconnect.apply(this.output, arguments);\n\t\t};\n\n\t\tStereoPannerNode.prototype.connect = function(){\n\t\t\tthis.output.connect.apply(this.output, arguments);\n\t\t};\n\n\t\t//add it to the AudioContext\n\t\tAudioContext.prototype.createStereoPanner = function(){\n\t\t\treturn new StereoPannerNode(this);\n\t\t};\n\t\tTone.Context.prototype.createStereoPanner = function(){\n\t\t\treturn new StereoPannerNode(this);\n\t\t};\n\t}\n\n});\n","define([\"../core/Tone\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Solo lets you isolate a specific audio stream. When\n\t *         an instance is set to `solo=true`, it will mute all other instances.\n\t *  @extends {Tone.AudioNode}\n\t *  @example\n\t * var soloA = new Tone.Solo()\n\t * var soloB = new Tone.Solo()\n\t * soloA.solo = true\n\t * //no audio will pass through soloB\n\t */\n\tTone.Solo = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"solo\"], Tone.Solo);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The input and output node\n\t\t *  @type  {Tone.Gain}\n\t\t */\n\t\tthis.input = this.output = new Tone.Gain();\n\n\t\t/**\n\t\t *  A bound _soloed method\n\t\t *  @type  {Function}\n\t\t *  @private\n\t\t */\n\t\tthis._soloBind = this._soloed.bind(this);\n\n\t\t//listen for solo events class-wide.\n\t\tthis.context.on(\"solo\", this._soloBind);\n\t\t//set initially\n\t\tthis.solo = options.solo;\n\t};\n\n\tTone.extend(Tone.Solo, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @type  {Object}\n\t *  @static\n\t */\n\tTone.Solo.defaults = {\n\t\tsolo : false,\n\t};\n\n\t/**\n\t *  Isolates this instance and mutes all other instances of Tone.Solo.\n\t *  Only one instance can be soloed at a time. A soloed\n\t *  instance will report `solo=false` when another instance is soloed.\n\t *  @memberOf Tone.Solo#\n\t *  @type {Boolean}\n\t *  @name solo\n\t */\n\tObject.defineProperty(Tone.Solo.prototype, \"solo\", {\n\t\tget : function(){\n\t\t\treturn this._isSoloed();\n\t\t},\n\t\tset : function(solo){\n\t\t\tif (solo){\n\t\t\t\tthis._addSolo();\n\t\t\t} else {\n\t\t\t\tthis._removeSolo();\n\t\t\t}\n\t\t\tthis.context.emit(\"solo\", this);\n\t\t}\n\t});\n\n\t/**\n\t *  If the current instance is muted, i.e. another instance is soloed\n\t *  @memberOf Tone.Solo#\n\t *  @type {Boolean}\n\t *  @name muted\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Solo.prototype, \"muted\", {\n\t\tget : function(){\n\t\t\treturn this.input.gain.value === 0;\n\t\t}\n\t});\n\n\t/**\n\t * Add this to the soloed array\n\t * @private\n\t */\n\tTone.Solo.prototype._addSolo = function(){\n\t\tif (!Tone.isArray(this.context._currentSolo)){\n\t\t\tthis.context._currentSolo = [];\n\t\t}\n\t\tif (!this._isSoloed()){\n\t\t\tthis.context._currentSolo.push(this);\n\t\t}\n\t};\n\n\t/**\n\t * Remove this from the soloed array\n\t * @private\n\t */\n\tTone.Solo.prototype._removeSolo = function(){\n\t\tif (this._isSoloed()){\n\t\t\tvar index = this.context._currentSolo.indexOf(this);\n\t\t\tthis.context._currentSolo.splice(index, 1);\n\t\t}\n\t};\n\n\t/**\n\t * @return {Boolean} Is this on the soloed array\n\t * @private\n\t */\n\tTone.Solo.prototype._isSoloed = function(){\n\t\tif (Tone.isArray(this.context._currentSolo)){\n\t\t\treturn this.context._currentSolo.length !== 0 && this.context._currentSolo.indexOf(this) !== -1;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * @return {Boolean} Returns true if no one is soloed\n\t * @private\n\t */\n\tTone.Solo.prototype._noSolos = function(){\n\t\treturn !Tone.isArray(this.context._currentSolo) || this.context._currentSolo.length === 0;\n\t};\n\n\t/**\n\t *  Solo the current instance and unsolo all other instances.\n\t *  @param  {Tone.Solo}  instance  The instance which is being soloed/unsoloed.\n\t *  @private\n\t */\n\tTone.Solo.prototype._soloed = function(){\n\t\tif (this._isSoloed()){\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()){\n\t\t\t//no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Solo}  this\n\t */\n\tTone.Solo.prototype.dispose = function(){\n\t\tthis.context.off(\"solo\", this._soloBind);\n\t\tthis._removeSolo();\n\t\tthis._soloBind = null;\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\treturn this;\n\t};\n\n\treturn Tone.Solo;\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../signal/SignalBase\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Return the absolute value of an incoming signal.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @example\n\t * var signal = new Tone.Signal(-1);\n\t * var abs = new Tone.Abs();\n\t * signal.connect(abs);\n\t * //the output of abs is 1.\n\t */\n\tTone.Abs = function(){\n\t\tTone.SignalBase.call(this);\n\t\t/**\n\t\t *  @type {Tone.LessThan}\n\t\t *  @private\n\t\t */\n\t\tthis._abs = this.input = this.output = new Tone.WaveShaper(function(val){\n\t\t\tif (Math.abs(val) < 0.001){\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t}, 1024);\n\t};\n\n\tTone.extend(Tone.Abs, Tone.SignalBase);\n\n\t/**\n\t *  dispose method\n\t *  @returns {Tone.Abs} this\n\t */\n\tTone.Abs.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._abs.dispose();\n\t\tthis._abs = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Abs;\n});\n","define([\"../core/Tone\", \"../component/Envelope\", \"../signal/Scale\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled\n\t *         to any range. It's useful for applying an envelope\n\t *         to a frequency or any other non-NormalRange signal\n\t *         parameter.\n\t *\n\t *  @extends {Tone.Envelope}\n\t *  @constructor\n\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t *  @param {Time} [decay]\tthe decay time in seconds\n\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t *  @param {Time} [release]\tthe release time in seconds\n\t *  @example\n\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t *  \t\"attack\" : 0.2,\n\t *  \t\"min\" : 200,\n\t *  \t\"max\" : 2000\n\t *  });\n\t *  scaledEnv.connect(oscillator.frequency);\n\t */\n\tTone.ScaledEnvelope = function(){\n\n\t\t//get all of the defaults\n\t\tvar options = Tone.defaults(arguments, [\"attack\", \"decay\", \"sustain\", \"release\"], Tone.Envelope);\n\t\tTone.Envelope.call(this, options);\n\t\toptions = Tone.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\n\t\t/**\n\t\t *  scale the incoming signal by an exponent\n\t\t *  @type {Tone.Pow}\n\t\t *  @private\n\t\t */\n\t\tthis._exp = this.output = new Tone.Pow(options.exponent);\n\n\t\t/**\n\t\t *  scale the signal to the desired range\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._scale = this.output = new Tone.Scale(options.min, options.max);\n\n\t\tthis._sig.chain(this._exp, this._scale);\n\t};\n\n\tTone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t */\n\tTone.ScaledEnvelope.defaults = {\n\t\t\"min\" : 0,\n\t\t\"max\" : 1,\n\t\t\"exponent\" : 1\n\t};\n\n\t/**\n\t * The envelope's min output value. This is the value which it\n\t * starts at.\n\t * @memberOf Tone.ScaledEnvelope#\n\t * @type {number}\n\t * @name min\n\t */\n\tObject.defineProperty(Tone.ScaledEnvelope.prototype, \"min\", {\n\t\tget : function(){\n\t\t\treturn this._scale.min;\n\t\t},\n\t\tset : function(min){\n\t\t\tthis._scale.min = min;\n\t\t}\n\t});\n\n\t/**\n\t * The envelope's max output value. In other words, the value\n\t * at the peak of the attack portion of the envelope.\n\t * @memberOf Tone.ScaledEnvelope#\n\t * @type {number}\n\t * @name max\n\t */\n\tObject.defineProperty(Tone.ScaledEnvelope.prototype, \"max\", {\n\t\tget : function(){\n\t\t\treturn this._scale.max;\n\t\t},\n\t\tset : function(max){\n\t\t\tthis._scale.max = max;\n\t\t}\n\t});\n\n\t/**\n\t * The envelope's exponent value.\n\t * @memberOf Tone.ScaledEnvelope#\n\t * @type {number}\n\t * @name exponent\n\t */\n\tObject.defineProperty(Tone.ScaledEnvelope.prototype, \"exponent\", {\n\t\tget : function(){\n\t\t\treturn this._exp.value;\n\t\t},\n\t\tset : function(exp){\n\t\t\tthis._exp.value = exp;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.ScaledEnvelope} this\n\t */\n\tTone.ScaledEnvelope.prototype.dispose = function(){\n\t\tTone.Envelope.prototype.dispose.call(this);\n\t\tthis._scale.dispose();\n\t\tthis._scale = null;\n\t\tthis._exp.dispose();\n\t\tthis._exp = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.ScaledEnvelope;\n});\n","define([\"../core/Tone\", \"../signal/GreaterThanZero\", \"../signal/Subtract\", \"../signal/Signal\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t *          can compare two signals or a signal and a number.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Signal}\n\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t *  @example\n\t * var gt = new Tone.GreaterThan(2);\n\t * var sig = new Tone.Signal(4).connect(gt);\n\t * //output of gt is equal 1.\n\t */\n\tTone.GreaterThan = function(value){\n\n\t\tTone.Signal.call(this);\n\t\tthis.createInsOuts(2, 0);\n\n\t\t/**\n\t\t *  subtract the amount from the incoming signal\n\t\t *  @type {Tone.Subtract}\n\t\t *  @private\n\t\t */\n\t\tthis._param = this.input[0] = new Tone.Subtract(value);\n\t\tthis.input[1] = this._param.input[1];\n\n\t\t/**\n\t\t *  compare that amount to zero\n\t\t *  @type {Tone.GreaterThanZero}\n\t\t *  @private\n\t\t */\n\t\tthis._gtz = this.output = new Tone.GreaterThanZero();\n\n\t\t//connect\n\t\tthis._param.connect(this._gtz);\n\t\tthis.proxy = false;\n\t};\n\n\tTone.extend(Tone.GreaterThan, Tone.Signal);\n\n\t/**\n\t *  dispose method\n\t *  @returns {Tone.GreaterThan} this\n\t */\n\tTone.GreaterThan.prototype.dispose = function(){\n\t\tTone.Signal.prototype.dispose.call(this);\n\t\tthis._gtz.dispose();\n\t\tthis._gtz = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.GreaterThan;\n});\n","define([\"../core/Tone\", \"../signal/Signal\", \"../signal/Multiply\", \"../signal/WaveShaper\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @example\n\t * var gt0 = new Tone.GreaterThanZero();\n\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t * //the output of gt0 is 1.\n\t * sig.value = 0;\n\t * //the output of gt0 is 0.\n\t */\n\tTone.GreaterThanZero = function(){\n\n\t\tTone.SignalBase.call(this);\n\n\t\t/**\n\t\t *  @type {Tone.WaveShaper}\n\t\t *  @private\n\t\t */\n\t\tthis._thresh = this.output = new Tone.WaveShaper(function(val){\n\t\t\tif (val <= 0){\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}, 127);\n\n\t\t/**\n\t\t *  scale the first thresholded signal by a large value.\n\t\t *  this will help with values which are very close to 0\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._scale = this.input = new Tone.Multiply(10000);\n\n\t\t//connections\n\t\tthis._scale.connect(this._thresh);\n\t};\n\n\tTone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\n\t/**\n\t *  dispose method\n\t *  @returns {Tone.GreaterThanZero} this\n\t */\n\tTone.GreaterThanZero.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._scale.dispose();\n\t\tthis._scale = null;\n\t\tthis._thresh.dispose();\n\t\tthis._thresh = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.GreaterThanZero;\n});\n","define([\"../core/Tone\", \"../source/TickSource\", \"../core/TimelineState\",\n\t\"../core/Emitter\", \"../core/Context\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A sample accurate clock which provides a callback at the given rate.\n\t *          While the callback is not sample-accurate (it is still susceptible to\n\t *          loose JS timing), the time passed in as the argument to the callback\n\t *          is precise. For most applications, it is better to use Tone.Transport\n\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t *\n\t * \t@constructor\n\t *  @extends {Tone.Emitter}\n\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t * \t@param {Frequency} frequency The rate of the callback\n\t * \t@example\n\t * //the callback will be invoked approximately once a second\n\t * //and will print the time exactly once a second apart.\n\t * var clock = new Tone.Clock(function(time){\n\t * \tconsole.log(time);\n\t * }, 1);\n\t */\n\tTone.Clock = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"callback\", \"frequency\"], Tone.Clock);\n\t\tTone.Emitter.call(this);\n\n\t\t/**\n\t\t *  The callback function to invoke at the scheduled tick.\n\t\t *  @type  {Function}\n\t\t */\n\t\tthis.callback = options.callback;\n\n\t\t/**\n\t\t *  The next time the callback is scheduled.\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._nextTick = 0;\n\n\t\t/**\n\t\t *  The tick counter\n\t\t *  @type  {Tone.TickSource}\n\t\t *  @private\n\t\t */\n\t\tthis._tickSource = new Tone.TickSource(options.frequency);\n\n\t\t/**\n\t\t *  The last time the loop callback was invoked\n\t\t *  @private\n\t\t *  @type {Number}\n\t\t */\n\t\tthis._lastUpdate = 0;\n\n\t\t/**\n\t\t *  The rate the callback function should be invoked.\n\t\t *  @type  {BPM}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this._tickSource.frequency;\n\t\tthis._readOnly(\"frequency\");\n\n\t\t/**\n\t\t *  The state timeline\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\t//add an initial state\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, 0);\n\n\t\t/**\n\t\t *  The loop function bound to its context.\n\t\t *  This is necessary to remove the event in the end.\n\t\t *  @type {Function}\n\t\t *  @private\n\t\t */\n\t\tthis._boundLoop = this._loop.bind(this);\n\n\t\t//bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t};\n\n\tTone.extend(Tone.Clock, Tone.Emitter);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Clock.defaults = {\n\t\t\"callback\" : Tone.noOp,\n\t\t\"frequency\" : 1,\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Clock#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Clock.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._state.getValueAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  {Time=}  time    The time the clock should start\n\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t *  @return  {Tone.Clock}  this\n\t */\n\tTone.Clock.prototype.start = function(time, offset){\n\t\t//make sure the context is started\n\t\tthis.context.resume();\n\t\t//start the loop\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) !== Tone.State.Started){\n\t\t\tthis._state.setStateAtTime(Tone.State.Started, time);\n\t\t\tthis._tickSource.start(time, offset);\n\t\t\tif (time < this._lastUpdate){\n\t\t\t\tthis.emit(\"start\", time, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tTone.Clock.prototype.stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, time);\n\t\tthis._tickSource.stop(time);\n\t\tif (time < this._lastUpdate){\n\t\t\tthis.emit(\"stop\", time);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.Clock} this\n\t */\n\tTone.Clock.prototype.pause = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === Tone.State.Started){\n\t\t\tthis._state.setStateAtTime(Tone.State.Paused, time);\n\t\t\tthis._tickSource.pause(time);\n\t\t\tif (time < this._lastUpdate){\n\t\t\t\tthis.emit(\"pause\", time);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The number of times the callback was invoked. Starts counting at 0\n\t *  and increments after the callback was invoked.\n\t *  @type {Ticks}\n\t */\n\tObject.defineProperty(Tone.Clock.prototype, \"ticks\", {\n\t\tget : function(){\n\t\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t\t},\n\t\tset : function(t){\n\t\t\tthis._tickSource.ticks = t;\n\t\t}\n\t});\n\n\t/**\n\t *  The time since ticks=0 that the Clock has been running. Accounts\n\t *  for tempo curves\n\t *  @type {Seconds}\n\t */\n\tObject.defineProperty(Tone.Clock.prototype, \"seconds\", {\n\t\tget : function(){\n\t\t\treturn this._tickSource.seconds;\n\t\t},\n\t\tset : function(s){\n\t\t\tthis._tickSource.seconds = s;\n\t\t}\n\t});\n\n\t/**\n\t *  Return the elapsed seconds at the given time.\n\t *  @param  {Time}  time  When to get the elapsed seconds\n\t *  @return  {Seconds}  The number of elapsed seconds\n\t */\n\tTone.Clock.prototype.getSecondsAtTime = function(time){\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t};\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  {Ticks} ticks The tick value to set\n\t * @param  {Time} time  When to set the tick value\n\t * @return {Tone.Clock}       this\n\t */\n\tTone.Clock.prototype.setTicksAtTime = function(ticks, time){\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  {Time} time  When to get the tick value\n\t * @return {Ticks}       The tick value at the given time.\n\t */\n\tTone.Clock.prototype.getTicksAtTime = function(time){\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t};\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  {Ticks} ticks The tick number.\n\t * @param  {Time} before \n\t * @return {Tone.Clock}       this\n\t */\n\tTone.Clock.prototype.nextTickTime = function(offset, when){\n\t\twhen = this.toSeconds(when);\n\t\tvar currentTick = this.getTicksAtTime(when);\n\t\treturn this._tickSource.getTimeOfTick(currentTick+offset, when);\n\t};\n\n\t/**\n\t *  The scheduling loop.\n\t *  @private\n\t */\n\tTone.Clock.prototype._loop = function(){\n\n\t\tvar startTime = this._lastUpdate;\n\t\tvar endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\n\t\tif (startTime !== endTime){\n\t\t\t//the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, function(e){\n\t\t\t\tswitch (e.state){\n\t\t\t\t\tcase Tone.State.Started : \n\t\t\t\t\t\tvar offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Tone.State.Stopped : \n\t\t\t\t\t\tif (e.time !== 0){\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Tone.State.Paused :\n\t\t\t\t\t\tthis.emit(\"pause\", e.time); \n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t\t//the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, function(time, ticks){\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t}.bind(this));\n\t\t}\n\t};\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  {Time}  time  The time to query.\n\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t *  @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tTone.Clock.prototype.getStateAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.Clock} this\n\t */\n\tTone.Clock.prototype.dispose = function(){\n\t\tTone.Emitter.prototype.dispose.call(this);\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._writable(\"frequency\");\n\t\tthis._tickSource.dispose();\n\t\tthis._tickSource = null;\n\t\tthis.frequency = null;\n\t\tthis._boundLoop = null;\n\t\tthis._nextTick = Infinity;\n\t\tthis.callback = null;\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t};\n\n\treturn Tone.Clock;\n});\n","define([\"../core/Tone\", \"../signal/Signal\"], function(Tone){\n\n\t/**\n\t * @class Tone.TickSignal extends Tone.Signal, but adds the capability\n\t *        to calculate the number of elapsed ticks. exponential and target curves\n\t *        are approximated with multiple linear ramps.\n\t *\n\t *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n\t *        describing integrating timing functions for tempo calculations.\n\t *\n\t * @param {Number} value The initial value of the signal\n\t * @extends {Tone.Signal}\n\t */\n\tTone.TickSignal = function(value){\n\n\t\tvalue = Tone.defaultArg(value, 1);\n\n\t\tTone.Signal.call(this, {\n\t\t\t\"units\" : Tone.Type.Ticks,\n\t\t\t\"value\" : value\n\t\t});\n\n\t\t//extend the memory\n\t\tthis._events.memory = Infinity;\n\n\t\t//clear the clock from the beginning\n\t\tthis.cancelScheduledValues(0);\n\t\t//set an initial event\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.SetValue,\n\t\t\t\"time\" : 0,\n\t\t\t\"value\" : value\n\t\t});\n\t};\n\n\tTone.extend(Tone.TickSignal, Tone.Signal);\n\t\n\t/**\n\t * Wraps Tone.Signal methods so that they also\n\t * record the ticks.\n\t * @param  {Function} method\n\t * @return {Function}\n\t * @private\n\t */\n\tfunction _wrapScheduleMethods(method){\n\t\treturn function(value, time){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tmethod.apply(this, arguments);\n\t\t\tvar event = this._events.get(time);\n\t\t\tvar previousEvent = this._events.previousEvent(event);\n\t\t\tvar ticksUntilTime = this._getTicksUntilEvent(previousEvent, time);\n\t\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\t\treturn this;\n\t\t};\n\t}\n\n\tTone.TickSignal.prototype.setValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.setValueAtTime);\n\tTone.TickSignal.prototype.linearRampToValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.linearRampToValueAtTime);\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value\n\t *  @param {Time} startTime\n\t *  @param {number} timeConstant\n\t *  @returns {Tone.TickSignal} this\n\t */\n\tTone.TickSignal.prototype.setTargetAtTime = function(value, time, constant){\n\t\t//aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tvalue = this._fromUnits(value);\n\n\t\t//start from previously scheduled value\n\t\tvar prevEvent = this._events.get(time);\n\t\tvar segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (var i = 0; i <= segments; i++){\n\t\t\tvar segTime = constant * i + time;\n\t\t\tvar rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, value, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from\n\t *  the previous scheduled parameter value to the given value.\n\t *  @param  {number} value\n\t *  @param  {Time} endTime\n\t *  @returns {Tone.TickSignal} this\n\t */\n\tTone.TickSignal.prototype.exponentialRampToValueAtTime = function(value, time){\n\t\t//aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tvalue = this._fromUnits(value);\n\n\t\t//start from previously scheduled value\n\t\tvar prevEvent = this._events.get(time);\n\t\tif (prevEvent === null){\n\t\t\tprevEvent = {\n\t\t\t\t\"value\" : this._initialValue,\n\t\t\t\t\"time\" : 0\n\t\t\t};\n\t\t}\n\t\t//approx 10 segments per second\n\t\tvar segments = Math.round(Math.max((time - prevEvent.time)*10, 1));\n\t\tvar segmentDur = ((time - prevEvent.time)/segments);\n\t\tfor (var i = 0; i <= segments; i++){\n\t\t\tvar segTime = segmentDur * i + prevEvent.time;\n\t\t\tvar rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, value, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @private\n\t * @param  {Time} time The time to get the tick count at\n\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t *                          given any automations.\n\t */\n\tTone.TickSignal.prototype._getTicksUntilEvent = function(event, time){\n\t\tif (event === null){\n\t\t\tevent = {\n\t\t\t\t\"ticks\" : 0,\n\t\t\t\t\"time\" : 0\n\t\t\t};\n\t\t} else if (Tone.isUndef(event.ticks)){\n\t\t\tvar previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tvar val0 = this.getValueAtTime(event.time);\n\t\tvar val1 = this.getValueAtTime(time);\n\t\t//if it's right on the line, take the previous value\n\t\tif (this._events.get(time).time === time && this._events.get(time).type === Tone.Param.AutomationType.SetValue){\n\t\t\tval1 = this.getValueAtTime(time - this.sampleTime);\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t};\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  {Time} time The time to get the tick count at\n\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t *                          given any automations.\n\t */\n\tTone.TickSignal.prototype.getTicksAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar event = this._events.get(time);\n\t\treturn Math.max(this._getTicksUntilEvent(event, time), 0);\n\t};\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param {Ticks} ticks The number of ticks to calculate\n\t * @param  {Time} time The time to get the next tick from\n\t * @return {Seconds} The duration of the number of ticks from the given time in seconds\n\t */\n\tTone.TickSignal.prototype.getDurationOfTicks = function(ticks, time){\n\t\ttime = this.toSeconds(time);\n\t\tvar currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - time;\n\t};\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @param  {Ticks} tick\n\t * @return {Time}      The time that the tick occurs.\n\t */\n\tTone.TickSignal.prototype.getTimeOfTick = function(tick){\n\t\tvar before = this._events.get(tick, \"ticks\");\n\t\tvar after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick){\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === Tone.Param.AutomationType.Linear &&\n\t\t\tbefore.value !== after.value){\n\t\t\tvar val0 = this.getValueAtTime(before.time);\n\t\t\tvar val1 = this.getValueAtTime(after.time);\n\t\t\tvar delta = (val1 - val0) / (after.time - before.time);\n\t\t\tvar k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tvar sol1 = (-val0 + k) / delta;\n\t\t\tvar sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before){\n\t\t\tif (before.value === 0){\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t};\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  {Ticks} ticks The number of ticks to convert to seconds.\n\t * @param  {Time} [when=now]  When along the automation timeline to convert the ticks.\n\t * @return {Tone.Time}       The duration in seconds of the ticks.\n\t */\n\tTone.TickSignal.prototype.ticksToTime = function(ticks, when){\n\t\twhen = this.toSeconds(when);\n\t\treturn new Tone.Time(this.getDurationOfTicks(ticks, when));\n\t};\n\n\t/**\n\t * The inverse of [ticksToTime](#tickstotime). Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  {Time} duration The time interval to convert to ticks.\n\t * @param  {Time} [when=now]     When along the automation timeline to convert the ticks.\n\t * @return {Tone.Ticks}          The duration in ticks.\n\t */\n\tTone.TickSignal.prototype.timeToTicks = function(duration, when){\n\t\twhen = this.toSeconds(when);\n\t\tduration = this.toSeconds(duration);\n\t\tvar startTicks = this.getTicksAtTime(when);\n\t\tvar endTicks = this.getTicksAtTime(when + duration);\n\t\treturn new Tone.Ticks(endTicks - startTicks);\n\t};\n\n\treturn Tone.TickSignal;\n});\n","define([\"../core/Tone\", \"../type/Type\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Similar to Tone.Timeline, but all events represent\n\t *         intervals with both \"time\" and \"duration\" times. The\n\t *         events are placed in a tree structure optimized\n\t *         for querying an intersection point with the timeline\n\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t *         to represent the data.\n\t *  @extends {Tone}\n\t */\n\tTone.IntervalTimeline = function(){\n\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The root node of the inteval tree\n\t\t *  @type  {IntervalNode}\n\t\t *  @private\n\t\t */\n\t\tthis._root = null;\n\n\t\t/**\n\t\t *  Keep track of the length of the timeline.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._length = 0;\n\t};\n\n\tTone.extend(Tone.IntervalTimeline);\n\n\t/**\n\t *  The event to add to the timeline. All events must\n\t *  have a time and duration value\n\t *  @param  {Object}  event  The event to add to the timeline\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */\n\tTone.IntervalTimeline.prototype.add = function(event){\n\t\tif (Tone.isUndef(event.time) || Tone.isUndef(event.duration)){\n\t\t\tthrow new Error(\"Tone.IntervalTimeline: events must have time and duration parameters\");\n\t\t}\n\t\tevent.time = event.time.valueOf();\n\t\tvar node = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null){\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null){\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event to remove from the timeline\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */\n\tTone.IntervalTimeline.prototype.remove = function(event){\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (var i = 0; i < results.length; i++){\n\t\t\t\tvar node = results[i];\n\t\t\t\tif (node.event === event){\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.IntervalTimeline#\n\t *  @name length\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.IntervalTimeline.prototype, \"length\", {\n\t\tget : function(){\n\t\t\treturn this._length;\n\t\t}\n\t});\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.cancel = function(after){\n\t\tthis.forEachFrom(after, function(event){\n\t\t\tthis.remove(event);\n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set the root node as the given node\n\t *  @param {IntervalNode} node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._setRoot = function(node){\n\t\tthis._root = node;\n\t\tif (this._root !== null){\n\t\t\tthis._root.parent = null;\n\t\t}\n\t};\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t *  @param  {IntervalNode}  node\n\t *  @param  {IntervalNode}  replacement\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._replaceNodeInParent = function(node, replacement){\n\t\tif (node.parent !== null){\n\t\t\tif (node.isLeftChild()){\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t};\n\n\t/**\n\t *  Remove the node from the tree and replace it with\n\t *  a successor which follows the schema.\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._removeNode = function(node){\n\t\tif (node.left === null && node.right === null){\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null){\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null){\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tvar balance = node.getBalance();\n\t\t\tvar replacement, temp;\n\t\t\tif (balance > 0){\n\t\t\t\tif (node.left.right === null){\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null){\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null){\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null){\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\treplacement.parent = replacement.parent;\n\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\ttemp = replacement.parent;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\treplacement.right = node.right;\n\t\t\t}\n\t\t\tif (node.parent !== null){\n\t\t\t\tif (node.isLeftChild()){\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\t// this._replaceNodeInParent(node, replacement);\n\t\t\tthis._rebalance(temp);\n\t\t}\n\t\tnode.dispose();\n\t};\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._rotateLeft = function(node){\n\t\tvar parent = node.parent;\n\t\tvar isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tvar pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null){\n\t\t\tif (isLeftChild){\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t};\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._rotateRight = function(node){\n\t\tvar parent = node.parent;\n\t\tvar isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tvar pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null){\n\t\t\tif (isLeftChild){\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t};\n\n\t/**\n\t *  Balance the BST\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._rebalance = function(node){\n\t\tvar balance = node.getBalance();\n\t\tif (balance > 1){\n\t\t\tif (node.left.getBalance() < 0){\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1){\n\t\t\tif (node.right.getBalance() > 0){\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @param  {Object}  event  The event to add to the timeline\n\t *  @return  {Object}  The event which spans the desired time\n\t */\n\tTone.IntervalTimeline.prototype.get = function(time){\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0){\n\t\t\t\tvar max = results[0];\n\t\t\t\tfor (var i = 1; i < results.length; i++){\n\t\t\t\t\tif (results[i].low > max.low){\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.forEach = function(callback){\n\t\tif (this._root !== null){\n\t\t\tvar allNodes = [];\n\t\t\tthis._root.traverse(function(node){\n\t\t\t\tallNodes.push(node);\n\t\t\t});\n\t\t\tfor (var i = 0; i < allNodes.length; i++){\n\t\t\t\tvar ev = allNodes[i].event;\n\t\t\t\tif (ev){\n\t\t\t\t\tcallback(ev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  {Number}  time The time to check if items are overlapping\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.forEachAtTime = function(time, callback){\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tfor (var i = results.length - 1; i >= 0; i--){\n\t\t\t\tvar ev = results[i].event;\n\t\t\t\tif (ev){\n\t\t\t\t\tcallback(ev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than or equal to the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.forEachFrom = function(time, callback){\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tfor (var i = results.length - 1; i >= 0; i--){\n\t\t\t\tvar ev = results[i].event;\n\t\t\t\tcallback(ev);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */\n\tTone.IntervalTimeline.prototype.dispose = function(){\n\t\tvar allNodes = [];\n\t\tif (this._root !== null){\n\t\t\tthis._root.traverse(function(node){\n\t\t\t\tallNodes.push(node);\n\t\t\t});\n\t\t}\n\t\tfor (var i = 0; i < allNodes.length; i++){\n\t\t\tallNodes[i].dispose();\n\t\t}\n\t\tallNodes = null;\n\t\tthis._root = null;\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tINTERVAL NODE HELPER\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Represents a node in the binary search tree, with the addition\n\t *  of a \"high\" value which keeps track of the highest value of\n\t *  its children.\n\t *  References:\n\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t *  @param {Number} low\n\t *  @param {Number} high\n\t *  @private\n\t */\n\tvar IntervalNode = function(low, high, event){\n\t\t//the event container\n\t\tthis.event = event;\n\t\t//the low value\n\t\tthis.low = low;\n\t\t//the high value\n\t\tthis.high = high;\n\t\t//the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t\t//the nodes to the left\n\t\tthis._left = null;\n\t\t//the nodes to the right\n\t\tthis._right = null;\n\t\t//the parent node\n\t\tthis.parent = null;\n\t\t//the number of child nodes\n\t\tthis.height = 0;\n\t};\n\n\t/**\n\t *  Insert a node into the correct spot in the tree\n\t *  @param  {IntervalNode}  node\n\t */\n\tIntervalNode.prototype.insert = function(node){\n\t\tif (node.low <= this.low){\n\t\t\tif (this.left === null){\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null){\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t};\n\n\t/**\n\t *  Search the tree for nodes which overlap\n\t *  with the given point\n\t *  @param  {Number}  point  The point to query\n\t *  @param  {Array}  results  The array to put the results\n\t */\n\tIntervalNode.prototype.search = function(point, results){\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max){\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null){\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point){\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point){\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null){\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t};\n\n\t/**\n\t *  Search the tree for nodes which are less\n\t *  than the given point\n\t *  @param  {Number}  point  The point to query\n\t *  @param  {Array}  results  The array to put the results\n\t */\n\tIntervalNode.prototype.searchAfter = function(point, results){\n\t\t// Check this node\n\t\tif (this.low >= point){\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null){\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null){\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t};\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\tIntervalNode.prototype.traverse = function(callback){\n\t\tcallback(this);\n\t\tif (this.left !== null){\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null){\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t};\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tIntervalNode.prototype.updateHeight = function(){\n\t\tif (this.left !== null && this.right !== null){\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null){\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null){\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t};\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tIntervalNode.prototype.updateMax = function(){\n\t\tthis.max = this.high;\n\t\tif (this.left !== null){\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null){\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t};\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  {Number}  Negative numbers are balanced to the right\n\t */\n\tIntervalNode.prototype.getBalance = function(){\n\t\tvar balance = 0;\n\t\tif (this.left !== null && this.right !== null){\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null){\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null){\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t};\n\n\t/**\n\t *  @returns {Boolean} true if this node is the left child\n\t *  of its parent\n\t */\n\tIntervalNode.prototype.isLeftChild = function(){\n\t\treturn this.parent !== null && this.parent.left === this;\n\t};\n\n\t/**\n\t *  get/set the left node\n\t *  @type {IntervalNode}\n\t */\n\tObject.defineProperty(IntervalNode.prototype, \"left\", {\n\t\tget : function(){\n\t\t\treturn this._left;\n\t\t},\n\t\tset : function(node){\n\t\t\tthis._left = node;\n\t\t\tif (node !== null){\n\t\t\t\tnode.parent = this;\n\t\t\t}\n\t\t\tthis.updateHeight();\n\t\t\tthis.updateMax();\n\t\t}\n\t});\n\n\t/**\n\t *  get/set the right node\n\t *  @type {IntervalNode}\n\t */\n\tObject.defineProperty(IntervalNode.prototype, \"right\", {\n\t\tget : function(){\n\t\t\treturn this._right;\n\t\t},\n\t\tset : function(node){\n\t\t\tthis._right = node;\n\t\t\tif (node !== null){\n\t\t\t\tnode.parent = this;\n\t\t\t}\n\t\t\tthis.updateHeight();\n\t\t\tthis.updateMax();\n\t\t}\n\t});\n\n\t/**\n\t *  null out references.\n\t */\n\tIntervalNode.prototype.dispose = function(){\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEND INTERVAL NODE HELPER\n\t///////////////////////////////////////////////////////////////////////////\n\n\treturn Tone.IntervalTimeline;\n});\n","define([\"../core/Tone\", \"../core/TransportEvent\", \"../type/Ticks\"], function(Tone){\n\n\t/**\n\t *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport\n\t *         to schedule repeat events. This class should not be instantiated directly.\n\t *  @extends {Tone.TransportEvent}\n\t *  @param {Object} options\n\t */\n\tTone.TransportRepeatEvent = function(Transport, options){\n\n\t\tTone.TransportEvent.call(this, Transport, options);\n\t\toptions = Tone.defaultArg(options, Tone.TransportRepeatEvent.defaults);\n\n\t\t/**\n\t\t * When the event should stop repeating\n\t\t * @type {Ticks}\n\t\t * @private\n\t\t */\n\t\tthis.duration = Tone.Ticks(options.duration);\n\n\t\t/**\n\t\t * The interval of the repeated event\n\t\t * @type {Ticks}\n\t\t * @private\n\t\t */\n\t\tthis._interval = Tone.Ticks(options.interval);\n\n\t\t/**\n\t\t * The ID of the current timeline event\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._currentId = -1;\n\n\t\t/**\n\t\t * The ID of the next timeline event\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._nextId = -1;\n\n\t\t/**\n\t\t  * The time of the next event\n\t\t  * @type {Ticks}\n\t\t  * @private\n\t\t  */\n\t\tthis._nextTick = this.time;\n\n\t\t/**\n\t\t * a reference to the bound start method\n\t\t * @type {Function}\n\t\t * @private\n\t\t */\n\t\tthis._boundRestart = this._restart.bind(this);\n\t\tthis.Transport.on(\"start loopStart\", this._boundRestart);\n\t\tthis._restart();\n\t};\n\n\tTone.extend(Tone.TransportRepeatEvent, Tone.TransportEvent);\n\n\t/**\n\t * The defaults\n\t * @static\n\t * @type {Object}\n\t */\n\tTone.TransportRepeatEvent.defaults = {\n\t\t\"duration\" : Infinity,\n\t\t\"interval\" : 1\n\t};\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  {Number} time  The AudioContext time in seconds of the event\n\t */\n\tTone.TransportRepeatEvent.prototype.invoke = function(time){\n\t\t//create more events if necessary\n\t\tthis._createEvents(time);\n\t\t//call the super class\n\t\tTone.TransportEvent.prototype.invoke.call(this, time);\n\t};\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t * @private\n\t */\n\tTone.TransportRepeatEvent.prototype._createEvents = function(time){\n\t\t// schedule the next event\n\t\tvar ticks = this.Transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick &&\n\t\tthis._nextTick + this._interval < this.time + this.duration){\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n\t\t}\n\t};\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t * @private\n\t */\n\tTone.TransportRepeatEvent.prototype._restart = function(time){\n\t\tthis.Transport.clear(this._currentId);\n\t\tthis.Transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tvar ticks = this.Transport.getTicksAtTime(time);\n\t\tif (ticks > this.time){\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));\n\t};\n\n\t/**\n\t * Clean up\n\t * @return {Tone.TransportRepeatEvent} this\n\t */\n\tTone.TransportRepeatEvent.prototype.dispose = function(){\n\t\tthis.Transport.clear(this._currentId);\n\t\tthis.Transport.clear(this._nextId);\n\t\tthis.Transport.off(\"start loopStart\", this._boundRestart);\n\t\tthis._boundCreateEvents = null;\n\t\tTone.TransportEvent.prototype.dispose.call(this);\n\t\tthis.duration = null;\n\t\tthis._interval = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.TransportRepeatEvent;\n});\n","define([\"../core/Tone\", \"../core/Buffer\", \"../source/Source\", \"../core/Gain\",\n\t\"../core/AudioNode\"], function(Tone){\n\n\t/**\n\t *  @class Wrapper around the native fire-and-forget OscillatorNode. Adds the\n\t *     ability to reschedule the stop method. ***[Tone.Oscillator](Oscillator) is better \n\t *     for most use-cases***\n\t *  @extends {Tone.AudioNode}\n\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t *  @param  {Function}  onload  The callback to invoke when the\n\t *                               buffer is done playing.\n\t */\n\tTone.OscillatorNode = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"type\"], Tone.OscillatorNode);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The callback to invoke after the\n\t\t *  buffer source is done playing.\n\t\t *  @type  {Function}\n\t\t */\n\t\tthis.onended = options.onended;\n\n\t\t/**\n\t\t *  The oscillator start time\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._startTime = -1;\n\n\t\t/**\n\t\t *  The oscillator stop time\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._stopTime = -1;\n\n\t\t/**\n\t\t *  The gain node which envelopes the OscillatorNode\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._gainNode = this.output = new Tone.Gain(0);\n\n\t\t/**\n\t\t *  The oscillator\n\t\t *  @type  {OscillatorNode}\n\t\t *  @private\n\t\t */\n\t\tthis._oscillator = this.context.createOscillator();\n\t\tthis._oscillator.connect(this._gainNode);\n\t\tthis.type = options.type;\n\n\t\t/**\n\t\t *  The frequency of the oscillator\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Param({\n\t\t\tparam : this._oscillator.frequency, \n\t\t\tunits : Tone.Type.Frequency,\n\t\t\tvalue : options.frequency\n\t\t});\n\n\t\t/**\n\t\t *  The detune of the oscillator\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Param({\n\t\t\tparam : this._oscillator.detune,\n\t\t\tunits : Tone.Type.Cents,\n\t\t\tvalue : options.detune\n\t\t});\n\n\t\t/**\n\t\t *  The value that the buffer ramps to\n\t\t *  @type {Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._gain = 1;\n\t};\n\n\tTone.extend(Tone.OscillatorNode, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.OscillatorNode.defaults = {\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"type\" : \"sine\",\n\t\t\"onended\" : Tone.noOp\n\t};\n\n\t/**\n\t *  Returns the playback state of the oscillator, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.OscillatorNode#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.OscillatorNode.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this.getStateAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  Get the playback state at the given time\n\t *  @param  {Time}  time  The time to test the state at\n\t *  @return  {Tone.State}  The playback state. \n\t */\n\tTone.OscillatorNode.prototype.getStateAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._startTime !== -1 && time >= this._startTime && (this._stopTime === -1 || time <= this._stopTime)){\n\t\t\treturn Tone.State.Started;\n\t\t} else {\n\t\t\treturn Tone.State.Stopped;\n\t\t}\n\t};\n\n\t/**\n     * Start the oscillator node at the given time\n     * @param  {Time=} time When to start the oscillator\n     * @return {OscillatorNode}      this\n     */\n\tTone.OscillatorNode.prototype.start = function(time){\n\t\tthis.log(\"start\", time);\n\t\tif (this._startTime === -1){\n\t\t\tthis._startTime = this.toSeconds(time);\n\t\t\tthis._oscillator.start(this._startTime);\n\t\t\tthis._gainNode.gain.setValueAtTime(1, this._startTime);\n\t\t} else {\n\t\t\tthrow new Error(\"cannot call OscillatorNode.start more than once\");\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n     * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n     * @param  {PeriodicWave} periodicWave PeriodicWave should be created with context.createPeriodicWave\n     * @return {OscillatorNode} this\n     */\n\tTone.OscillatorNode.prototype.setPeriodicWave = function(periodicWave){\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t};\n\n\t/**\n     * Stop the oscillator node at the given time\n     * @param  {Time=} time When to stop the oscillator\n     * @return {OscillatorNode}      this\n     */\n\tTone.OscillatorNode.prototype.stop = function(time){\n\t\tthis.log(\"stop\", time);\n\t\tthis.assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t//cancel the previous stop\n\t\tthis.cancelStop();\n\t\t//reschedule it\n\t\tthis._stopTime = this.toSeconds(time);\n\t\tif (this._stopTime > this._startTime){\n\t\t\tthis._gainNode.gain.setValueAtTime(0, this._stopTime);\n\t\t\tthis.context.clearTimeout(this._timeout);\n\t\t\tthis._timeout = this.context.setTimeout(function(){\n\t\t\t\tthis._oscillator.stop(this.now());\n\t\t\t\tthis.onended();\n\t\t\t}.bind(this), this._stopTime - this.context.currentTime);\n\t\t} else {\n\t\t\t//cancel the stop envelope\n\t\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel a scheduled stop event\n\t *  @return  {Tone.OscillatorNode}  this\n\t */\n\tTone.OscillatorNode.prototype.cancelStop = function(){\n\t\tif (this._startTime !== -1){\n\t\t\t//cancel the stop envelope\n\t\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime);\n\t\t\tthis.context.clearTimeout(this._timeout);\n\t\t\tthis._stopTime = -1;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t * @memberOf Tone.OscillatorNode#\n\t * @type {Time}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.OscillatorNode.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._oscillator.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._oscillator.type = type;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.OscillatorNode}  this\n\t */\n\tTone.OscillatorNode.prototype.dispose = function(){\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.onended = null;\n\t\tthis._oscillator.disconnect();\n\t\tthis._oscillator = null;\n\t\tthis._gainNode.dispose();\n\t\tthis._gainNode = null;\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.OscillatorNode;\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t/**\n\t *  AudioBuffer.copyTo/FromChannel polyfill\n\t *  @private\n\t */\n\tif (Tone.supported){\n\t\tif (!AudioBuffer.prototype.copyToChannel){\n\t\t\tAudioBuffer.prototype.copyToChannel = function(src, chanNum, start){\n\t\t\t\tvar channel = this.getChannelData(chanNum);\n\t\t\t\tstart = start || 0;\n\t\t\t\tfor (var i = 0; i < channel.length; i++){\n\t\t\t\t\tchannel[i+start] = src[i];\n\t\t\t\t}\n\t\t\t};\n\t\t\tAudioBuffer.prototype.copyFromChannel = function(dest, chanNum, start){\n\t\t\t\tvar channel = this.getChannelData(chanNum);\n\t\t\t\tstart = start || 0;\n\t\t\t\tfor (var i = 0; i < dest.length; i++){\n\t\t\t\t\tdest[i] = channel[i+start];\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Generate patterns from an array of values.\n\t *         Has a number of arpeggiation and randomized\n\t *         selection patterns. \n\t *           <ul>\n\t *  \t        <li>\"up\" - cycles upward</li>\n\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t *     \t\t</ul>\n\t *  @param  {Array}  values   An array of options to choose from.\n\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t *  @extends {Tone}\n\t */\n\tTone.CtrlPattern = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"values\", \"type\"], Tone.CtrlPattern);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The array of values to arpeggiate over\n\t\t *  @type {Array}\n\t\t */\n\t\tthis.values = options.values;\n\t\t\n\t\t/**\n\t\t *  The current position in the values array\n\t\t *  @type  {Number}\n\t\t */\n\t\tthis.index = 0;\n\n\t\t/**\n\t\t *  The type placeholder\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @private\n\t\t */\n\t\tthis._type = null;\n\n\t\t/**\n\t\t *  Shuffled values for the RandomOnce type\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._shuffled = null;\n\n\t\t/**\n\t\t *  The direction of the movement\n\t\t *  @type {String}\n\t\t *  @private\n\t\t */\n\t\tthis._direction = null;\n\n\t\tthis.type = options.type;\n\t};\n\n\tTone.extend(Tone.CtrlPattern);\n\n\t/**\n\t *  The Control Patterns\n\t *  @type  {Object}\n\t *  @static\n\t */\n\tTone.CtrlPattern.Type = {\n\t\tUp : \"up\",\n\t\tDown : \"down\",\n\t\tUpDown : \"upDown\",\n\t\tDownUp : \"downUp\",\n\t\tAlternateUp : \"alternateUp\",\n\t\tAlternateDown : \"alternateDown\",\n\t\tRandom : \"random\",\n\t\tRandomWalk : \"randomWalk\",\n\t\tRandomOnce : \"randomOnce\",\n\t};\n\n\t/**\n\t *  The default values. \n\t *  @type  {Object}\n\t */\n\tTone.CtrlPattern.defaults = {\n\t\t\"type\" : Tone.CtrlPattern.Type.Up,\n\t\t\"values\" : []\n\t};\n\n\t/**\n\t *  The value at the current index of the pattern.\n\t *  @readOnly\n\t *  @memberOf Tone.CtrlPattern#\n\t *  @type {*}\n\t *  @name value\n\t */\n\tObject.defineProperty(Tone.CtrlPattern.prototype, \"value\", {\n\t\tget : function(){\n\t\t\t//some safeguards\n\t\t\tif (this.values.length === 0){\n\t\t\t\treturn;\n\t\t\t} else if (this.values.length === 1){\n\t\t\t\treturn this.values[0];\n\t\t\t} \n\t\t\tthis.index = Math.min(this.index, this.values.length - 1);\n\t\t\tvar val = this.values[this.index];\n\t\t\tif (this.type === Tone.CtrlPattern.Type.RandomOnce){\n\t\t\t\tif (this.values.length !== this._shuffled.length){\n\t\t\t\t\tthis._shuffleValues();\n\t\t\t\t}\n\t\t\t\tval = this.values[this._shuffled[this.index]];\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t});\n\n\t/**\n\t *  The pattern used to select the next\n\t *  item from the values array\n\t *  @memberOf Tone.CtrlPattern#\n\t *  @type {Tone.CtrlPattern.Type}\n\t *  @name type\n\t */\n\tObject.defineProperty(Tone.CtrlPattern.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._type = type;\n\t\t\tthis._shuffled = null;\n\n\t\t\t//the first index\n\t\t\tif (this._type === Tone.CtrlPattern.Type.Up ||\n\t\t\t\t\tthis._type === Tone.CtrlPattern.Type.UpDown || \n\t\t\t\t\tthis._type === Tone.CtrlPattern.Type.RandomOnce ||\n\t\t\t\t\tthis._type === Tone.CtrlPattern.Type.AlternateUp){\n\t\t\t\tthis.index = 0;\n\t\t\t} else if (this._type === Tone.CtrlPattern.Type.Down ||\n\t\t\t\t\tthis._type === Tone.CtrlPattern.Type.DownUp || \n\t\t\t\t\tthis._type === Tone.CtrlPattern.Type.AlternateDown){\n\t\t\t\tthis.index = this.values.length - 1;\n\t\t\t}\n\n\t\t\t//the direction\n\t\t\tif (this._type === Tone.CtrlPattern.Type.UpDown || \n\t\t\t\t\tthis._type === Tone.CtrlPattern.Type.AlternateUp){\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Up;\n\t\t\t} else if (this._type === Tone.CtrlPattern.Type.DownUp || \n\t\t\t\t\tthis._type === Tone.CtrlPattern.Type.AlternateDown){\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Down;\n\t\t\t}\n\n\t\t\t//randoms\n\t\t\tif (this._type === Tone.CtrlPattern.Type.RandomOnce){\n\t\t\t\tthis._shuffleValues();\n\t\t\t} else if (this._type === Tone.CtrlPattern.Random){\n\t\t\t\tthis.index = Math.floor(Math.random() * this.values.length);\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Return the next value given the current position\n\t *  and pattern.\n\t *  @return {*} The next value\n\t */\n\tTone.CtrlPattern.prototype.next = function(){\n\t\t\n\t\tvar type = this.type;\n\n\t\t//choose the next index\n\t\tif (type === Tone.CtrlPattern.Type.Up){\n\t\t\tthis.index++;\n\t\t\tif (this.index >= this.values.length){\n\t\t\t\tthis.index = 0;\n\t\t\t}\n\t\t} else if (type === Tone.CtrlPattern.Type.Down){\n\t\t\tthis.index--;\n\t\t\tif (this.index < 0){\n\t\t\t\tthis.index = this.values.length - 1;\n\t\t\t}\n\t\t} else if (type === Tone.CtrlPattern.Type.UpDown ||\n\t\t\t\t\ttype === Tone.CtrlPattern.Type.DownUp){\n\t\t\tif (this._direction === Tone.CtrlPattern.Type.Up){\n\t\t\t\tthis.index++;\n\t\t\t} else {\n\t\t\t\tthis.index--;\n\t\t\t}\n\t\t\tif (this.index < 0){\n\t\t\t\tthis.index = 1;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Up;\n\t\t\t} else if (this.index >= this.values.length){\n\t\t\t\tthis.index = this.values.length - 2;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Down;\n\t\t\t}\n\t\t} else if (type === Tone.CtrlPattern.Type.Random){\n\t\t\tthis.index = Math.floor(Math.random() * this.values.length);\n\t\t} else if (type === Tone.CtrlPattern.Type.RandomWalk){\n\t\t\tif (Math.random() < 0.5){\n\t\t\t\tthis.index--;\n\t\t\t\tthis.index = Math.max(this.index, 0);\n\t\t\t} else {\n\t\t\t\tthis.index++;\n\t\t\t\tthis.index = Math.min(this.index, this.values.length - 1);\n\t\t\t}\n\t\t} else if (type === Tone.CtrlPattern.Type.RandomOnce){\n\t\t\tthis.index++;\n\t\t\tif (this.index >= this.values.length){\n\t\t\t\tthis.index = 0;\n\t\t\t\t//reshuffle the values for next time\n\t\t\t\tthis._shuffleValues();\n\t\t\t}\n\t\t} else if (type === Tone.CtrlPattern.Type.AlternateUp){\n\t\t\tif (this._direction === Tone.CtrlPattern.Type.Up){\n\t\t\t\tthis.index += 2;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Down;\n\t\t\t} else {\n\t\t\t\tthis.index -= 1;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Up;\n\t\t\t}\n\t\t\tif (this.index >= this.values.length){\n\t\t\t\tthis.index = 0;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Up;\n\t\t\t}\n\t\t} else if (type === Tone.CtrlPattern.Type.AlternateDown){\n\t\t\tif (this._direction === Tone.CtrlPattern.Type.Up){\n\t\t\t\tthis.index += 1;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Down;\n\t\t\t} else {\n\t\t\t\tthis.index -= 2;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Up;\n\t\t\t}\n\t\t\tif (this.index < 0){\n\t\t\t\tthis.index = this.values.length - 1;\n\t\t\t\tthis._direction = Tone.CtrlPattern.Type.Down;\n\t\t\t}\n\t\t}\n\t\treturn this.value;\n\t};\n\n\t/**\n\t *  Shuffles the values and places the results into the _shuffled\n\t *  @private\n\t */\n\tTone.CtrlPattern.prototype._shuffleValues = function(){\n\t\tvar copy = [];\n\t\tthis._shuffled = [];\n\t\tfor (var i = 0; i < this.values.length; i++){\n\t\t\tcopy[i] = i;\n\t\t}\n\t\twhile (copy.length > 0){\n\t\t\tvar randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t\t\tthis._shuffled.push(randVal[0]);\n\t\t}\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.CtrlPattern} this\n\t */\n\tTone.CtrlPattern.prototype.dispose = function(){\n\t\tthis._shuffled = null;\n\t\tthis.values = null;\n\t};\n\n\treturn Tone.CtrlPattern;\n});\n","define([\"../core/Tone\", \"../core/Buffer\"], function(Tone){\n\n\t/**\n\t *  @class A data structure for holding multiple buffers.\n\t *  \n\t *  @param  {Object|Array}    urls      An object literal or array\n\t *                                      of urls to load.\n\t *  @param  {Function=}  callback  The callback to invoke when\n\t *                                 the buffers are loaded. \n\t *  @extends {Tone}\n\t *  @example\n\t * //load a whole bank of piano samples\n\t * var pianoSamples = new Tone.Buffers({\n\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t * \t...\n\t * }, function(){\n\t * \t//play one of the samples when they all load\n\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t * \tplayer.start();\n\t * });\n\t * \t@example\n\t * //To pass in additional parameters in the second parameter\n\t * var buffers = new Tone.Buffers(urls, {\n\t * \t\"onload\" : callback,\n\t * \t\"baseUrl\" : \"../path/to/audio/\"\n\t * })\n\t */\n\tTone.Buffers = function(urls){\n\n\t\t//remove the urls from the options\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.shift();\n\t\tvar options = Tone.defaults(args, [\"onload\", \"baseUrl\"], Tone.Buffers);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  All of the buffers\n\t\t *  @type  {Object}\n\t\t *  @private\n\t\t */\n\t\tthis._buffers = {};\n\n\t\t/**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t */\n\t\tthis.baseUrl = options.baseUrl;\n\n\t\tthis._loadingCount = 0;\n\t\t//add each one\n\t\tfor (var key in urls){\n\t\t\tthis._loadingCount++;\n\t\t\tthis.add(key, urls[key], this._bufferLoaded.bind(this, options.onload));\n\t\t}\n\t};\n\n\tTone.extend(Tone.Buffers);\n\n\t/**\n\t *  Defaults\n\t *  @type  {Object}\n\t */\n\tTone.Buffers.defaults = {\n\t\t\"onload\" : Tone.noOp,\n\t\t\"baseUrl\" : \"\"\n\t};\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  {String|Number}  name  The key or index of the \n\t *                                 buffer.\n\t *  @return  {Boolean}\n\t */\n\tTone.Buffers.prototype.has = function(name){\n\t\treturn this._buffers.hasOwnProperty(name);\n\t};\n\n\t/**\n\t *  Get a buffer by name. If an array was loaded, \n\t *  then use the array index.\n\t *  @param  {String|Number}  name  The key or index of the \n\t *                                 buffer.\n\t *  @return  {Tone.Buffer}\n\t */\n\tTone.Buffers.prototype.get = function(name){\n\t\tif (this.has(name)){\n\t\t\treturn this._buffers[name];\n\t\t} else {\n\t\t\tthrow new Error(\"Tone.Buffers: no buffer named \"+name);\n\t\t}\n\t};\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t *  @param  {Function}  callback \n\t *  @private\n\t */\n\tTone.Buffers.prototype._bufferLoaded = function(callback){\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback){\n\t\t\tcallback(this);\n\t\t}\n\t};\n\n\t/**\n\t * If the buffers are loaded or not\n\t * @memberOf Tone.Buffers#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Buffers.prototype, \"loaded\", {\n\t\tget : function(){\n\t\t\tvar isLoaded = true;\n\t\t\tfor (var buffName in this._buffers){\n\t\t\t\tvar buff = this.get(buffName);\n\t\t\t\tisLoaded = isLoaded && buff.loaded;\n\t\t\t}\n\t\t\treturn isLoaded;\n\t\t}\n\t});\n\n\t/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  {String}    name      A unique name to give\n\t *                                the buffer\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke \n\t *                                 when the url is loaded.\n\t */\n\tTone.Buffers.prototype.add = function(name, url, callback){\n\t\tcallback = Tone.defaultArg(callback, Tone.noOp);\n\t\tif (url instanceof Tone.Buffer){\n\t\t\tthis._buffers[name] = url;\n\t\t\tcallback(this);\n\t\t} else if (url instanceof AudioBuffer){\n\t\t\tthis._buffers[name] = new Tone.Buffer(url);\n\t\t\tcallback(this);\n\t\t} else if (Tone.isString(url)){\n\t\t\tthis._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Buffers} this\n\t */\n\tTone.Buffers.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tfor (var name in this._buffers){\n\t\t\tthis._buffers[name].dispose();\n\t\t}\n\t\tthis._buffers = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Buffers;\n});\n","define([\"../core/Tone\", \"../core/Transport\", \"../core/Buffer\", \"../core/OfflineContext\", \"../core/Master\"], function(Tone){\n\n\t/**\n\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t *  to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions\n\t *  as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit\n\t *  user action like a click or tap. \n\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t *  @param  {Time}  duration     the amount of time to record for.\n\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t *  @example\n\t * //render 2 seconds of the oscillator\n\t * Tone.Offline(function(){\n\t * \t//only nodes created in this callback will be recorded\n\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t * \t//schedule their events\n\t * }, 2).then(function(buffer){\n\t * \t//do something with the output buffer\n\t * })\n\t * @example\n\t * //can also schedule events along the Transport\n\t * //using the passed in Offline Transport\n\t * Tone.Offline(function(Transport){\n\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t * \tTransport.schedule(function(time){\n\t * \t\tosc.start(time).stop(time + 0.1)\n\t * \t}, 1)\n\t * \tTransport.start(0.2)\n\t * }, 4).then(function(buffer){\n\t * \t//do something with the output buffer\n\t * })\n\t */\n\tTone.Offline = function(callback, duration){\n\t\t//set the OfflineAudioContext\n\t\tvar sampleRate = Tone.context.sampleRate;\n\t\tvar originalContext = Tone.context;\n\n\t\tvar context = new Tone.OfflineContext(2, duration, sampleRate);\n\t\tTone.context = context;\n\n\t\t//invoke the callback/scheduling\n\t\tvar response = callback(Tone.Transport);\n\n\t\t//the return value\n\t\tvar ret = null;\n\n\t\tif (response && Tone.isFunction(response.then)){\n\t\t\t//wait for the promise to resolve\n\t\t\tret = response.then(function(){\n\t\t\t\t//then render the audio\n\t\t\t\treturn context.render();\n\t\t\t});\n\t\t} else {\n\t\t\t//process the audio\n\t\t\tret = context.render();\n\t\t}\n\n\t\t//return the original AudioContext\n\t\tTone.context = originalContext;\n\n\t\t//return the audio\n\t\treturn ret.then(function(buffer){\n\t\t\t//wrap it in a Tone.Buffer\n\t\t\treturn new Tone.Buffer(buffer);\n\t\t});\n\t};\n\n\treturn Tone.Offline;\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../signal/Multiply\", \"../signal/Subtract\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t *         values in the NormalRange.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @param {NormalRange} modulus The modulus to apply.\n\t *  @example\n\t * var mod = new Tone.Modulo(0.2)\n\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t * //mod outputs 0.1\n\t */\n\tTone.Modulo = function(modulus){\n\n\t\tTone.SignalBase.call(this);\n\t\tthis.createInsOuts(1, 0);\n\n\t\t/**\n\t\t *  A waveshaper gets the integer multiple of\n\t\t *  the input signal and the modulus.\n\t\t *  @private\n\t\t *  @type {Tone.WaveShaper}\n\t\t */\n\t\tthis._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\n\t\t/**\n\t\t *  the integer multiple is multiplied by the modulus\n\t\t *  @type  {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._multiply = new Tone.Multiply();\n\n\t\t/**\n\t\t *  and subtracted from the input signal\n\t\t *  @type  {Tone.Subtract}\n\t\t *  @private\n\t\t */\n\t\tthis._subtract = this.output = new Tone.Subtract();\n\n\t\t/**\n\t\t *  the modulus signal\n\t\t *  @type  {Tone.Signal}\n\t\t *  @private\n\t\t */\n\t\tthis._modSignal = new Tone.Signal(modulus);\n\n\t\t//connections\n\t\tthis.input.fan(this._shaper, this._subtract);\n\t\tthis._modSignal.connect(this._multiply, 0, 0);\n\t\tthis._shaper.connect(this._multiply, 0, 1);\n\t\tthis._multiply.connect(this._subtract, 0, 1);\n\t\tthis._setWaveShaper(modulus);\n\t};\n\n\tTone.extend(Tone.Modulo, Tone.SignalBase);\n\n\t/**\n\t *  @param  {number}  mod  the modulus to apply\n\t *  @private\n\t */\n\tTone.Modulo.prototype._setWaveShaper = function(mod){\n\t\tthis._shaper.setMap(function(val){\n\t\t\tvar multiple = Math.floor((val + 0.0001) / mod);\n\t\t\treturn multiple;\n\t\t});\n\t};\n\n\t/**\n\t * The modulus value.\n\t * @memberOf Tone.Modulo#\n\t * @type {NormalRange}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Modulo.prototype, \"value\", {\n\t\tget : function(){\n\t\t\treturn this._modSignal.value;\n\t\t},\n\t\tset : function(mod){\n\t\t\tthis._modSignal.value = mod;\n\t\t\tthis._setWaveShaper(mod);\n\t\t}\n\t});\n\n\t/**\n\t * clean up\n\t *  @returns {Tone.Modulo} this\n\t */\n\tTone.Modulo.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._shaper.dispose();\n\t\tthis._shaper = null;\n\t\tthis._multiply.dispose();\n\t\tthis._multiply = null;\n\t\tthis._subtract.dispose();\n\t\tthis._subtract = null;\n\t\tthis._modSignal.dispose();\n\t\tthis._modSignal = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Modulo;\n});\n","define([\"../core/Tone\", \"../core/Buffer\", \"../effect/Effect\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio\n\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t *                                           contianing the impulse response.\n\t *  @param {Function=} onload The callback to invoke when the url is loaded.\n\t *  @example\n\t * //initializing the convolver with an impulse response\n\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t */\n\tTone.Convolver = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"url\", \"onload\"], Tone.Convolver);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  convolver node\n\t\t *  @type {ConvolverNode}\n\t\t *  @private\n\t\t */\n\t\tthis._convolver = this.context.createConvolver();\n\n\t\t/**\n\t\t *  the convolution buffer\n\t\t *  @type {Tone.Buffer}\n\t\t *  @private\n\t\t */\n\t\tthis._buffer = new Tone.Buffer(options.url, function(buffer){\n\t\t\tthis.buffer = buffer.get();\n\t\t\toptions.onload();\n\t\t}.bind(this));\n\n\t\t//set if it's already loaded\n\t\tif (this._buffer.loaded){\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t//initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\tthis.connectEffect(this._convolver);\n\t};\n\n\tTone.extend(Tone.Convolver, Tone.Effect);\n\n\t/**\n\t *  @static\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Convolver.defaults = {\n\t\t\"onload\" : Tone.noOp,\n\t\t\"normalize\" : true\n\t};\n\n\t/**\n\t *  The convolver's buffer\n\t *  @memberOf Tone.Convolver#\n\t *  @type {AudioBuffer}\n\t *  @name buffer\n\t */\n\tObject.defineProperty(Tone.Convolver.prototype, \"buffer\", {\n\t\t\"get\" : function(){\n\t\t\tif (this._buffer.length){\n\t\t\t\treturn this._buffer;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\t\"set\" : function(buffer){\n\t\t\tthis._buffer.set(buffer);\n\t\t\t//if it's already got a buffer, create a new one\n\t\t\tif (this._convolver.buffer){\n\t\t\t\t//disconnect the old one\n\t\t\t\tthis.effectSend.disconnect();\n\t\t\t\tthis._convolver.disconnect();\n\t\t\t\t//create and connect a new one\n\t\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\t\tthis.connectEffect(this._convolver);\n\t\t\t}\n\t\t\tthis._convolver.buffer = this._buffer.get();\n\t\t}\n\t});\n\n\t/**\n\t *  The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.\n\t *  @memberOf Tone.Convolver#\n\t *  @type {Boolean}\n\t *  @name normalize\n\t */\n\tObject.defineProperty(Tone.Convolver.prototype, \"normalize\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._convolver.normalize;\n\t\t},\n\t\t\"set\" : function(norm){\n\t\t\tthis._convolver.normalize = norm;\n\t\t}\n\t});\n\n\t/**\n\t *  Load an impulse response url as an audio buffer.\n\t *  Decodes the audio asynchronously and invokes\n\t *  the callback once the audio buffer loads.\n\t *  @param {string} url The url of the buffer to load.\n\t *                      filetype support depends on the\n\t *                      browser.\n\t *  @param  {function=} callback\n\t *  @returns {Promise}\n\t */\n\tTone.Convolver.prototype.load = function(url, callback){\n\t\treturn this._buffer.load(url, function(buff){\n\t\t\tthis.buffer = buff;\n\t\t\tif (callback){\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Convolver} this\n\t */\n\tTone.Convolver.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._buffer.dispose();\n\t\tthis._buffer = null;\n\t\tthis._convolver.disconnect();\n\t\tthis._convolver = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Convolver;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../component/MidSideSplit\", \"../component/MidSideMerge\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Mid/Side processing separates the the 'mid' signal\n\t *         (which comes out of both the left and the right channel)\n\t *         and the 'side' (which only comes out of the the side channels)\n\t *         and effects them separately before being recombined.\n\t *         Applies a Mid/Side seperation and recombination.\n\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t *         <br><br>\n\t *         This is a base-class for Mid/Side Effects.\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t */\n\tTone.MidSideEffect = function(){\n\n\t\tTone.Effect.apply(this, arguments);\n\n\t\t/**\n\t\t *  The mid/side split\n\t\t *  @type  {Tone.MidSideSplit}\n\t\t *  @private\n\t\t */\n\t\tthis._midSideSplit = new Tone.MidSideSplit();\n\n\t\t/**\n\t\t *  The mid/side merge\n\t\t *  @type  {Tone.MidSideMerge}\n\t\t *  @private\n\t\t */\n\t\tthis._midSideMerge = new Tone.MidSideMerge();\n\n\t\t/**\n\t\t *  The mid send. Connect to mid processing\n\t\t *  @type {Tone}\n\t\t *  @private\n\t\t */\n\t\tthis.midSend = this._midSideSplit.mid;\n\n\t\t/**\n\t\t *  The side send. Connect to side processing\n\t\t *  @type {Tone}\n\t\t *  @private\n\t\t */\n\t\tthis.sideSend = this._midSideSplit.side;\n\n\t\t/**\n\t\t *  The mid return connection\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.midReturn = this._midSideMerge.mid;\n\n\t\t/**\n\t\t *  The side return connection\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.sideReturn = this._midSideMerge.side;\n\n\t\t//the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t};\n\n\tTone.extend(Tone.MidSideEffect, Tone.Effect);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.MidSideEffect} this\n\t */\n\tTone.MidSideEffect.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideSplit = null;\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSideMerge = null;\n\t\tthis.midSend = null;\n\t\tthis.sideSend = null;\n\t\tthis.midReturn = null;\n\t\tthis.sideReturn = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MidSideEffect;\n});\n","define([\"../core/Tone\", \"../effect/StereoEffect\", \"../effect/FeedbackEffect\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t *         and right to left instead of on the same channel.\n\t *\n\t *\t@constructor\n\t *\t@extends {Tone.StereoEffect}\n\t */\n\tTone.StereoXFeedbackEffect = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"feedback\"], Tone.FeedbackEffect);\n\t\tTone.StereoEffect.call(this, options);\n\n\t\t/**\n\t\t *  The amount of feedback from the output\n\t\t *  back into the input of the effect (routed\n\t\t *  across left and right channels).\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  the left side feeback\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._feedbackLR = new Tone.Gain();\n\n\t\t/**\n\t\t *  the right side feeback\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._feedbackRL = new Tone.Gain();\n\n\t\t//connect it up\n\t\tthis.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t\tthis.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t\tthis.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t\tthis._readOnly([\"feedback\"]);\n\t};\n\n\tTone.extend(Tone.StereoXFeedbackEffect, Tone.StereoEffect);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t */\n\tTone.StereoXFeedbackEffect.prototype.dispose = function(){\n\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\tthis._writable([\"feedback\"]);\n\t\tthis.feedback.dispose();\n\t\tthis.feedback = null;\n\t\tthis._feedbackLR.dispose();\n\t\tthis._feedbackLR = null;\n\t\tthis._feedbackRL.dispose();\n\t\tthis._feedbackRL = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.StereoXFeedbackEffect;\n});\n","define([\"../core/Tone\", \"../event/Event\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Loop creates a looped callback at the \n\t *         specified interval. The callback can be \n\t *         started, stopped and scheduled along\n\t *         the Transport's timeline. \n\t *  @example\n\t * var loop = new Tone.Loop(function(time){\n\t * \t//triggered every eighth note. \n\t * \tconsole.log(time);\n\t * }, \"8n\").start(0);\n\t * Tone.Transport.start();\n\t *  @extends {Tone}\n\t *  @param {Function} callback The callback to invoke with the event.\n\t *  @param {Time} interval The time between successive callback calls. \n\t */\n\tTone.Loop = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"callback\", \"interval\"], Tone.Loop);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The event which produces the callbacks\n\t\t */\n\t\tthis._event = new Tone.Event({\n\t\t\t\"callback\" : this._tick.bind(this),\n\t\t\t\"loop\" : true,\n\t\t\t\"loopEnd\" : options.interval,\n\t\t\t\"playbackRate\" : options.playbackRate,\n\t\t\t\"probability\" : options.probability\n\t\t});\n\n\t\t/**\n\t\t *  The callback to invoke with the next event in the pattern\n\t\t *  @type {Function}\n\t\t */\n\t\tthis.callback = options.callback;\n\n\t\t//set the iterations\n\t\tthis.iterations = options.iterations;\n\t};\n\n\tTone.extend(Tone.Loop);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Loop.defaults = {\n\t\t\"interval\" : \"4n\",\n\t\t\"callback\" : Tone.noOp,\n\t\t\"playbackRate\" : 1,\n\t\t\"iterations\" : Infinity,\n\t\t\"probability\" : true,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t *  Start the loop at the specified time along the Transport's\n\t *  timeline.\n\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t *  @return  {Tone.Loop}  this\n\t */\n\tTone.Loop.prototype.start = function(time){\n\t\tthis._event.start(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the loop at the given time.\n\t *  @param  {TimelinePosition=}  time  When to stop the Loop.\n\t *  @return  {Tone.Loop}  this\n\t */\n\tTone.Loop.prototype.stop = function(time){\n\t\tthis._event.stop(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t *  @return  {Tone.Loop}  this\n\t */\n\tTone.Loop.prototype.cancel = function(time){\n\t\tthis._event.cancel(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Internal function called when the notes should be called\n\t *  @param  {Number}  time  The time the event occurs\n\t *  @private\n\t */\n\tTone.Loop.prototype._tick = function(time){\n\t\tthis.callback(time);\n\t};\n\n\t/**\n\t *  The state of the Loop, either started or stopped.\n\t *  @memberOf Tone.Loop#\n\t *  @type {String}\n\t *  @name state\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._event.state;\n\t\t}\n\t});\n\n\t/**\n\t *  The progress of the loop as a value between 0-1. 0, when\n\t *  the loop is stopped or done iterating. \n\t *  @memberOf Tone.Loop#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"progress\", {\n\t\tget : function(){\n\t\t\treturn this._event.progress;\n\t\t}\n\t});\n\n\t/**\n\t *  The time between successive callbacks. \n\t *  @example\n\t * loop.interval = \"8n\"; //loop every 8n\n\t *  @memberOf Tone.Loop#\n\t *  @type {Time}\n\t *  @name interval\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"interval\", {\n\t\tget : function(){\n\t\t\treturn this._event.loopEnd;\n\t\t},\n\t\tset : function(interval){\n\t\t\tthis._event.loopEnd = interval;\n\t\t}\n\t});\n\n\t/**\n\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t *  A `playbackRate` of 2 would be twice as fast. \n\t *  @memberOf Tone.Loop#\n\t *  @type {Time}\n\t *  @name playbackRate\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._event.playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._event.playbackRate = rate;\n\t\t}\n\t});\n\n\t/**\n\t *  Random variation +/-0.01s to the scheduled time. \n\t *  Or give it a time value which it will randomize by.\n\t *  @type {Boolean|Time}\n\t *  @memberOf Tone.Loop#\n\t *  @name humanize\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"humanize\", {\n\t\tget : function(){\n\t\t\treturn this._event.humanize;\n\t\t},\n\t\tset : function(variation){\n\t\t\tthis._event.humanize = variation;\n\t\t}\n\t});\n\n\t/**\n\t *  The probably of the callback being invoked.\n\t *  @memberOf Tone.Loop#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"probability\", {\n\t\tget : function(){\n\t\t\treturn this._event.probability;\n\t\t},\n\t\tset : function(prob){\n\t\t\tthis._event.probability = prob;\n\t\t}\n\t});\n\n\t/**\n\t *  Muting the Loop means that no callbacks are invoked.\n\t *  @memberOf Tone.Loop#\n\t *  @type {Boolean}\n\t *  @name mute\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._event.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._event.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  The number of iterations of the loop. The default\n\t *  value is Infinity (loop forever).\n\t *  @memberOf Tone.Loop#\n\t *  @type {Positive}\n\t *  @name iterations\n\t */\n\tObject.defineProperty(Tone.Loop.prototype, \"iterations\", {\n\t\tget : function(){\n\t\t\tif (this._event.loop === true){\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn this._event.loop;\n\t\t\t}\n\t\t},\n\t\tset : function(iters){\n\t\t\tif (iters === Infinity){\n\t\t\t\tthis._event.loop = true;\n\t\t\t} else {\n\t\t\t\tthis._event.loop = iters;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Loop}  this\n\t */\n\tTone.Loop.prototype.dispose = function(){\n\t\tthis._event.dispose();\n\t\tthis._event = null;\n\t\tthis.callback = null;\n\t};\n\n\treturn Tone.Loop;\n});\n","define([\"../core/Tone\", \"../event/Event\", \"../type/Type\", \"../core/Transport\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Part is a collection Tone.Events which can be\n\t *         started/stopped and looped as a single unit.\n\t *\n\t *  @extends {Tone.Event}\n\t *  @param {Function} callback The callback to invoke on each event\n\t *  @param {Array} events the array of events\n\t *  @example\n\t * var part = new Tone.Part(function(time, note){\n\t * \t//the notes given as the second element in the array\n\t * \t//will be passed in as the second argument\n\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t *  @example\n\t * //use an array of objects as long as the object has a \"time\" attribute\n\t * var part = new Tone.Part(function(time, value){\n\t * \t//the value is an object which contains both the note and the velocity\n\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9},\n\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t * ]).start(0);\n\t */\n\tTone.Part = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"callback\", \"events\"], Tone.Part);\n\t\tTone.Event.call(this, options);\n\n\t\t/**\n\t\t *  An array of Objects.\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._events = [];\n\n\t\t//add the events\n\t\tfor (var i = 0; i < options.events.length; i++){\n\t\t\tif (Array.isArray(options.events[i])){\n\t\t\t\tthis.add(options.events[i][0], options.events[i][1]);\n\t\t\t} else {\n\t\t\t\tthis.add(options.events[i]);\n\t\t\t}\n\t\t}\n\t};\n\n\tTone.extend(Tone.Part, Tone.Event);\n\n\t/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Part.defaults = {\n\t\t\"callback\" : Tone.noOp,\n\t\t\"loop\" : false,\n\t\t\"loopEnd\" : \"1m\",\n\t\t\"loopStart\" : 0,\n\t\t\"playbackRate\" : 1,\n\t\t\"probability\" : 1,\n\t\t\"humanize\" : false,\n\t\t\"mute\" : false,\n\t\t\"events\" : []\n\t};\n\n\t/**\n\t *  Start the part at the given time.\n\t *  @param  {TransportTime}  time    When to start the part.\n\t *  @param  {Time=}  offset  The offset from the start of the part\n\t *                           to begin playing at.\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.start = function(time, offset){\n\t\tvar ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== Tone.State.Started){\n\t\t\tif (this._loop){\n\t\t\t\toffset = Tone.defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = Tone.defaultArg(offset, 0);\n\t\t\t}\n\t\t\toffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\t\"state\" : Tone.State.Started,\n\t\t\t\t\"time\" : ticks,\n\t\t\t\t\"offset\" : offset\n\t\t\t});\n\t\t\tthis._forEach(function(event){\n\t\t\t\tthis._startNote(event, ticks, offset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  {Tone.Event}  event\n\t *  @param  {Ticks}  ticks\n\t *  @param  {Ticks}  offset\n\t *  @private\n\t */\n\tTone.Part.prototype._startNote = function(event, ticks, offset){\n\t\tticks -= offset;\n\t\tif (this._loop){\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd){\n\t\t\t\tif (event.startOffset < offset){\n\t\t\t\t\t//start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(Tone.Ticks(ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset){\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(Tone.Ticks(ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset){\n\t\t\tevent.start(Tone.Ticks(ticks));\n\t\t}\n\t};\n\n\t/**\n\t *  The start from the scheduled start time\n\t *  @type {Ticks}\n\t *  @memberOf Tone.Part#\n\t *  @name startOffset\n\t *  @private\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"startOffset\", {\n\t\tget : function(){\n\t\t\treturn this._startOffset;\n\t\t},\n\t\tset : function(offset){\n\t\t\tthis._startOffset = offset;\n\t\t\tthis._forEach(function(event){\n\t\t\t\tevent.startOffset += this._startOffset;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.stop = function(time){\n\t\tvar ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t\tthis._forEach(function(event){\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get/Set an Event's value at the given time.\n\t *  If a value is passed in and no event exists at\n\t *  the given time, one will be created with that value.\n\t *  If two events are at the same time, the first one will\n\t *  be returned.\n\t *  @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t *\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2.\n\t * //if an event didn't exist at that time, it will be created.\n\t *  @param {TransportTime} time The time of the event to get or set.\n\t *  @param {*=} value If a value is passed in, the value of the\n\t *                    event at the given time will be set to it.\n\t *  @return {Tone.Event} the event at the time\n\t */\n\tTone.Part.prototype.at = function(time, value){\n\t\ttime = Tone.TransportTime(time);\n\t\tvar tickTime = Tone.Ticks(1).toSeconds();\n\t\tfor (var i = 0; i < this._events.length; i++){\n\t\t\tvar event = this._events[i];\n\t\t\tif (Math.abs(time.toTicks() - event.startOffset) < tickTime){\n\t\t\t\tif (Tone.isDefined(value)){\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t\t//if there was no event at that time, create one\n\t\tif (Tone.isDefined(value)){\n\t\t\tthis.add(time, value);\n\t\t\t//return the new event\n\t\t\treturn this._events[this._events.length - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Add a an event to the part.\n\t *  @param {Time} time The time the note should start.\n\t *                            If an object is passed in, it should\n\t *                            have a 'time' attribute and the rest\n\t *                            of the object will be used as the 'value'.\n\t *  @param  {Tone.Event|*}  value\n\t *  @returns {Tone.Part} this\n\t *  @example\n\t * part.add(\"1m\", \"C#+11\");\n\t */\n\tTone.Part.prototype.add = function(time, value){\n\t\t//extract the parameters\n\t\tif (time.hasOwnProperty(\"time\")){\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tvar event;\n\t\tif (value instanceof Tone.Event){\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new Tone.Event({\n\t\t\t\t\"callback\" : this._tick.bind(this),\n\t\t\t\t\"value\" : value,\n\t\t\t});\n\t\t}\n\t\t//the start offset\n\t\tevent.startOffset = time;\n\n\t\t//initialize the values\n\t\tevent.set({\n\t\t\t\"loopEnd\" : this.loopEnd,\n\t\t\t\"loopStart\" : this.loopStart,\n\t\t\t\"loop\" : this.loop,\n\t\t\t\"humanize\" : this.humanize,\n\t\t\t\"playbackRate\" : this.playbackRate,\n\t\t\t\"probability\" : this.probability\n\t\t});\n\n\t\tthis._events.push(event);\n\n\t\t//start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Restart the given event\n\t *  @param  {Tone.Event}  event\n\t *  @private\n\t */\n\tTone.Part.prototype._restartEvent = function(event){\n\t\tthis._state.forEach(function(stateEvent){\n\t\t\tif (stateEvent.state === Tone.State.Started){\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t//stop the note\n\t\t\t\tevent.stop(Tone.Ticks(stateEvent.time));\n\t\t\t}\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Remove an event from the part. If the event at that time is a Tone.Part,\n\t *  it will remove the entire part.\n\t *  @param {Time} time The time of the event\n\t *  @param {*} value Optionally select only a specific event value\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.remove = function(time, value){\n\t\t//extract the parameters\n\t\tif (time.hasOwnProperty(\"time\")){\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tfor (var i = this._events.length - 1; i >= 0; i--){\n\t\t\tvar event = this._events[i];\n\t\t\tif (event.startOffset === time){\n\t\t\t\tif (Tone.isUndef(value) || (Tone.isDefined(value) && event.value === value)){\n\t\t\t\t\tthis._events.splice(i, 1);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove all of the notes from the group.\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.removeAll = function(){\n\t\tthis._forEach(function(event){\n\t\t\tevent.dispose();\n\t\t});\n\t\tthis._events = [];\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.cancel = function(after){\n\t\tthis._forEach(function(event){\n\t\t\tevent.cancel(after);\n\t\t});\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over all of the events\n\t *  @param {Function} callback\n\t *  @param {Object} ctx The context\n\t *  @private\n\t */\n\tTone.Part.prototype._forEach = function(callback, ctx){\n\t\tif (this._events){\n\t\t\tctx = Tone.defaultArg(ctx, this);\n\t\t\tfor (var i = this._events.length - 1; i >= 0; i--){\n\t\t\t\tvar e = this._events[i];\n\t\t\t\tif (e instanceof Tone.Part){\n\t\t\t\t\te._forEach(callback, ctx);\n\t\t\t\t} else {\n\t\t\t\t\tcallback.call(ctx, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  {String}  attr  the attribute to set\n\t *  @param  {*}  value      The value to set it to\n\t *  @private\n\t */\n\tTone.Part.prototype._setAll = function(attr, value){\n\t\tthis._forEach(function(event){\n\t\t\tevent[attr] = value;\n\t\t});\n\t};\n\n\t/**\n\t *  Internal tick method\n\t *  @param  {Number}  time  The time of the event in seconds\n\t *  @private\n\t */\n\tTone.Part.prototype._tick = function(time, value){\n\t\tif (!this.mute){\n\t\t\tthis.callback(time, value);\n\t\t}\n\t};\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  {Tone.Event}  event  The event to test\n\t *  @private\n\t */\n\tTone.Part.prototype._testLoopBoundries = function(event){\n\t\tif (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd){\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === Tone.State.Stopped){\n\t\t\t//reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t};\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t *  @memberOf Tone.Part#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"probability\", {\n\t\tget : function(){\n\t\t\treturn this._probability;\n\t\t},\n\t\tset : function(prob){\n\t\t\tthis._probability = prob;\n\t\t\tthis._setAll(\"probability\", prob);\n\t\t}\n\t});\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t *  @example\n\t * event.humanize = true;\n\t *  @type {Boolean|Time}\n\t *  @name humanize\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"humanize\", {\n\t\tget : function(){\n\t\t\treturn this._humanize;\n\t\t},\n\t\tset : function(variation){\n\t\t\tthis._humanize = variation;\n\t\t\tthis._setAll(\"humanize\", variation);\n\t\t}\n\t});\n\n\t/**\n\t *  If the part should loop or not\n\t *  between Tone.Part.loopStart and\n\t *  Tone.Part.loopEnd. An integer\n\t *  value corresponds to the number of\n\t *  loops the Part does after it starts.\n\t *  @memberOf Tone.Part#\n\t *  @type {Boolean|Positive}\n\t *  @name loop\n\t *  @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"loop\", {\n\t\tget : function(){\n\t\t\treturn this._loop;\n\t\t},\n\t\tset : function(loop){\n\t\t\tthis._loop = loop;\n\t\t\tthis._forEach(function(event){\n\t\t\t\tevent._loopStart = this._loopStart;\n\t\t\t\tevent._loopEnd = this._loopEnd;\n\t\t\t\tevent.loop = loop;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t *  The loopEnd point determines when it will\n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {Time}\n\t *  @name loopEnd\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._loopEnd).toSeconds();\n\t\t},\n\t\tset : function(loopEnd){\n\t\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\t\tif (this._loop){\n\t\t\t\tthis._forEach(function(event){\n\t\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The loopStart point determines when it will\n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {Time}\n\t *  @name loopStart\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._loopStart).toSeconds();\n\t\t},\n\t\tset : function(loopStart){\n\t\t\tthis._loopStart = this.toTicks(loopStart);\n\t\t\tif (this._loop){\n\t\t\t\tthis._forEach(function(event){\n\t\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * \tThe playback rate of the part\n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name playbackRate\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._playbackRate = rate;\n\t\t\tthis._setAll(\"playbackRate\", rate);\n\t\t}\n\t});\n\n\t/**\n\t * \tThe number of scheduled notes in the part.\n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name length\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"length\", {\n\t\tget : function(){\n\t\t\treturn this._events.length;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.dispose = function(){\n\t\tTone.Event.prototype.dispose.call(this);\n\t\tthis.removeAll();\n\t\tthis.callback = null;\n\t\tthis._events = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Part;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../source/PulseOscillator\",\n\t\"../source/Oscillator\", \"../signal/Multiply\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator\n\t *         at the modulationFrequency. This has the effect of continuously\n\t *         changing the timbre of the oscillator by altering the harmonics\n\t *         generated.\n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t *  @example\n\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t */\n\tTone.PWMOscillator = function(){\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"modulationFrequency\"], Tone.PWMOscillator);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  the pulse oscillator\n\t\t *  @type {Tone.PulseOscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t\t//change the pulse oscillator type\n\t\tthis._pulse._sawtooth.type = \"sine\";\n\n\t\t/**\n\t\t *  the modulator\n\t\t *  @type {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._modulator = new Tone.Oscillator({\n\t\t\t\"frequency\" : options.frequency,\n\t\t\t\"detune\" : options.detune,\n\t\t\t\"phase\" : options.phase\n\t\t});\n\n\t\t/**\n\t\t *  Scale the oscillator so it doesn't go silent\n\t\t *  at the extreme values.\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._scale = new Tone.Multiply(2);\n\n\t\t/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this._modulator.frequency;\n\n\t\t/**\n\t\t *  The detune of the oscillator.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = this._modulator.detune;\n\n\t\t/**\n\t\t *  The modulation rate of the oscillator.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\t//connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\tthis._readOnly([\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t};\n\n\tTone.extend(Tone.PWMOscillator, Tone.Source);\n\n\t/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.PWMOscillator.defaults = {\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"phase\" : 0,\n\t\t\"modulationFrequency\" : 0.4,\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param  {Time} [time=now]\n\t *  @private\n\t */\n\tTone.PWMOscillator.prototype._start = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t};\n\n\t/**\n\t *  stop the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.PWMOscillator.prototype._stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t};\n\n\t/**\n\t *  restart the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.PWMOscillator.prototype.restart = function(time){\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t};\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t * @readOnly\n\t * @memberOf Tone.PWMOscillator#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.PWMOscillator.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn \"pwm\";\n\t\t}\n\t});\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t * @readOnly\n\t * @memberOf Tone.PWMOscillator#\n\t * @type {string}\n\t * @name baseType\n\t */\n\tObject.defineProperty(Tone.PWMOscillator.prototype, \"baseType\", {\n\t\tget : function(){\n\t\t\treturn \"pwm\";\n\t\t}\n\t});\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t * @memberOf Tone.PWMOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @private\n\t */\n\tObject.defineProperty(Tone.PWMOscillator.prototype, \"partials\", {\n\t\tget : function(){\n\t\t\treturn [];\n\t\t}\n\t});\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.PWMOscillator#\n\t * @type {number}\n\t * @name phase\n\t */\n\tObject.defineProperty(Tone.PWMOscillator.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._modulator.phase;\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._modulator.phase = phase;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.PWMOscillator} this\n\t */\n\tTone.PWMOscillator.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis._pulse.dispose();\n\t\tthis._pulse = null;\n\t\tthis._scale.dispose();\n\t\tthis._scale = null;\n\t\tthis._modulator.dispose();\n\t\tthis._modulator = null;\n\t\tthis._writable([\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t\tthis.frequency = null;\n\t\tthis.detune = null;\n\t\tthis.modulationFrequency = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.PWMOscillator;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../source/Oscillator\", \"../signal/Multiply\",\n\t\"../core/Gain\", \"../signal/AudioToGain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.AMOscillator\n\t *\n\t *  @extends {Tone.Oscillator}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t *  @param {String} type The type of the carrier oscillator.\n\t *  @param {String} modulationType The type of the modulator oscillator.\n\t *  @example\n\t * //a sine oscillator frequency-modulated by a square wave\n\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t */\n\tTone.AMOscillator = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"type\", \"modulationType\"], Tone.AMOscillator);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  The carrier oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._carrier = new Tone.Oscillator(options.frequency, options.type);\n\n\t\t/**\n\t\t *  The oscillator's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this._carrier.frequency;\n\n\t\t/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = this._carrier.detune;\n\t\tthis.detune.value = options.detune;\n\n\t\t/**\n\t\t *  The modulating oscillator\n\t\t *  @type  {Tone.Oscillator}\n\t\t *  @private\n\t\t */\n\t\tthis._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\n\t\t/**\n\t\t *  convert the -1,1 output to 0,1\n\t\t *  @type {Tone.AudioToGain}\n\t\t *  @private\n\t\t */\n\t\tthis._modulationScale = new Tone.AudioToGain();\n\n\t\t/**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t\t *  A harmonicity of 1 gives both oscillators the same frequency.\n\t\t *  Harmonicity = 2 means a change of an octave.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch the modulator an octave below carrier\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */\n\t\tthis.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\tthis.harmonicity.units = Tone.Type.Positive;\n\n\t\t/**\n\t\t *  the node where the modulation happens\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._modulationNode = new Tone.Gain(0);\n\n\t\t//connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.detune.connect(this._modulator.detune);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\tthis.phase = options.phase;\n\n\t\tthis._readOnly([\"frequency\", \"detune\", \"harmonicity\"]);\n\t};\n\n\tTone.extend(Tone.AMOscillator, Tone.Oscillator);\n\n\t/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.AMOscillator.defaults = {\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"phase\" : 0,\n\t\t\"type\" : \"sine\",\n\t\t\"modulationType\" : \"square\",\n\t\t\"harmonicity\" : 1\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param  {Time} [time=now]\n\t *  @private\n\t */\n\tTone.AMOscillator.prototype._start = function(time){\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t};\n\n\t/**\n\t *  stop the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.AMOscillator.prototype._stop = function(time){\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t};\n\n\t/**\n\t *  restart the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.AMOscillator.prototype.restart = function(time){\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t};\n\n\t/**\n\t * The type of the carrier oscillator\n\t * @memberOf Tone.AMOscillator#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.AMOscillator.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._carrier.type = type;\n\t\t}\n\t});\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @memberOf Tone.AMOscillator#\n\t * @type {string}\n\t * @name baseType\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tObject.defineProperty(Tone.AMOscillator.prototype, \"baseType\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.baseType;\n\t\t},\n\t\tset : function(baseType){\n\t\t\tthis._carrier.baseType = baseType;\n\t\t}\n\t});\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials. \n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is \n\t * not settable, but equals the length of the partials array.\n\t * @memberOf Tone.AMOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tObject.defineProperty(Tone.AMOscillator.prototype, \"partialCount\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.partialCount;\n\t\t},\n\t\tset : function(partialCount){\n\t\t\tthis._carrier.partialCount = partialCount;\n\t\t}\n\t});\n\n\t/**\n\t * The type of the modulator oscillator\n\t * @memberOf Tone.AMOscillator#\n\t * @type {string}\n\t * @name modulationType\n\t */\n\tObject.defineProperty(Tone.AMOscillator.prototype, \"modulationType\", {\n\t\tget : function(){\n\t\t\treturn this._modulator.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._modulator.type = type;\n\t\t}\n\t});\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.AMOscillator#\n\t * @type {number}\n\t * @name phase\n\t */\n\tObject.defineProperty(Tone.AMOscillator.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.phase;\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._carrier.phase = phase;\n\t\t\tthis._modulator.phase = phase;\n\t\t}\n\t});\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf Tone.AMOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tObject.defineProperty(Tone.AMOscillator.prototype, \"partials\", {\n\t\tget : function(){\n\t\t\treturn this._carrier.partials;\n\t\t},\n\t\tset : function(partials){\n\t\t\tthis._carrier.partials = partials;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.AMOscillator} this\n\t */\n\tTone.AMOscillator.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis._writable([\"frequency\", \"detune\", \"harmonicity\"]);\n\t\tthis.frequency = null;\n\t\tthis.detune = null;\n\t\tthis.harmonicity.dispose();\n\t\tthis.harmonicity = null;\n\t\tthis._carrier.dispose();\n\t\tthis._carrier = null;\n\t\tthis._modulator.dispose();\n\t\tthis._modulator = null;\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationNode = null;\n\t\tthis._modulationScale.dispose();\n\t\tthis._modulationScale = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AMOscillator;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../source/Oscillator\",\n\t\"../signal/Multiply\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.FatOscillator\n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator.\n\t *  @param {String} type The type of the carrier oscillator.\n\t *  @param {String} modulationType The type of the modulator oscillator.\n\t *  @example\n\t * //a sine oscillator frequency-modulated by a square wave\n\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t */\n\tTone.FatOscillator = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"type\", \"spread\"], Tone.FatOscillator);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  The oscillator's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\n\t\t/**\n\t\t *  The array of oscillators\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._oscillators = [];\n\n\t\t/**\n\t\t *  The total spread of the oscillators\n\t\t *  @type  {Cents}\n\t\t *  @private\n\t\t */\n\t\tthis._spread = options.spread;\n\n\t\t/**\n\t\t *  The type of the oscillator\n\t\t *  @type {String}\n\t\t *  @private\n\t\t */\n\t\tthis._type = options.type;\n\n\t\t/**\n\t\t *  The phase of the oscillators\n\t\t *  @type {Degrees}\n\t\t *  @private\n\t\t */\n\t\tthis._phase = options.phase;\n\n\t\t/**\n\t\t *  The partials array\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._partials = options.partials;\n\n\t\t/**\n\t\t *  The number of partials to use\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._partialCount = options.partialCount;\n\n\t\t//set the count initially\n\t\tthis.count = options.count;\n\t\tthis._readOnly([\"frequency\", \"detune\"]);\n\t};\n\n\tTone.extend(Tone.FatOscillator, Tone.Source);\n\n\t/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.FatOscillator.defaults = {\n\t\t\"frequency\" : 440,\n\t\t\"detune\" : 0,\n\t\t\"phase\" : 0,\n\t\t\"spread\" : 20,\n\t\t\"count\" : 3,\n\t\t\"type\" : \"sawtooth\",\n\t\t\"partials\" : [],\n\t\t\"partialCount\" : 0\n\t};\n\n\t/**\n\t *  start the oscillator\n\t *  @param  {Time} [time=now]\n\t *  @private\n\t */\n\tTone.FatOscillator.prototype._start = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(function(osc){\n\t\t\tosc.start(time);\n\t\t});\n\t};\n\n\t/**\n\t *  stop the oscillator\n\t *  @param  {Time} [time=now]\n\t *  @private\n\t */\n\tTone.FatOscillator.prototype._stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(function(osc){\n\t\t\tosc.stop(time);\n\t\t});\n\t};\n\n\t/**\n\t *  restart the oscillator\n\t *  @param  {Time} time (optional) timing parameter\n\t *  @private\n\t */\n\tTone.FatOscillator.prototype.restart = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(function(osc){\n\t\t\tosc.restart(time);\n\t\t});\n\t};\n\n\t/**\n\t *  Iterate over all of the oscillators\n\t *  @param  {Function}  iterator  The iterator function\n\t *  @private\n\t */\n\tTone.FatOscillator.prototype._forEach = function(iterator){\n\t\tfor (var i = 0; i < this._oscillators.length; i++){\n\t\t\titerator.call(this, this._oscillators[i], i);\n\t\t}\n\t};\n\n\t/**\n\t * The type of the carrier oscillator\n\t * @memberOf Tone.FatOscillator#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.FatOscillator.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._type = type;\n\t\t\tthis._forEach(function(osc){\n\t\t\t\tosc.type = type;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Cents}\n\t * @name spread\n\t */\n\tObject.defineProperty(Tone.FatOscillator.prototype, \"spread\", {\n\t\tget : function(){\n\t\t\treturn this._spread;\n\t\t},\n\t\tset : function(spread){\n\t\t\tthis._spread = spread;\n\t\t\tif (this._oscillators.length > 1){\n\t\t\t\tvar start = -spread/2;\n\t\t\t\tvar step = spread / (this._oscillators.length - 1);\n\t\t\t\tthis._forEach(function(osc, i){\n\t\t\t\t\tosc.detune.value = start + step * i;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The number of detuned oscillators\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Number}\n\t * @name count\n\t */\n\tObject.defineProperty(Tone.FatOscillator.prototype, \"count\", {\n\t\tget : function(){\n\t\t\treturn this._oscillators.length;\n\t\t},\n\t\tset : function(count){\n\t\t\tcount = Math.max(count, 1);\n\t\t\tif (this._oscillators.length !== count){\n\t\t\t\t//dispose the previous oscillators\n\t\t\t\tthis._forEach(function(osc){\n\t\t\t\t\tosc.dispose();\n\t\t\t\t});\n\t\t\t\tthis._oscillators = [];\n\t\t\t\tfor (var i = 0; i < count; i++){\n\t\t\t\t\tvar osc = new Tone.Oscillator();\n\t\t\t\t\tif (this.type === Tone.Oscillator.Type.Custom){\n\t\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tosc.type = this._type;\n\t\t\t\t\t}\n\t\t\t\t\tosc.partialCount = this._partialCount;\n\t\t\t\t\tosc.phase = this._phase + (i / count) * 360;\n\t\t\t\t\tosc.volume.value = -6 - count*1.1;\n\t\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\t\tosc.connect(this.output);\n\t\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t\t}\n\t\t\t\t//set the spread\n\t\t\t\tthis.spread = this._spread;\n\t\t\t\tif (this.state === Tone.State.Started){\n\t\t\t\t\tthis._forEach(function(osc){\n\t\t\t\t\t\tosc.start();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Number}\n\t * @name phase\n\t */\n\tObject.defineProperty(Tone.FatOscillator.prototype, \"phase\", {\n\t\tget : function(){\n\t\t\treturn this._phase;\n\t\t},\n\t\tset : function(phase){\n\t\t\tthis._phase = phase;\n\t\t\tthis._forEach(function(osc){\n\t\t\t\tosc.phase = phase;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @memberOf Tone.FatOscillator#\n\t * @type {string}\n\t * @name baseType\n\t * @example\n\t * osc.type = 'sine2'\n\t * osc.baseType //'sine'\n\t * osc.partialCount = 2\n\t */\n\tObject.defineProperty(Tone.FatOscillator.prototype, \"baseType\", {\n\t\tget : function(){\n\t\t\treturn this._oscillators[0].baseType;\n\t\t},\n\t\tset : function(baseType){\n\t\t\tthis._forEach(function(osc){\n\t\t\t\tosc.baseType = baseType;\n\t\t\t});\n\t\t\tthis._type = this._oscillators[0].type;\n\t\t}\n\t});\n\n\t/**\n\t * The partials of the carrier waveform. A partial represents\n\t * the amplitude at a harmonic. The first harmonic is the\n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series.\n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */\n\tObject.defineProperty(Tone.FatOscillator.prototype, \"partials\", {\n\t\tget : function(){\n\t\t\treturn this._oscillators[0].partials;\n\t\t},\n\t\tset : function(partials){\n\t\t\tthis._partials = partials;\n\t\t\tthis._type = Tone.Oscillator.Type.Custom;\n\t\t\tthis._forEach(function(osc){\n\t\t\t\tosc.partials = partials;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials. \n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is \n\t * not settable, but equals the length of the partials array.\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Number}\n\t * @name partialCount\n\t */\n\tObject.defineProperty(Tone.FatOscillator.prototype, \"partialCount\", {\n\t\tget : function(){\n\t\t\treturn this._oscillators[0].partialCount;\n\t\t},\n\t\tset : function(partialCount){\n\t\t\tthis._partialCount = partialCount;\n\t\t\tthis._forEach(function(osc){\n\t\t\t\tosc.partialCount = partialCount;\n\t\t\t});\n\t\t\tthis._type = this._oscillators[0].type;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.FatOscillator} this\n\t */\n\tTone.FatOscillator.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis._writable([\"frequency\", \"detune\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\tthis._forEach(function(osc){\n\t\t\tosc.dispose();\n\t\t});\n\t\tthis._oscillators = null;\n\t\tthis._partials = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.FatOscillator;\n});\n","define([\"../core/Tone\", \"../component/AmplitudeEnvelope\", \"../component/FrequencyEnvelope\", \"../source/OmniOscillator\",\n\t\"../signal/Signal\", \"../component/Filter\", \"../instrument/Monophonic\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the\n\t *          Tone.Filter are controlled by Tone.Envelopes.\n\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth\n\t *                          see defaults below\n\t *  @example\n\t * var synth = new Tone.MonoSynth({\n\t * \t\"oscillator\" : {\n\t * \t\t\"type\" : \"square\"\n\t *  },\n\t *  \"envelope\" : {\n\t *  \t\"attack\" : 0.1\n\t *  }\n\t * }).toMaster();\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\tTone.MonoSynth = function(options){\n\n\t\t//get the defaults\n\t\toptions = Tone.defaultArg(options, Tone.MonoSynth.defaults);\n\t\tTone.Monophonic.call(this, options);\n\n\t\t/**\n\t\t *  The oscillator.\n\t\t *  @type {Tone.OmniOscillator}\n\t\t */\n\t\tthis.oscillator = new Tone.OmniOscillator(options.oscillator);\n\n\t\t/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this.oscillator.frequency;\n\n\t\t/**\n\t\t *  The detune control.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = this.oscillator.detune;\n\n\t\t/**\n\t\t *  The filter.\n\t\t *  @type {Tone.Filter}\n\t\t */\n\t\tthis.filter = new Tone.Filter(options.filter);\n\t\tthis.filter.frequency.value = 5000;\n\n\t\t/**\n\t\t *  The filter envelope.\n\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t */\n\t\tthis.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\n\t\t/**\n\t\t *  The amplitude envelope.\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */\n\t\tthis.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\n\t\t//connect the oscillators to the output\n\t\tthis.oscillator.chain(this.filter, this.envelope, this.output);\n\t\t//connect the filter envelope\n\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\t\tthis._readOnly([\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n\t};\n\n\tTone.extend(Tone.MonoSynth, Tone.Monophonic);\n\n\t/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.MonoSynth.defaults = {\n\t\t\"frequency\" : \"C4\",\n\t\t\"detune\" : 0,\n\t\t\"oscillator\" : {\n\t\t\t\"type\" : \"square\"\n\t\t},\n\t\t\"filter\" : {\n\t\t\t\"Q\" : 6,\n\t\t\t\"type\" : \"lowpass\",\n\t\t\t\"rolloff\" : -24\n\t\t},\n\t\t\"envelope\" : {\n\t\t\t\"attack\" : 0.005,\n\t\t\t\"decay\" : 0.1,\n\t\t\t\"sustain\" : 0.9,\n\t\t\t\"release\" : 1\n\t\t},\n\t\t\"filterEnvelope\" : {\n\t\t\t\"attack\" : 0.06,\n\t\t\t\"decay\" : 0.2,\n\t\t\t\"sustain\" : 0.5,\n\t\t\t\"release\" : 2,\n\t\t\t\"baseFrequency\" : 200,\n\t\t\t\"octaves\" : 7,\n\t\t\t\"exponent\" : 2\n\t\t}\n\t};\n\n\t/**\n\t *  start the attack portion of the envelope\n\t *  @param {Time} [time=now] the time the attack should start\n\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t *  @returns {Tone.MonoSynth} this\n\t *  @private\n\t */\n\tTone.MonoSynth.prototype._triggerEnvelopeAttack = function(time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\t//the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.filterEnvelope.triggerAttack(time);\n\t\tthis.oscillator.start(time);\n\t\tif (this.envelope.sustain === 0){\n\t\t\tthis.oscillator.stop(time + this.envelope.attack + this.envelope.decay);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  start the release portion of the envelope\n\t *  @param {Time} [time=now] the time the release should start\n\t *  @returns {Tone.MonoSynth} this\n\t *  @private\n\t */\n\tTone.MonoSynth.prototype._triggerEnvelopeRelease = function(time){\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.filterEnvelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.envelope.release);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.MonoSynth} this\n\t */\n\tTone.MonoSynth.prototype.dispose = function(){\n\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\tthis._writable([\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n\t\tthis.oscillator.dispose();\n\t\tthis.oscillator = null;\n\t\tthis.envelope.dispose();\n\t\tthis.envelope = null;\n\t\tthis.filterEnvelope.dispose();\n\t\tthis.filterEnvelope = null;\n\t\tthis.filter.dispose();\n\t\tthis.filter = null;\n\t\tthis.frequency = null;\n\t\tthis.detune = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MonoSynth;\n});\n","define([\"../core/Tone\", \"../core/Buffer\", \"../source/Source\", \"../source/TickSource\",\n\t\"../source/BufferSource\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Source}\n\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t *                                  which to load the AudioBuffer\n\t *  @param {Function=} onload The function to invoke when the buffer is loaded.\n\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t *  @example\n\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t * //play as soon as the buffer is loaded\n\t * player.autostart = true;\n\t */\n\tTone.Player = function(url){\n\n\t\tvar options;\n\t\tif (url instanceof Tone.Buffer && url.loaded){\n\t\t\turl = url.get();\n\t\t\toptions = Tone.Player.defaults;\n\t\t} else {\n\t\t\toptions = Tone.defaults(arguments, [\"url\", \"onload\"], Tone.Player);\n\t\t}\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  If the file should play as soon\n\t\t *  as the buffer is loaded.\n\t\t *  @type {Boolean}\n\t\t *  @example\n\t\t * //will play as soon as it's loaded\n\t\t * var player = new Tone.Player({\n\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t * \t\"autostart\" : true,\n\t\t * }).toMaster();\n\t\t */\n\t\tthis.autostart = options.autostart;\n\n\t\t/**\n\t\t *  the buffer\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t\tthis._buffer = new Tone.Buffer({\n\t\t\t\"url\" : options.url,\n\t\t\t\"onload\" : this._onload.bind(this, options.onload),\n\t\t\t\"reverse\" : options.reverse\n\t\t});\n\t\tif (url instanceof AudioBuffer){\n\t\t\tthis._buffer.set(url);\n\t\t}\n\n\t\t/**\n\t\t *  if the buffer should loop once it's over\n\t\t *  @type {Boolean}\n\t\t *  @private\n\t\t */\n\t\tthis._loop = options.loop;\n\n\t\t/**\n\t\t *  if 'loop' is true, the loop will start at this position\n\t\t *  @type {Time}\n\t\t *  @private\n\t\t */\n\t\tthis._loopStart = options.loopStart;\n\n\t\t/**\n\t\t *  if 'loop' is true, the loop will end at this position\n\t\t *  @type {Time}\n\t\t *  @private\n\t\t */\n\t\tthis._loopEnd = options.loopEnd;\n\n\t\t/**\n\t\t *  the playback rate\n\t\t *  @private\n\t\t *  @type {Number}\n\t\t */\n\t\tthis._playbackRate = options.playbackRate;\n\n\t\t/**\n\t\t *  All of the active buffer source nodes\n\t\t *  @type {Array<Tone.BufferSource>}\n\t\t *  @private\n\t\t */\n\t\tthis._activeSources = [];\n\n\t\t/**\n\t\t *  The fadeIn time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.fadeIn = options.fadeIn;\n\n\t\t/**\n\t\t *  The fadeOut time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.fadeOut = options.fadeOut;\n\t};\n\n\tTone.extend(Tone.Player, Tone.Source);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Player.defaults = {\n\t\t\"onload\" : Tone.noOp,\n\t\t\"playbackRate\" : 1,\n\t\t\"loop\" : false,\n\t\t\"autostart\" : false,\n\t\t\"loopStart\" : 0,\n\t\t\"loopEnd\" : 0,\n\t\t\"reverse\" : false,\n\t\t\"fadeIn\" : 0,\n\t\t\"fadeOut\" : 0\n\t};\n\n\t/**\n\t *  Load the audio file as an audio buffer.\n\t *  Decodes the audio asynchronously and invokes\n\t *  the callback once the audio buffer loads.\n\t *  Note: this does not need to be called if a url\n\t *  was passed in to the constructor. Only use this\n\t *  if you want to manually load a new url.\n\t * @param {string} url The url of the buffer to load.\n\t *                     Filetype support depends on the\n\t *                     browser.\n\t *  @param  {Function=} callback The function to invoke once\n\t *                               the sample is loaded.\n\t *  @returns {Promise}\n\t */\n\tTone.Player.prototype.load = function(url, callback){\n\t\treturn this._buffer.load(url, this._onload.bind(this, callback));\n\t};\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t * @private\n\t */\n\tTone.Player.prototype._onload = function(callback){\n\t\tcallback = Tone.defaultArg(callback, Tone.noOp);\n\t\tcallback(this);\n\t\tif (this.autostart){\n\t\t\tthis.start();\n\t\t}\n\t};\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t * @private\n\t */\n\tTone.Player.prototype._onSourceEnd = function(source){\n\t\tvar index = this._activeSources.indexOf(source);\n\t\tthis._activeSources.splice(index, 1);\n\t\tif (this._activeSources.length === 0 && !this._synced){\n\t\t\tthis._state.setStateAtTime(Tone.State.Stopped, Tone.now());\n\t\t}\n\t};\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length\n\t *                                of the sample (minus any offset)\n\t *  @returns {Tone.Player} this\n\t *  @memberOf Tone.Player#\n\t *  @method start\n\t *  @name start\n\t */\n\n\t/**\n\t *  Internal start method\n\t *  @private\n\t */\n\tTone.Player.prototype._start = function(startTime, offset, duration){\n\t\t//if it's a loop the default offset is the loopstart point\n\t\tif (this._loop){\n\t\t\toffset = Tone.defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t//otherwise the default offset is 0\n\t\t\toffset = Tone.defaultArg(offset, 0);\n\t\t}\n\n\t\t//compute the values in seconds\n\t\toffset = this.toSeconds(offset);\n\t\tvar computedDuration = Tone.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t\tcomputedDuration = this.toSeconds(computedDuration);\n\t\t//scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t//get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t//make the source\n\t\tvar source = new Tone.BufferSource({\n\t\t\t\"buffer\" : this._buffer,\n\t\t\t\"loop\" : this._loop,\n\t\t\t\"loopStart\" : this._loopStart,\n\t\t\t\"loopEnd\" : this._loopEnd,\n\t\t\t\"onended\" : this._onSourceEnd.bind(this),\n\t\t\t\"playbackRate\" : this._playbackRate,\n\t\t\t\"fadeIn\" : this.fadeIn,\n\t\t\t\"fadeOut\" : this.fadeOut,\n\t\t}).connect(this.output);\n\n\t\t//set the looping properties\n\t\tif (!this._loop && !this._synced){\n\t\t\t//if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(Tone.State.Stopped, startTime + computedDuration);\n\t\t}\n\n\t\t//add it to the array of active sources\n\t\tthis._activeSources.push(source);\n\n\t\t//start it\n\t\tif (this._loop && Tone.isUndef(duration)){\n\t\t\tsource.start(startTime, offset);\n\t\t} else {\n\t\t\t//subtract the fade out time\n\t\t\tsource.start(startTime, offset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop playback.\n\t *  @private\n\t *  @param  {Time} [time=now]\n\t *  @returns {Tone.Player} this\n\t */\n\tTone.Player.prototype._stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(function(source){\n\t\t\tsource.stop(time);\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length\n\t *                                of the sample (minus any offset)\n\t *  @returns {Tone.Player} this\n\t */\n\tTone.Player.prototype.restart = function(time, offset, duration){\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Seek to a specific time in the player's buffer. If the\n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that\n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Tone.Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */\n\tTone.Player.prototype.seek = function(offset, time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === Tone.State.Started){\n\t\t\toffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(time);\n\t\t\t//restart it at the given time\n\t\t\tthis._start(time, offset);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set the loop start and end. Will only loop if loop is\n\t *  set to true.\n\t *  @param {Time} loopStart The loop end time\n\t *  @param {Time} loopEnd The loop end time\n\t *  @returns {Tone.Player} this\n\t *  @example\n\t * //loop 0.1 seconds of the file.\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */\n\tTone.Player.prototype.setLoopPoints = function(loopStart, loopEnd){\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t};\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t * @memberOf Tone.Player#\n\t * @type {Time}\n\t * @name loopStart\n\t */\n\tObject.defineProperty(Tone.Player.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn this._loopStart;\n\t\t},\n\t\tset : function(loopStart){\n\t\t\tthis._loopStart = loopStart;\n\t\t\t//get the current source\n\t\t\tthis._activeSources.forEach(function(source){\n\t\t\t\tsource.loopStart = loopStart;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t * @memberOf Tone.Player#\n\t * @type {Time}\n\t * @name loopEnd\n\t */\n\tObject.defineProperty(Tone.Player.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn this._loopEnd;\n\t\t},\n\t\tset : function(loopEnd){\n\t\t\tthis._loopEnd = loopEnd;\n\t\t\t//get the current source\n\t\t\tthis._activeSources.forEach(function(source){\n\t\t\t\tsource.loopEnd = loopEnd;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t * @memberOf Tone.Player#\n\t * @type {Tone.Buffer}\n\t * @name buffer\n\t */\n\tObject.defineProperty(Tone.Player.prototype, \"buffer\", {\n\t\tget : function(){\n\t\t\treturn this._buffer;\n\t\t},\n\t\tset : function(buffer){\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t});\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t * @memberOf Tone.Player#\n\t * @type {Boolean}\n\t * @name loop\n\t */\n\tObject.defineProperty(Tone.Player.prototype, \"loop\", {\n\t\tget : function(){\n\t\t\treturn this._loop;\n\t\t},\n\t\tset : function(loop){\n\t\t\t//if no change, do nothing\n\t\t\tif (this._loop === loop){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._loop = loop;\n\t\t\t//set the loop of all of the sources\n\t\t\tthis._activeSources.forEach(function(source){\n\t\t\t\tsource.loop = loop;\n\t\t\t});\n\t\t\tif (loop){\n\t\t\t\t//remove the next stopEvent\n\t\t\t\tvar stopEvent = this._state.getNextState(Tone.State.Stopped, this.now());\n\t\t\t\tif (stopEvent){\n\t\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t * @memberOf Tone.Player#\n\t * @type {Number}\n\t * @name playbackRate\n\t */\n\tObject.defineProperty(Tone.Player.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._playbackRate = rate;\n\t\t\tvar now = this.now();\n\n\t\t\t//cancel the stop event since it's at a different time now\n\t\t\tvar stopEvent = this._state.getNextState(Tone.State.Stopped, now);\n\t\t\tif (stopEvent){\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\n\t\t\t//set all the sources\n\t\t\tthis._activeSources.forEach(function(source){\n\t\t\t\tsource.cancelStop();\n\t\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * The direction the buffer should play in\n\t * @memberOf Tone.Player#\n\t * @type {Boolean}\n\t * @name reverse\n\t */\n\tObject.defineProperty(Tone.Player.prototype, \"reverse\", {\n\t\tget : function(){\n\t\t\treturn this._buffer.reverse;\n\t\t},\n\t\tset : function(rev){\n\t\t\tthis._buffer.reverse = rev;\n\t\t}\n\t});\n\n\t/**\n\t * If all the buffer is loaded\n\t * @memberOf Tone.Player#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Player.prototype, \"loaded\", {\n\t\tget : function(){\n\t\t\treturn this._buffer.loaded;\n\t\t}\n\t});\n\n\t/**\n\t *  Dispose and disconnect.\n\t *  @return {Tone.Player} this\n\t */\n\tTone.Player.prototype.dispose = function(){\n\t\t//disconnect all of the players\n\t\tthis._activeSources.forEach(function(source){\n\t\t\tsource.dispose();\n\t\t});\n\t\tthis._activeSources = null;\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis._buffer.dispose();\n\t\tthis._buffer = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Player;\n});\n","/**\n *  StartAudioContext.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2016 Yotam Mann\n */\n(function (root, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine([], factory)\n\t } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory()\n\t} else {\n\t\troot.StartAudioContext = factory()\n  }\n}(this, function () {\n\n\t//TAP LISTENER/////////////////////////////////////////////////////////////\n\n\t/**\n\t * @class  Listens for non-dragging tap ends on the given element\n\t * @param {Element} element\n\t * @internal\n\t */\n\tvar TapListener = function(element, context){\n\n\t\tthis._dragged = false\n\n\t\tthis._element = element\n\n\t\tthis._bindedMove = this._moved.bind(this)\n\t\tthis._bindedEnd = this._ended.bind(this, context)\n\n\t\telement.addEventListener(\"touchstart\", this._bindedEnd)\n\t\telement.addEventListener(\"touchmove\", this._bindedMove)\n\t\telement.addEventListener(\"touchend\", this._bindedEnd)\n\t\telement.addEventListener(\"mouseup\", this._bindedEnd)\n\t}\n\n\t/**\n\t * drag move event\n\t */\n\tTapListener.prototype._moved = function(e){\n\t\tthis._dragged = true\n\t};\n\n\t/**\n\t * tap ended listener\n\t */\n\tTapListener.prototype._ended = function(context){\n\t\tif (!this._dragged){\n\t\t\tstartContext(context)\n\t\t}\n\t\tthis._dragged = false\n\t};\n\n\t/**\n\t * remove all the bound events\n\t */\n\tTapListener.prototype.dispose = function(){\n\t\tthis._element.removeEventListener(\"touchstart\", this._bindedEnd)\n\t\tthis._element.removeEventListener(\"touchmove\", this._bindedMove)\n\t\tthis._element.removeEventListener(\"touchend\", this._bindedEnd)\n\t\tthis._element.removeEventListener(\"mouseup\", this._bindedEnd)\n\t\tthis._bindedMove = null\n\t\tthis._bindedEnd = null\n\t\tthis._element = null\n\t};\n\n\t//END TAP LISTENER/////////////////////////////////////////////////////////\n\n\t/**\n\t * Plays a silent sound and also invoke the \"resume\" method\n\t * @param {AudioContext} context\n\t * @private\n\t */\n\tfunction startContext(context){\n\t\t// this accomplishes the iOS specific requirement\n\t\tvar buffer = context.createBuffer(1, 1, context.sampleRate)\n\t\tvar source = context.createBufferSource()\n\t\tsource.buffer = buffer\n\t\tsource.connect(context.destination)\n\t\tsource.start(0)\n\n\t\t// resume the audio context\n\t\tif (context.resume){\n\t\t\tcontext.resume()\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if the audio context is started\n\t * @param  {AudioContext}  context\n\t * @return {Boolean}\n\t * @private\n\t */\n\tfunction isStarted(context){\n\t\t return context.state === \"running\"\n\t}\n\n\t/**\n\t * Invokes the callback as soon as the AudioContext\n\t * is started\n\t * @param  {AudioContext}   context\n\t * @param  {Function} callback\n\t */\n\tfunction onStarted(context, callback){\n\n\t\tfunction checkLoop(){\n\t\t\tif (isStarted(context)){\n\t\t\t\tcallback()\n\t\t\t} else {\n\t\t\t\trequestAnimationFrame(checkLoop)\n\t\t\t\tif (context.resume){\n\t\t\t\t\tcontext.resume()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isStarted(context)){\n\t\t\tcallback()\n\t\t} else {\n\t\t\tcheckLoop()\n\t\t}\n\t}\n\n\t/**\n\t * Add a tap listener to the audio context\n\t * @param  {Array|Element|String|jQuery} element\n\t * @param {Array} tapListeners\n\t */\n\tfunction bindTapListener(element, tapListeners, context){\n\t\tif (Array.isArray(element) || (NodeList && element instanceof NodeList)){\n\t\t\tfor (var i = 0; i < element.length; i++){\n\t\t\t\tbindTapListener(element[i], tapListeners, context)\n\t\t\t}\n\t\t} else if (typeof element === \"string\"){\n\t\t\tbindTapListener(document.querySelectorAll(element), tapListeners, context)\n\t\t} else if (element.jquery && typeof element.toArray === \"function\"){\n\t\t\tbindTapListener(element.toArray(), tapListeners, context)\n\t\t} else if (Element && element instanceof Element){\n\t\t\t//if it's an element, create a TapListener\n\t\t\tvar tap = new TapListener(element, context)\n\t\t\ttapListeners.push(tap)\n\t\t} \n\t}\n\n\t/**\n\t * @param {AudioContext} context The AudioContext to start.\n\t * @param {Array|String|Element|jQuery=} elements For iOS, the list of elements\n\t *                                               to bind tap event listeners\n\t *                                               which will start the AudioContext. If\n\t *                                               no elements are given, it will bind\n\t *                                               to the document.body.\n\t * @param {Function=} callback The callback to invoke when the AudioContext is started.\n\t * @return {Promise} The promise is invoked when the AudioContext\n\t *                       is started.\n\t */\n\tfunction StartAudioContext(context, elements, callback){\n\n\t\t//the promise is invoked when the AudioContext is started\n\t\tvar promise = new Promise(function(success) {\n\t\t\tonStarted(context, success)\n\t\t})\n\n\t\t// The TapListeners bound to the elements\n\t\tvar tapListeners = []\n\n\t\t// add all the tap listeners\n\t\tif (!elements){\n\t\t\telements = document.body\n\t\t}\n\t\tbindTapListener(elements, tapListeners, context)\n\n\t\t//dispose all these tap listeners when the context is started\n\t\tpromise.then(function(){\n\t\t\tfor (var i = 0; i < tapListeners.length; i++){\n\t\t\t\ttapListeners[i].dispose()\n\t\t\t}\n\t\t\ttapListeners = null\n\n\t\t\tif (callback){\n\t\t\t\tcallback()\n\t\t\t}\n\t\t})\n\n\t\treturn promise\n\t}\n\n\treturn StartAudioContext\n}))","/*!\n * VERSION: 2.1.0\n * DATE: 2019-02-15\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\nimport TweenLite, { _gsScope, globals, TweenPlugin } from \"./TweenLite.js\";\n\n\t_gsScope._gsDefine(\"plugins.CSSPlugin\", [\"plugins.TweenPlugin\",\"TweenLite\"], function() {\n\n\t\t/** @constructor **/\n\t\tvar CSSPlugin = function() {\n\t\t\t\tTweenPlugin.call(this, \"css\");\n\t\t\t\tthis._overwriteProps.length = 0;\n\t\t\t\tthis.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\t\t\t},\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\t_hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.\n\t\t\t_suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance\n\t\t\t_cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter\n\t\t\t_overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.\n\t\t\t_specialProps = {},\n\t\t\tp = CSSPlugin.prototype = new TweenPlugin(\"css\");\n\n\t\tp.constructor = CSSPlugin;\n\t\tCSSPlugin.version = \"2.1.0\";\n\t\tCSSPlugin.API = 2;\n\t\tCSSPlugin.defaultTransformPerspective = 0;\n\t\tCSSPlugin.defaultSkewType = \"compensated\";\n\t\tCSSPlugin.defaultSmoothOrigin = true;\n\t\tp = \"px\"; //we'll reuse the \"p\" variable to keep file size down\n\t\tCSSPlugin.suffixMap = {top:p, right:p, bottom:p, left:p, width:p, height:p, fontSize:p, padding:p, margin:p, perspective:p, lineHeight:\"\"};\n\n\n\t\tvar _numExp = /(?:\\-|\\.|\\b)(\\d|\\.|e\\-)+/g,\n\t\t\t_relNumExp = /(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,\n\t\t\t_valuesExp = /(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like \"1px 5px 20px rgb(255,102,51)\"\n\t\t\t_NaNExp = /(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=\n\t\t\t_suffixExp = /(?:\\d|\\-|\\+|=|#|\\.)*/g,\n\t\t\t_opacityExp = /opacity *= *([^)]*)/i,\n\t\t\t_opacityValExp = /opacity:([^;]*)/i,\n\t\t\t_alphaFilterExp = /alpha\\(opacity *=.+?\\)/i,\n\t\t\t_rgbhslExp = /^(rgb|hsl)/,\n\t\t\t_capsExp = /([A-Z])/g,\n\t\t\t_camelExp = /-([a-z])/gi,\n\t\t\t_urlExp = /(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi, //for pulling out urls from url(...) or url(\"...\") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)\n\t\t\t_camelFunc = function(s, g) { return g.toUpperCase(); },\n\t\t\t_horizExp = /(?:Left|Right|Width)/i,\n\t\t\t_ieGetMatrixExp = /(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,\n\t\t\t_ieSetMatrixExp = /progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,\n\t\t\t_commasOutsideParenExp = /,(?=[^\\)]*(?:\\(|$))/gi, //finds any commas that are not within parenthesis\n\t\t\t_complexExp = /[\\s,\\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)\n\t\t\t_DEG2RAD = Math.PI / 180,\n\t\t\t_RAD2DEG = 180 / Math.PI,\n\t\t\t_forcePT = {},\n\t\t\t_dummyElement = {style:{}},\n\t\t\t_doc = _gsScope.document || {createElement: function() {return _dummyElement;}},\n\t\t\t_createElement = function(type, ns) {\n\t\t\t\treturn (ns && _doc.createElementNS) ? _doc.createElementNS(ns, type) : _doc.createElement(type);\n\t\t\t},\n\t\t\t_tempDiv = _createElement(\"div\"),\n\t\t\t_tempImg = _createElement(\"img\"),\n\t\t\t_internals = CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins\n\t\t\t_agent = (_gsScope.navigator || {}).userAgent || \"\",\n\t\t\t_autoRound,\n\t\t\t_reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).\n\n\t\t\t_isSafari,\n\t\t\t_isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.\n\t\t\t_isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to \"top\" and \"left\" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)\n\t\t\t_ieVers,\n\t\t\t_supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.\n\t\t\t\tvar i = _agent.indexOf(\"Android\"),\n\t\t\t\t\ta = _createElement(\"a\");\n\t\t\t\t_isSafari = (_agent.indexOf(\"Safari\") !== -1 && _agent.indexOf(\"Chrome\") === -1 && (i === -1 || parseFloat(_agent.substr(i+8, 2)) > 3));\n\t\t\t\t_isSafariLT6 = (_isSafari && (parseFloat(_agent.substr(_agent.indexOf(\"Version/\")+8, 2)) < 6));\n\t\t\t\t_isFirefox = (_agent.indexOf(\"Firefox\") !== -1);\n\t\t\t\tif ((/MSIE ([0-9]{1,}[\\.0-9]{0,})/).exec(_agent) || (/Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/).exec(_agent)) {\n\t\t\t\t\t_ieVers = parseFloat( RegExp.$1 );\n\t\t\t\t}\n\t\t\t\tif (!a) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ta.style.cssText = \"top:1px;opacity:.55;\";\n\t\t\t\treturn /^0.55/.test(a.style.opacity);\n\t\t\t}()),\n\t\t\t_getIEOpacity = function(v) {\n\t\t\t\treturn (_opacityExp.test( ((typeof(v) === \"string\") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || \"\") ) ? ( parseFloat( RegExp.$1 ) / 100 ) : 1);\n\t\t\t},\n\t\t\t_log = function(s) {//for logging messages, but in a way that won't throw errors in old versions of IE.\n\t\t\t\tif (_gsScope.console) {\n\t\t\t\t\tconsole.log(s);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n\t\t\t_index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n\n\t\t\t_prefixCSS = \"\", //the non-camelCase vendor prefix like \"-o-\", \"-moz-\", \"-ms-\", or \"-webkit-\"\n\t\t\t_prefix = \"\", //camelCase vendor prefix like \"O\", \"ms\", \"Webkit\", or \"Moz\".\n\n\t\t\t// @private feed in a camelCase property name like \"transform\" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. \"WebkitTransform\" or \"MozTransform\" or \"transform\" or null if no such property is found, like if the browser is IE8 or before, \"transform\" won't be found at all)\n\t\t\t_checkPropPrefix = function(p, e) {\n\t\t\t\te = e || _tempDiv;\n\t\t\t\tvar s = e.style,\n\t\t\t\t\ta, i;\n\t\t\t\tif (s[p] !== undefined) {\n\t\t\t\t\treturn p;\n\t\t\t\t}\n\t\t\t\tp = p.charAt(0).toUpperCase() + p.substr(1);\n\t\t\t\ta = [\"O\",\"Moz\",\"ms\",\"Ms\",\"Webkit\"];\n\t\t\t\ti = 5;\n\t\t\t\twhile (--i > -1 && s[a[i]+p] === undefined) { }\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\t_prefix = (i === 3) ? \"ms\" : a[i];\n\t\t\t\t\t_prefixCSS = \"-\" + _prefix.toLowerCase() + \"-\";\n\t\t\t\t\treturn _prefix + p;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\n\t\t\t_computedStyleScope = (typeof(window) !== \"undefined\" ? window : _doc.defaultView || {getComputedStyle:function() {}}),\n\t\t\t_getComputedStyle = function(e) {\n\t\t\t\treturn _computedStyleScope.getComputedStyle(e); //to avoid errors in Microsoft Edge, we need to call getComputedStyle() from a specific scope, typically window.\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Returns the css style for a particular property of an element. For example, to get whatever the current \"left\" css value for an element with an ID of \"myElement\", you could do:\n\t\t\t * var currentLeft = CSSPlugin.getStyle( document.getElementById(\"myElement\"), \"left\");\n\t\t\t *\n\t\t\t * @param {!Object} t Target element whose style property you want to query\n\t\t\t * @param {!string} p Property name (like \"left\" or \"top\" or \"marginTop\", etc.)\n\t\t\t * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.\n\t\t\t * @param {boolean=} calc If true, the value will not be read directly from the element's \"style\" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.\n\t\t\t * @param {string=} dflt Default value that should be returned in the place of null, \"none\", \"auto\" or \"auto auto\".\n\t\t\t * @return {?string} The current property value\n\t\t\t */\n\t\t\t_getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {\n\t\t\t\tvar rv;\n\t\t\t\tif (!_supportsOpacity) if (p === \"opacity\") { //several versions of IE don't use the standard \"opacity\" property - they use things like filter:alpha(opacity=50), so we parse that here.\n\t\t\t\t\treturn _getIEOpacity(t);\n\t\t\t\t}\n\t\t\t\tif (!calc && t.style[p]) {\n\t\t\t\t\trv = t.style[p];\n\t\t\t\t} else if ((cs = cs || _getComputedStyle(t))) {\n\t\t\t\t\trv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t} else if (t.currentStyle) {\n\t\t\t\t\trv = t.currentStyle[p];\n\t\t\t\t}\n\t\t\t\treturn (dflt != null && (!rv || rv === \"none\" || rv === \"auto\" || rv === \"auto auto\")) ? dflt : rv;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Pass the target element, the property name, the numeric value, and the suffix (like \"%\", \"em\", \"px\", etc.) and it will spit back the equivalent pixel number.\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (like \"left\", \"top\", \"marginLeft\", etc.)\n\t\t\t * @param {!number} v Value\n\t\t\t * @param {string=} sfx Suffix (like \"px\" or \"%\" or \"em\")\n\t\t\t * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.\n\t\t\t * @return {number} value in pixels\n\t\t\t */\n\t\t\t_convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {\n\t\t\t\tif (sfx === \"px\" || (!sfx && p !== \"lineHeight\")) { return v; }\n\t\t\t\tif (sfx === \"auto\" || !v) { return 0; }\n\t\t\t\tvar horiz = _horizExp.test(p),\n\t\t\t\t\tnode = t,\n\t\t\t\t\tstyle = _tempDiv.style,\n\t\t\t\t\tneg = (v < 0),\n\t\t\t\t\tprecise = (v === 1),\n\t\t\t\t\tpix, cache, time;\n\t\t\t\tif (neg) {\n\t\t\t\t\tv = -v;\n\t\t\t\t}\n\t\t\t\tif (precise) {\n\t\t\t\t\tv *= 100;\n\t\t\t\t}\n\t\t\t\tif (p === \"lineHeight\" && !sfx) { //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.\n\t\t\t\t\tcache = _getComputedStyle(t).lineHeight;\n\t\t\t\t\tt.style.lineHeight = v;\n\t\t\t\t\tpix = parseFloat(_getComputedStyle(t).lineHeight);\n\t\t\t\t\tt.style.lineHeight = cache;\n\t\t\t\t} else if (sfx === \"%\" && p.indexOf(\"border\") !== -1) {\n\t\t\t\t\tpix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);\n\t\t\t\t} else {\n\t\t\t\t\tstyle.cssText = \"border:0 solid red;position:\" + _getStyle(t, \"position\") + \";line-height:0;\";\n\t\t\t\t\tif (sfx === \"%\" || !node.appendChild || sfx.charAt(0) === \"v\" || sfx === \"rem\") {\n\t\t\t\t\t\tnode = t.parentNode || _doc.body;\n\t\t\t\t\t\tif (_getStyle(node, \"display\").indexOf(\"flex\") !== -1) { //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.\n\t\t\t\t\t\t\tstyle.position = \"absolute\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache = node._gsCache;\n\t\t\t\t\t\ttime = TweenLite.ticker.frame;\n\t\t\t\t\t\tif (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)\n\t\t\t\t\t\t\treturn cache.width * v / 100;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyle[(horiz ? \"width\" : \"height\")] = v + sfx;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[(horiz ? \"borderLeftWidth\" : \"borderTopWidth\")] = v + sfx;\n\t\t\t\t\t}\n\t\t\t\t\tnode.appendChild(_tempDiv);\n\t\t\t\t\tpix = parseFloat(_tempDiv[(horiz ? \"offsetWidth\" : \"offsetHeight\")]);\n\t\t\t\t\tnode.removeChild(_tempDiv);\n\t\t\t\t\tif (horiz && sfx === \"%\" && CSSPlugin.cacheWidths !== false) {\n\t\t\t\t\t\tcache = node._gsCache = node._gsCache || {};\n\t\t\t\t\t\tcache.time = time;\n\t\t\t\t\t\tcache.width = pix / v * 100;\n\t\t\t\t\t}\n\t\t\t\t\tif (pix === 0 && !recurse) {\n\t\t\t\t\t\tpix = _convertToPixels(t, p, v, sfx, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (precise) {\n\t\t\t\t\tpix /= 100;\n\t\t\t\t}\n\t\t\t\treturn neg ? -pix : pix;\n\t\t\t},\n\t\t\t_calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out \"top\" or \"left\" in px when it's \"auto\". We need to factor in margin with the offsetLeft/offsetTop\n\t\t\t\tif (_getStyle(t, \"position\", cs) !== \"absolute\") { return 0; }\n\t\t\t\tvar dim = ((p === \"left\") ? \"Left\" : \"Top\"),\n\t\t\t\t\tv = _getStyle(t, \"margin\" + dim, cs);\n\t\t\t\treturn t[\"offset\" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, \"\")) || 0);\n\t\t\t},\n\n\t\t\t// @private returns at object containing ALL of the style properties in camelCase and their associated values.\n\t\t\t_getAllStyles = function(t, cs) {\n\t\t\t\tvar s = {},\n\t\t\t\t\ti, tr, p;\n\t\t\t\tif ((cs = cs || _getComputedStyle(t, null))) {\n\t\t\t\t\tif ((i = cs.length)) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tp = cs[i];\n\t\t\t\t\t\t\tif (p.indexOf(\"-transform\") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\t\ts[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.\n\t\t\t\t\t\tfor (i in cs) {\n\t\t\t\t\t\t\tif (i.indexOf(\"Transform\") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\t\ts[i] = cs[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ((cs = t.currentStyle || t.style)) {\n\t\t\t\t\tfor (i in cs) {\n\t\t\t\t\t\tif (typeof(i) === \"string\" && s[i] === undefined) {\n\t\t\t\t\t\t\ts[i.replace(_camelExp, _camelFunc)] = cs[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!_supportsOpacity) {\n\t\t\t\t\ts.opacity = _getIEOpacity(t);\n\t\t\t\t}\n\t\t\t\ttr = _getTransform(t, cs, false);\n\t\t\t\ts.rotation = tr.rotation;\n\t\t\t\ts.skewX = tr.skewX;\n\t\t\t\ts.scaleX = tr.scaleX;\n\t\t\t\ts.scaleY = tr.scaleY;\n\t\t\t\ts.x = tr.x;\n\t\t\t\ts.y = tr.y;\n\t\t\t\tif (_supports3D) {\n\t\t\t\t\ts.z = tr.z;\n\t\t\t\t\ts.rotationX = tr.rotationX;\n\t\t\t\t\ts.rotationY = tr.rotationY;\n\t\t\t\t\ts.scaleZ = tr.scaleZ;\n\t\t\t\t}\n\t\t\t\tif (s.filters) {\n\t\t\t\t\tdelete s.filters;\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t},\n\n\t\t\t// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a \"difs\" property which refers to an object containing only those isolated properties and values for tweening, and a \"firstMPT\" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.\n\t\t\t_cssDif = function(t, s1, s2, vars, forceLookup) {\n\t\t\t\tvar difs = {},\n\t\t\t\t\tstyle = t.style,\n\t\t\t\t\tval, p, mpt;\n\t\t\t\tfor (p in s2) {\n\t\t\t\t\tif (p !== \"cssText\") if (p !== \"length\") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p])) if (p.indexOf(\"Origin\") === -1) if (typeof(val) === \"number\" || typeof(val) === \"string\") {\n\t\t\t\t\t\tdifs[p] = (val === \"auto\" && (p === \"left\" || p === \"top\")) ? _calculateOffset(t, p) : ((val === \"\" || val === \"auto\" || val === \"none\") && typeof(s1[p]) === \"string\" && s1[p].replace(_NaNExp, \"\") !== \"\") ? 0 : val; //if the ending value is defaulting (\"\" or \"auto\"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for \"\" or \"auto\" so that things actually tween.\n\t\t\t\t\t\tif (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.\n\t\t\t\t\t\t\tmpt = new MiniPropTween(style, p, style[p], mpt);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (vars) {\n\t\t\t\t\tfor (p in vars) { //copy properties (except className)\n\t\t\t\t\t\tif (p !== \"className\") {\n\t\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {difs:difs, firstMPT:mpt};\n\t\t\t},\n\t\t\t_dimensions = {width:[\"Left\",\"Right\"], height:[\"Top\",\"Bottom\"]},\n\t\t\t_margins = [\"marginLeft\",\"marginRight\",\"marginTop\",\"marginBottom\"],\n\n\t\t\t/**\n\t\t\t * @private Gets the width or height of an element\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (\"width\" or \"height\")\n\t\t\t * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.\n\t\t\t * @return {number} Dimension (in pixels)\n\t\t\t */\n\t\t\t_getDimension = function(t, p, cs) {\n\t\t\t\tif ((t.nodeName + \"\").toLowerCase() === \"svg\") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.\n\t\t\t\t\treturn (cs || _getComputedStyle(t))[p] || 0;\n\t\t\t\t} else if (t.getCTM && _isSVG(t)) {\n\t\t\t\t\treturn t.getBBox()[p] || 0;\n\t\t\t\t}\n\t\t\t\tvar v = parseFloat((p === \"width\") ? t.offsetWidth : t.offsetHeight),\n\t\t\t\t\ta = _dimensions[p],\n\t\t\t\t\ti = a.length;\n\t\t\t\tcs = cs || _getComputedStyle(t, null);\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tv -= parseFloat( _getStyle(t, \"padding\" + a[i], cs, true) ) || 0;\n\t\t\t\t\tv -= parseFloat( _getStyle(t, \"border\" + a[i] + \"Width\", cs, true) ) || 0;\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t},\n\n\t\t\t// @private Parses position-related complex strings like \"top left\" or \"50px 10px\" or \"70% 20%\", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: \"ox\" (offsetX), \"oy\" (offsetY), \"oxp\" (if true, \"ox\" is a percentage not a pixel value), and \"oxy\" (if true, \"oy\" is a percentage not a pixel value)\n\t\t\t_parsePosition = function(v, recObj) {\n\t\t\t\tif (v === \"contain\" || v === \"auto\" || v === \"auto auto\") { //note: Firefox uses \"auto auto\" as default whereas Chrome uses \"auto\".\n\t\t\t\t\treturn v + \" \";\n\t\t\t\t}\n\t\t\t\tif (v == null || v === \"\") {\n\t\t\t\t\tv = \"0 0\";\n\t\t\t\t}\n\t\t\t\tvar a = v.split(\" \"),\n\t\t\t\t\tx = (v.indexOf(\"left\") !== -1) ? \"0%\" : (v.indexOf(\"right\") !== -1) ? \"100%\" : a[0],\n\t\t\t\t\ty = (v.indexOf(\"top\") !== -1) ? \"0%\" : (v.indexOf(\"bottom\") !== -1) ? \"100%\" : a[1],\n\t\t\t\t\ti;\n\t\t\t\tif (a.length > 3 && !recObj) { //multiple positions\n\t\t\t\t\ta = v.split(\", \").join(\",\").split(\",\");\n\t\t\t\t\tv = [];\n\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\tv.push(_parsePosition(a[i]));\n\t\t\t\t\t}\n\t\t\t\t\treturn v.join(\",\");\n\t\t\t\t}\n\t\t\t\tif (y == null) {\n\t\t\t\t\ty = (x === \"center\") ? \"50%\" : \"0\";\n\t\t\t\t} else if (y === \"center\") {\n\t\t\t\t\ty = \"50%\";\n\t\t\t\t}\n\t\t\t\tif (x === \"center\" || (isNaN(parseFloat(x)) && (x + \"\").indexOf(\"=\") === -1)) { //remember, the user could flip-flop the values and say \"bottom center\" or \"center bottom\", etc. \"center\" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an \"=\" sign in the value, it's relative.\n\t\t\t\t\tx = \"50%\";\n\t\t\t\t}\n\t\t\t\tv = x + \" \" + y + ((a.length > 2) ? \" \" + a[2] : \"\");\n\t\t\t\tif (recObj) {\n\t\t\t\t\trecObj.oxp = (x.indexOf(\"%\") !== -1);\n\t\t\t\t\trecObj.oyp = (y.indexOf(\"%\") !== -1);\n\t\t\t\t\trecObj.oxr = (x.charAt(1) === \"=\");\n\t\t\t\t\trecObj.oyr = (y.charAt(1) === \"=\");\n\t\t\t\t\trecObj.ox = parseFloat(x.replace(_NaNExp, \"\"));\n\t\t\t\t\trecObj.oy = parseFloat(y.replace(_NaNExp, \"\"));\n\t\t\t\t\trecObj.v = v;\n\t\t\t\t}\n\t\t\t\treturn recObj || v;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)\n\t\t\t * @param {(number|string)} e End value which is typically a string, but could be a number\n\t\t\t * @param {(number|string)} b Beginning value which is typically a string but could be a number\n\t\t\t * @return {number} Amount of change between the beginning and ending values (relative values that have a \"+=\" or \"-=\" are recognized)\n\t\t\t */\n\t\t\t_parseChange = function(e, b) {\n\t\t\t\tif (typeof(e) === \"function\") {\n\t\t\t\t\te = e(_index, _target);\n\t\t\t\t}\n\t\t\t\treturn (typeof(e) === \"string\" && e.charAt(1) === \"=\") ? parseInt(e.charAt(0) + \"1\", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @return {number} Parsed value\n\t\t\t */\n\t\t\t_parseVal = function(v, d) {\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\tv = v(_index, _target);\n\t\t\t\t}\n\t\t\t\tvar isRelative = (typeof(v) === \"string\" && v.charAt(1) === \"=\");\n\t\t\t\tif (typeof(v) === \"string\" && v.charAt(v.length - 2) === \"v\") { //convert vw and vh into px-equivalents.\n\t\t\t\t\tv = (isRelative ? v.substr(0, 2) : 0) + (window[\"inner\" + ((v.substr(-2) === \"vh\") ? \"Height\" : \"Width\")] * (parseFloat(isRelative ? v.substr(2) : v) / 100));\n\t\t\t\t}\n\t\t\t\treturn (v == null) ? d : isRelative ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Translates strings like \"40deg\" or \"40\" or 40rad\" or \"+=40deg\" or \"270_short\" or \"-90_cw\" or \"+=45_ccw\" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be \"rotation\", \"rotationX\", or \"rotationY\"\n\t\t\t * @param {Object=} directionalEnd An object that will store the raw end values for directional angles (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.\n\t\t\t * @return {number} parsed angle in radians\n\t\t\t */\n\t\t\t_parseAngle = function(v, d, p, directionalEnd) {\n\t\t\t\tvar min = 0.000001,\n\t\t\t\t\tcap, split, dif, result, isRelative;\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\tv = v(_index, _target);\n\t\t\t\t}\n\t\t\t\tif (v == null) {\n\t\t\t\t\tresult = d;\n\t\t\t\t} else if (typeof(v) === \"number\") {\n\t\t\t\t\tresult = v;\n\t\t\t\t} else {\n\t\t\t\t\tcap = 360;\n\t\t\t\t\tsplit = v.split(\"_\");\n\t\t\t\t\tisRelative = (v.charAt(1) === \"=\");\n\t\t\t\t\tdif = (isRelative ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf(\"rad\") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);\n\t\t\t\t\tif (split.length) {\n\t\t\t\t\t\tif (directionalEnd) {\n\t\t\t\t\t\t\tdirectionalEnd[p] = d + dif;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"short\") !== -1) {\n\t\t\t\t\t\t\tdif = dif % cap;\n\t\t\t\t\t\t\tif (dif !== dif % (cap / 2)) {\n\t\t\t\t\t\t\t\tdif = (dif < 0) ? dif + cap : dif - cap;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"_cw\") !== -1 && dif < 0) {\n\t\t\t\t\t\t\tdif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t} else if (v.indexOf(\"ccw\") !== -1 && dif > 0) {\n\t\t\t\t\t\t\tdif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult = d + dif;\n\t\t\t\t}\n\t\t\t\tif (result < min && result > -min) {\n\t\t\t\t\tresult = 0;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\t_colorLookup = {aqua:[0,255,255],\n\t\t\t\tlime:[0,255,0],\n\t\t\t\tsilver:[192,192,192],\n\t\t\t\tblack:[0,0,0],\n\t\t\t\tmaroon:[128,0,0],\n\t\t\t\tteal:[0,128,128],\n\t\t\t\tblue:[0,0,255],\n\t\t\t\tnavy:[0,0,128],\n\t\t\t\twhite:[255,255,255],\n\t\t\t\tfuchsia:[255,0,255],\n\t\t\t\tolive:[128,128,0],\n\t\t\t\tyellow:[255,255,0],\n\t\t\t\torange:[255,165,0],\n\t\t\t\tgray:[128,128,128],\n\t\t\t\tpurple:[128,0,128],\n\t\t\t\tgreen:[0,128,0],\n\t\t\t\tred:[255,0,0],\n\t\t\t\tpink:[255,192,203],\n\t\t\t\tcyan:[0,255,255],\n\t\t\t\ttransparent:[255,255,255,0]},\n\n\t\t\t_hue = function(h, m1, m2) {\n\t\t\t\th = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;\n\t\t\t\treturn ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).\n\t\t\t * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.\n\t\t\t * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()\n\t\t\t * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.\n\t\t\t */\n\t\t\t_parseColor = CSSPlugin.parseColor = function(v, toHSL) {\n\t\t\t\tvar a, r, g, b, h, s, l, max, min, d, wasHSL;\n\t\t\t\tif (!v) {\n\t\t\t\t\ta = _colorLookup.black;\n\t\t\t\t} else if (typeof(v) === \"number\") {\n\t\t\t\t\ta = [v >> 16, (v >> 8) & 255, v & 255];\n\t\t\t\t} else {\n\t\t\t\t\tif (v.charAt(v.length - 1) === \",\") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n\t\t\t\t\t\tv = v.substr(0, v.length - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (_colorLookup[v]) {\n\t\t\t\t\t\ta = _colorLookup[v];\n\t\t\t\t\t} else if (v.charAt(0) === \"#\") {\n\t\t\t\t\t\tif (v.length === 4) { //for shorthand like #9F0\n\t\t\t\t\t\t\tr = v.charAt(1);\n\t\t\t\t\t\t\tg = v.charAt(2);\n\t\t\t\t\t\t\tb = v.charAt(3);\n\t\t\t\t\t\t\tv = \"#\" + r + r + g + g + b + b;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv = parseInt(v.substr(1), 16);\n\t\t\t\t\t\ta = [v >> 16, (v >> 8) & 255, v & 255];\n\t\t\t\t\t} else if (v.substr(0, 3) === \"hsl\") {\n\t\t\t\t\t\ta = wasHSL = v.match(_numExp);\n\t\t\t\t\t\tif (!toHSL) {\n\t\t\t\t\t\t\th = (Number(a[0]) % 360) / 360;\n\t\t\t\t\t\t\ts = Number(a[1]) / 100;\n\t\t\t\t\t\t\tl = Number(a[2]) / 100;\n\t\t\t\t\t\t\tg = (l <= 0.5) ? l * (s + 1) : l + s - l * s;\n\t\t\t\t\t\t\tr = l * 2 - g;\n\t\t\t\t\t\t\tif (a.length > 3) {\n\t\t\t\t\t\t\t\ta[3] = Number(a[3]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ta[0] = _hue(h + 1 / 3, r, g);\n\t\t\t\t\t\t\ta[1] = _hue(h, r, g);\n\t\t\t\t\t\t\ta[2] = _hue(h - 1 / 3, r, g);\n\t\t\t\t\t\t} else if (v.indexOf(\"=\") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.\n\t\t\t\t\t\t\treturn v.match(_relNumExp);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ta = v.match(_numExp) || _colorLookup.transparent;\n\t\t\t\t\t}\n\t\t\t\t\ta[0] = Number(a[0]);\n\t\t\t\t\ta[1] = Number(a[1]);\n\t\t\t\t\ta[2] = Number(a[2]);\n\t\t\t\t\tif (a.length > 3) {\n\t\t\t\t\t\ta[3] = Number(a[3]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (toHSL && !wasHSL) {\n\t\t\t\t\tr = a[0] / 255;\n\t\t\t\t\tg = a[1] / 255;\n\t\t\t\t\tb = a[2] / 255;\n\t\t\t\t\tmax = Math.max(r, g, b);\n\t\t\t\t\tmin = Math.min(r, g, b);\n\t\t\t\t\tl = (max + min) / 2;\n\t\t\t\t\tif (max === min) {\n\t\t\t\t\t\th = s = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\td = max - min;\n\t\t\t\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\t\t\t\th = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;\n\t\t\t\t\t\th *= 60;\n\t\t\t\t\t}\n\t\t\t\t\ta[0] = (h + 0.5) | 0;\n\t\t\t\t\ta[1] = (s * 100 + 0.5) | 0;\n\t\t\t\t\ta[2] = (l * 100 + 0.5) | 0;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t_formatColors = function(s, toHSL) {\n\t\t\t\tvar colors = s.match(_colorExp) || [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\tparsed = \"\",\n\t\t\t\t\ti, color, temp;\n\t\t\t\tif (!colors.length) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < colors.length; i++) {\n\t\t\t\t\tcolor = colors[i];\n\t\t\t\t\ttemp = s.substr(charIndex, s.indexOf(color, charIndex)-charIndex);\n\t\t\t\t\tcharIndex += temp.length + color.length;\n\t\t\t\t\tcolor = _parseColor(color, toHSL);\n\t\t\t\t\tif (color.length === 3) {\n\t\t\t\t\t\tcolor.push(1);\n\t\t\t\t\t}\n\t\t\t\t\tparsed += temp + (toHSL ? \"hsla(\" + color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : \"rgba(\" + color.join(\",\")) + \")\";\n\t\t\t\t}\n\t\t\t\treturn parsed + s.substr(charIndex);\n\t\t\t},\n\t\t\t_colorExp = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3}){1,2}\\\\b\"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.\n\n\t\tfor (p in _colorLookup) {\n\t\t\t_colorExp += \"|\" + p + \"\\\\b\";\n\t\t}\n\t\t_colorExp = new RegExp(_colorExp+\")\", \"gi\");\n\n\t\tCSSPlugin.colorStringFilter = function(a) {\n\t\t\tvar combined = a[0] + \" \" + a[1],\n\t\t\t\ttoHSL;\n\t\t\tif (_colorExp.test(combined)) {\n\t\t\t\ttoHSL = (combined.indexOf(\"hsl(\") !== -1 || combined.indexOf(\"hsla(\") !== -1);\n\t\t\t\ta[0] = _formatColors(a[0], toHSL);\n\t\t\t\ta[1] = _formatColors(a[1], toHSL);\n\t\t\t}\n\t\t\t_colorExp.lastIndex = 0;\n\t\t};\n\n\t\tif (!TweenLite.defaultStringFilter) {\n\t\t\tTweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;\n\t\t}\n\n\t\t/**\n\t\t * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as \"0px red\" or \"0px 0px 10px rgb(255,0,0)\" or \"0px 0px 20px 20px #F00\" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter(\"0px 0px 0px 0px #777\", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.\n\t\t * @param {!string} dflt The default value and pattern to follow. So \"0px 0px 0px 0px #777\" will ensure that 4 numbers and a color will always get returned.\n\t\t * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.\n\t\t * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.\n\t\t * @return {Function} formatter function\n\t\t */\n\t\tvar _getFormatter = function(dflt, clr, collapsible, multi) {\n\t\t\t\tif (dflt == null) {\n\t\t\t\t\treturn function(v) {return v;};\n\t\t\t\t}\n\t\t\t\tvar dColor = clr ? (dflt.match(_colorExp) || [\"\"])[0] : \"\",\n\t\t\t\t\tdVals = dflt.split(dColor).join(\"\").match(_valuesExp) || [],\n\t\t\t\t\tpfx = dflt.substr(0, dflt.indexOf(dVals[0])),\n\t\t\t\t\tsfx = (dflt.charAt(dflt.length - 1) === \")\") ? \")\" : \"\",\n\t\t\t\t\tdelim = (dflt.indexOf(\" \") !== -1) ? \" \" : \",\",\n\t\t\t\t\tnumVals = dVals.length,\n\t\t\t\t\tdSfx = (numVals > 0) ? dVals[0].replace(_numExp, \"\") : \"\",\n\t\t\t\t\tformatter;\n\t\t\t\tif (!numVals) {\n\t\t\t\t\treturn function(v) {return v;};\n\t\t\t\t}\n\t\t\t\tif (clr) {\n\t\t\t\t\tformatter = function(v) {\n\t\t\t\t\t\tvar color, vals, i, a;\n\t\t\t\t\t\tif (typeof(v) === \"number\") {\n\t\t\t\t\t\t\tv += dSfx;\n\t\t\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\t\t\ta[i] = formatter(a[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolor = (v.match(_colorExp) || [dColor])[0];\n\t\t\t\t\t\tvals = v.split(color).join(\"\").match(_valuesExp) || [];\n\t\t\t\t\t\ti = vals.length;\n\t\t\t\t\t\tif (numVals > i--) {\n\t\t\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\t\t\tvals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn pfx + vals.join(delim) + delim + color + sfx + (v.indexOf(\"inset\") !== -1 ? \" inset\" : \"\");\n\t\t\t\t\t};\n\t\t\t\t\treturn formatter;\n\n\t\t\t\t}\n\t\t\t\tformatter = function(v) {\n\t\t\t\t\tvar vals, a, i;\n\t\t\t\t\tif (typeof(v) === \"number\") {\n\t\t\t\t\t\tv += dSfx;\n\t\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\t\ta[i] = formatter(a[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t\t}\n\t\t\t\t\tvals = v.match(_valuesExp) || [];\n\t\t\t\t\ti = vals.length;\n\t\t\t\t\tif (numVals > i--) {\n\t\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\t\tvals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn pfx + vals.join(delim) + sfx;\n\t\t\t\t};\n\t\t\t\treturn formatter;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.\n\t\t\t * @param {!string} props a comma-delimited list of property names in order from top to left, like \"marginTop,marginRight,marginBottom,marginLeft\"\n\t\t\t * @return {Function} a formatter function\n\t\t\t */\n\t\t\t_getEdgeParser = function(props) {\n\t\t\t\tprops = props.split(\",\");\n\t\t\t\treturn function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\tvar a = (e + \"\").split(\" \"),\n\t\t\t\t\t\ti;\n\t\t\t\t\tvars = {};\n\t\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\t\tvars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];\n\t\t\t\t\t}\n\t\t\t\t\treturn cssp.parse(t, vars, pt, plugin);\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.\n\t\t\t_setPluginRatio = _internals._setPluginRatio = function(v) {\n\t\t\t\tthis.plugin.setRatio(v);\n\t\t\t\tvar d = this.data,\n\t\t\t\t\tproxy = d.proxy,\n\t\t\t\t\tmpt = d.firstMPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval, pt, i, str, p;\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tval = proxy[mpt.v];\n\t\t\t\t\tif (mpt.r) {\n\t\t\t\t\t\tval = mpt.r(val);\n\t\t\t\t\t} else if (val < min && val > -min) {\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tmpt.t[mpt.p] = val;\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t\tif (d.autoRotate) {\n\t\t\t\t\td.autoRotate.rotation = d.mod ? d.mod.call(this._tween, proxy.rotation, this.t, this._tween) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier\n\t\t\t\t}\n\t\t\t\t//at the end, we must set the CSSPropTween's \"e\" (end) value dynamically here because that's what is used in the final setRatio() method. Same for \"b\" at the beginning.\n\t\t\t\tif (v === 1 || v === 0) {\n\t\t\t\t\tmpt = d.firstMPT;\n\t\t\t\t\tp = (v === 1) ? \"e\" : \"b\";\n\t\t\t\t\twhile (mpt) {\n\t\t\t\t\t\tpt = mpt.t;\n\t\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\t\tpt[p] = pt.s + pt.xs0;\n\t\t\t\t\t\t} else if (pt.type === 1) {\n\t\t\t\t\t\t\tstr = pt.xs0 + pt.s + pt.xs1;\n\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt[p] = str;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.\n\t\t\t * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)\n\t\t\t * @param {!string} p property name\n\t\t\t * @param {(number|string|object)} v value\n\t\t\t * @param {MiniPropTween=} next next MiniPropTween in the linked list\n\t\t\t * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer\n\t\t\t */\n\t\t\tMiniPropTween = function(t, p, v, next, r) {\n\t\t\t\tthis.t = t;\n\t\t\t\tthis.p = p;\n\t\t\t\tthis.v = v;\n\t\t\t\tthis.r = r;\n\t\t\t\tif (next) {\n\t\t\t\t\tnext._prev = this;\n\t\t\t\t\tthis._next = next;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like \"10px 10px 20px 30px rgb(255,0,0)\" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like \"s\" or \"xn1\" or \"xn2\") that we're tweening and the unique property name that was used for the proxy (like \"boxShadow_xn1\" and \"boxShadow_xn2\") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.\n\t\t\t * This method returns an object that has the following properties:\n\t\t\t *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target\n\t\t\t *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values\n\t\t\t *  - firstMPT: the first MiniPropTween in the linked list\n\t\t\t *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the \"pt\" (4th) parameter.\n\t\t\t * @param {!Object} t target object to be tweened\n\t\t\t * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed\n\t\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance\n\t\t\t * @param {CSSPropTween=} pt the next CSSPropTween in the linked list\n\t\t\t * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values\n\t\t\t * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the \"pt\" (4th) parameter.\n\t\t\t * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)\n\t\t\t */\n\t\t\t_parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {\n\t\t\t\tvar bpt = pt,\n\t\t\t\t\tstart = {},\n\t\t\t\t\tend = {},\n\t\t\t\t\ttransform = cssp._transform,\n\t\t\t\t\toldForce = _forcePT,\n\t\t\t\t\ti, p, xp, mpt, firstPT;\n\t\t\t\tcssp._transform = null;\n\t\t\t\t_forcePT = vars;\n\t\t\t\tpt = firstPT = cssp.parse(t, vars, pt, plugin);\n\t\t\t\t_forcePT = oldForce;\n\t\t\t\t//break off from the linked list so the new ones are isolated.\n\t\t\t\tif (shallow) {\n\t\t\t\t\tcssp._transform = transform;\n\t\t\t\t\tif (bpt) {\n\t\t\t\t\t\tbpt._prev = null;\n\t\t\t\t\t\tif (bpt._prev) {\n\t\t\t\t\t\t\tbpt._prev._next = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (pt && pt !== bpt) {\n\t\t\t\t\tif (pt.type <= 1) {\n\t\t\t\t\t\tp = pt.p;\n\t\t\t\t\t\tend[p] = pt.s + pt.c;\n\t\t\t\t\t\tstart[p] = pt.s;\n\t\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\t\tmpt = new MiniPropTween(pt, \"s\", p, mpt, pt.r);\n\t\t\t\t\t\t\tpt.c = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pt.type === 1) {\n\t\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\t\twhile (--i > 0) {\n\t\t\t\t\t\t\t\txp = \"xn\" + i;\n\t\t\t\t\t\t\t\tp = pt.p + \"_\" + xp;\n\t\t\t\t\t\t\t\tend[p] = pt.data[xp];\n\t\t\t\t\t\t\t\tstart[p] = pt[xp];\n\t\t\t\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\t\t\t\tmpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t\treturn {proxy:start, end:end, firstMPT:mpt, pt:firstPT};\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of \"extra\" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where \"s\" indicates string and \"n\" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be \"5px 5px 8px rgb(102, 102, 51)\". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.\n\t\t\t * CSSPropTweens have the following optional properties as well (not defined through the constructor):\n\t\t\t *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.\n\t\t\t *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)\n\t\t\t *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.\n\t\t\t *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.\n\t\t\t *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.\n\t\t\t * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.\n\t\t\t * @param {string} p Property to tween (name). For example, to tween element.width, p would be \"width\".\n\t\t\t * @param {number} s Starting numeric value\n\t\t\t * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.\n\t\t\t * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.\n\t\t\t * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:\"1px solid red\"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.\n\t\t\t * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a \"clip:rect(...)\" tween in which case \"p\" might be xs1 but \"n\" is still \"clip\"\n\t\t\t * @param {boolean=} r If true, the value(s) should be rounded\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.\n\t\t\t * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.\n\t\t\t */\n\t\t\tCSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {\n\t\t\t\tthis.t = t; //target\n\t\t\t\tthis.p = p; //property\n\t\t\t\tthis.s = s; //starting value\n\t\t\t\tthis.c = c; //change value\n\t\t\t\tthis.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)\n\t\t\t\tif (!(t instanceof CSSPropTween)) {\n\t\t\t\t\t_overwriteProps.push(this.n);\n\t\t\t\t}\n\t\t\t\tthis.r = !r ? r : (typeof(r) === \"function\") ? r : Math.round; //round (boolean)\n\t\t\t\tthis.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work\n\t\t\t\tif (pr) {\n\t\t\t\t\tthis.pr = pr;\n\t\t\t\t\t_hasPriority = true;\n\t\t\t\t}\n\t\t\t\tthis.b = (b === undefined) ? s : b;\n\t\t\t\tthis.e = (e === undefined) ? s + c : e;\n\t\t\t\tif (next) {\n\t\t\t\t\tthis._next = next;\n\t\t\t\t\tnext._prev = this;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween\n\t\t\t\tvar pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);\n\t\t\t\tpt.b = start;\n\t\t\t\tpt.e = pt.xs0 = end;\n\t\t\t\treturn pt;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:\n\t\t\t * sp.parseComplex(element, \"boxShadow\", \"5px 10px 20px rgb(255,102,51)\", \"0px 0px 0px red\", true, \"0px 0px 0px rgb(0,0,0,0)\", pt);\n\t\t\t * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the \"data\" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().\n\t\t\t * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.\n\t\t\t *\n\t\t\t * @param {!Object} t Target whose property will be tweened\n\t\t\t * @param {!string} p Property that will be tweened (its name, like \"left\" or \"backgroundColor\" or \"boxShadow\")\n\t\t\t * @param {string} b Beginning value\n\t\t\t * @param {string} e Ending value\n\t\t\t * @param {boolean} clrs If true, the value could contain a color value like \"rgb(255,0,0)\" or \"#F00\" or \"red\". The default is false, so no colors will be recognized (a performance optimization)\n\t\t\t * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match\n\t\t\t * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the \"data\" property, like {s:100, xn1:50, xn2:300}\n\t\t\t * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.\n\t\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.\n\t\t\t */\n\t\t\t_parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {\n\t\t\t\t//DEBUG: _log(\"parseComplex: \"+p+\", b: \"+b+\", e: \"+e);\n\t\t\t\tb = b || dflt || \"\";\n\t\t\t\tif (typeof(e) === \"function\") {\n\t\t\t\t\te = e(_index, _target);\n\t\t\t\t}\n\t\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);\n\t\t\t\te += \"\"; //ensures it's a string\n\t\t\t\tif (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().\n\t\t\t\t\te = [b, e];\n\t\t\t\t\tCSSPlugin.colorStringFilter(e);\n\t\t\t\t\tb = e[0];\n\t\t\t\t\te = e[1];\n\t\t\t\t}\n\t\t\t\tvar ba = b.split(\", \").join(\",\").split(\" \"), //beginning array\n\t\t\t\t\tea = e.split(\", \").join(\",\").split(\" \"), //ending array\n\t\t\t\t\tl = ba.length,\n\t\t\t\t\tautoRound = (_autoRound !== false),\n\t\t\t\t\ti, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;\n\t\t\t\tif (e.indexOf(\",\") !== -1 || b.indexOf(\",\") !== -1) {\n\t\t\t\t\tif ((e + b).indexOf(\"rgb\") !== -1 || (e + b).indexOf(\"hsl\") !== -1) { //keep rgb(), rgba(), hsl(), and hsla() values together! (remember, we're splitting on spaces)\n\t\t\t\t\t\tba = ba.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\t\t\tea = ea.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tba = ba.join(\" \").split(\",\").join(\", \").split(\" \");\n\t\t\t\t\t\tea = ea.join(\" \").split(\",\").join(\", \").split(\" \");\n\t\t\t\t\t}\n\t\t\t\t\tl = ba.length;\n\t\t\t\t}\n\t\t\t\tif (l !== ea.length) {\n\t\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\t\tba = (dflt || \"\").split(\" \");\n\t\t\t\t\tl = ba.length;\n\t\t\t\t}\n\t\t\t\tpt.plugin = plugin;\n\t\t\t\tpt.setRatio = setRatio;\n\t\t\t\t_colorExp.lastIndex = 0;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tbv = ba[i];\n\t\t\t\t\tev = ea[i] + \"\";\n\t\t\t\t\tbn = parseFloat(bv);\n\t\t\t\t\t//if the value begins with a number (most common). It's fine if it has a suffix like px\n\t\t\t\t\tif (bn || bn === 0) {\n\t\t\t\t\t\tpt.appendXtra(\"\", bn, _parseChange(ev, bn), ev.replace(_relNumExp, \"\"), (autoRound && ev.indexOf(\"px\") !== -1) ? Math.round : false, true);\n\n\t\t\t\t\t//if the value is a color\n\t\t\t\t\t} else if (clrs && _colorExp.test(bv)) {\n\t\t\t\t\t\tstr = ev.indexOf(\")\") + 1;\n\t\t\t\t\t\tstr = \")\" + (str ? ev.substr(str) : \"\"); //if there's a comma or ) at the end, retain it.\n\t\t\t\t\t\tuseHSL = (ev.indexOf(\"hsl\") !== -1 && _supportsOpacity);\n\t\t\t\t\t\ttemp = ev; //original string value so we can look for any prefix later.\n\t\t\t\t\t\tbv = _parseColor(bv, useHSL);\n\t\t\t\t\t\tev = _parseColor(ev, useHSL);\n\t\t\t\t\t\thasAlpha = (bv.length + ev.length > 6);\n\t\t\t\t\t\tif (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use \"transparent\" for the end color\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += pt.l ? \" transparent\" : \"transparent\";\n\t\t\t\t\t\t\tpt.e = pt.e.split(ea[i]).join(\"transparent\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!_supportsOpacity) { //old versions of IE don't support rgba().\n\t\t\t\t\t\t\t\thasAlpha = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (useHSL) {\n\t\t\t\t\t\t\t\tpt.appendXtra(temp.substr(0, temp.indexOf(\"hsl\")) + (hasAlpha ? \"hsla(\" : \"hsl(\"), bv[0], _parseChange(ev[0], bv[0]), \",\", false, true)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[1], _parseChange(ev[1], bv[1]), \"%,\", false)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? \"%,\" : \"%\" + str), false);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpt.appendXtra(temp.substr(0, temp.indexOf(\"rgb\")) + (hasAlpha ? \"rgba(\" : \"rgb(\"), bv[0], ev[0] - bv[0], \",\", Math.round, true)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[1], ev[1] - bv[1], \",\", Math.round)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[2], ev[2] - bv[2], (hasAlpha ? \",\" : str), Math.round);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (hasAlpha) {\n\t\t\t\t\t\t\t\tbv = (bv.length < 4) ? 1 : bv[3];\n\t\t\t\t\t\t\t\tpt.appendXtra(\"\", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array\n\n\t\t\t\t\t\t//if no number is found, treat it as a non-tweening value and just append the string to the current xs.\n\t\t\t\t\t\tif (!bnums) {\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += (pt.l || pt[\"xs\" + pt.l]) ? \" \" + ev : ev;\n\n\t\t\t\t\t\t//loop through all the numbers that are found and construct the extra values on the pt.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tenums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5\n\t\t\t\t\t\t\tif (!enums || enums.length !== bnums.length) {\n\t\t\t\t\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tni = 0;\n\t\t\t\t\t\t\tfor (xi = 0; xi < bnums.length; xi++) {\n\t\t\t\t\t\t\t\tcv = bnums[xi];\n\t\t\t\t\t\t\t\ttemp = bv.indexOf(cv, ni);\n\t\t\t\t\t\t\t\tpt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), \"\", (autoRound && bv.substr(temp + cv.length, 2) === \"px\") ? Math.round : false, (xi === 0));\n\t\t\t\t\t\t\t\tni = temp + cv.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += bv.substr(ni);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//if there are relative values (\"+=\" or \"-=\" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.\n\t\t\t\tif (e.indexOf(\"=\") !== -1) if (pt.data) {\n\t\t\t\t\tstr = pt.xs0 + pt.data.s;\n\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\tstr += pt[\"xs\" + i] + pt.data[\"xn\" + i];\n\t\t\t\t\t}\n\t\t\t\t\tpt.e = str + pt[\"xs\" + i];\n\t\t\t\t}\n\t\t\t\tif (!pt.l) {\n\t\t\t\t\tpt.type = -1;\n\t\t\t\t\tpt.xs0 = pt.e;\n\t\t\t\t}\n\t\t\t\treturn pt.xfirst || pt;\n\t\t\t},\n\t\t\ti = 9;\n\n\n\t\tp = CSSPropTween.prototype;\n\t\tp.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.\n\t\twhile (--i > 0) {\n\t\t\tp[\"xn\" + i] = 0;\n\t\t\tp[\"xs\" + i] = \"\";\n\t\t}\n\t\tp.xs0 = \"\";\n\t\tp._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;\n\n\n\t\t/**\n\t\t * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like \"rect(10px, 5px, 0px, 20px)\", the values would be stored like this:\n\t\t * xs0:\"rect(\", s:10, xs1:\"px, \", xn1:5, xs2:\"px, \", xn2:0, xs3:\"px, \", xn3:20, xn4:\"px)\"\n\t\t * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).\n\t\t * @param {string=} pfx Prefix (if any)\n\t\t * @param {!number} s Starting value\n\t\t * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.\n\t\t * @param {string=} sfx Suffix (if any)\n\t\t * @param {boolean=} r Round (if true).\n\t\t * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.\n\t\t * @return {CSSPropTween} returns itself so that multiple methods can be chained together.\n\t\t */\n\t\tp.appendXtra = function(pfx, s, c, sfx, r, pad) {\n\t\t\tvar pt = this,\n\t\t\t\tl = pt.l;\n\t\t\tpt[\"xs\" + l] += (pad && (l || pt[\"xs\" + l])) ? \" \" + pfx : pfx || \"\";\n\t\t\tif (!c) if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!\n\t\t\t\tpt[\"xs\" + l] += s + (sfx || \"\");\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.l++;\n\t\t\tpt.type = pt.setRatio ? 2 : 1;\n\t\t\tpt[\"xs\" + pt.l] = sfx || \"\";\n\t\t\tif (l > 0) {\n\t\t\t\tpt.data[\"xn\" + l] = s + c;\n\t\t\t\tpt.rxp[\"xn\" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)\n\t\t\t\tpt[\"xn\" + l] = s;\n\t\t\t\tif (!pt.plugin) {\n\t\t\t\t\tpt.xfirst = new CSSPropTween(pt, \"xn\" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);\n\t\t\t\t\tpt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is \"\" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.\n\t\t\t\t}\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.data = {s:s + c};\n\t\t\tpt.rxp = {};\n\t\t\tpt.s = s;\n\t\t\tpt.c = c;\n\t\t\tpt.r = r;\n\t\t\treturn pt;\n\t\t};\n\n\t\t/**\n\t\t * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:\"5px 10px 15px rgb(255, 102, 51)\" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like \"boxShadow\" or \"throwProps\" or \"bezier\" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.\n\t\t * @param {!string} p Property name (like \"boxShadow\" or \"throwProps\")\n\t\t * @param {Object=} options An object containing any of the following configuration options:\n\t\t *                      - defaultValue: the default value\n\t\t *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)\n\t\t *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take \"5px 5px red\" and format it to \"5px 5px 0px 0px red\" so that both the beginning and ending values have a common order and quantity of values.)\n\t\t *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)\n\t\t *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.\n\t\t *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.\n\t\t *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.\n\t\t *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like \"5px\" would apply to all, \"5px, 10px\" would use 5px for top/bottom and 10px for right/left, etc.\n\t\t *                      - keyword: a special keyword that can [optionally] be found inside the value (like \"inset\" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).\n\t\t */\n\t\tvar SpecialProp = function(p, options) {\n\t\t\t\toptions = options || {};\n\t\t\t\tthis.p = options.prefix ? _checkPropPrefix(p) || p : p;\n\t\t\t\t_specialProps[p] = _specialProps[this.p] = this;\n\t\t\t\tthis.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);\n\t\t\t\tif (options.parser) {\n\t\t\t\t\tthis.parse = options.parser;\n\t\t\t\t}\n\t\t\t\tthis.clrs = options.color;\n\t\t\t\tthis.multi = options.multi;\n\t\t\t\tthis.keyword = options.keyword;\n\t\t\t\tthis.dflt = options.defaultValue;\n\t\t\t\tthis.allowFunc = options.allowFunc;\n\t\t\t\tthis.pr = options.priority || 0;\n\t\t\t},\n\n\t\t\t//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.\n\t\t\t_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {\n\t\t\t\tif (typeof(options) !== \"object\") {\n\t\t\t\t\toptions = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin\n\t\t\t\t}\n\t\t\t\tvar a = p.split(\",\"),\n\t\t\t\t\td = options.defaultValue,\n\t\t\t\t\ti, temp;\n\t\t\t\tdefaults = defaults || [d];\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\toptions.prefix = (i === 0 && options.prefix);\n\t\t\t\t\toptions.defaultValue = defaults[i] || d;\n\t\t\t\t\ttemp = new SpecialProp(a[i], options);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.\n\t\t\t_registerPluginProp = _internals._registerPluginProp = function(p) {\n\t\t\t\tif (!_specialProps[p]) {\n\t\t\t\t\tvar pluginName = p.charAt(0).toUpperCase() + p.substr(1) + \"Plugin\";\n\t\t\t\t\t_registerComplexSpecialProp(p, {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\t\tvar pluginClass = _globals.com.greensock.plugins[pluginName];\n\t\t\t\t\t\tif (!pluginClass) {\n\t\t\t\t\t\t\t_log(\"Error: \" + pluginName + \" js file not loaded.\");\n\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpluginClass._cssRegister();\n\t\t\t\t\t\treturn _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);\n\t\t\t\t\t}});\n\t\t\t\t}\n\t\t\t};\n\n\n\t\tp = SpecialProp.prototype;\n\n\t\t/**\n\t\t * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like \"inset\" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)\n\t\t * @param {!Object} t target element\n\t\t * @param {(string|number|object)} b beginning value\n\t\t * @param {(string|number|object)} e ending (destination) value\n\t\t * @param {CSSPropTween=} pt next CSSPropTween in the linked list\n\t\t * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.\n\t\t * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.\n\t\t * @return {CSSPropTween=} First CSSPropTween in the linked list\n\t\t */\n\t\tp.parseComplex = function(t, b, e, pt, plugin, setRatio) {\n\t\t\tvar kwd = this.keyword,\n\t\t\t\ti, ba, ea, l, bi, ei;\n\t\t\t//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like \"inset\" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)\n\t\t\tif (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {\n\t\t\t\tba = b.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\tea = e.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t} else if (kwd) {\n\t\t\t\tba = [b];\n\t\t\t\tea = [e];\n\t\t\t}\n\t\t\tif (ea) {\n\t\t\t\tl = (ea.length > ba.length) ? ea.length : ba.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tb = ba[i] = ba[i] || this.dflt;\n\t\t\t\t\te = ea[i] = ea[i] || this.dflt;\n\t\t\t\t\tif (kwd) {\n\t\t\t\t\t\tbi = b.indexOf(kwd);\n\t\t\t\t\t\tei = e.indexOf(kwd);\n\t\t\t\t\t\tif (bi !== ei) {\n\t\t\t\t\t\t\tif (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.\n\t\t\t\t\t\t\t\tba[i] = ba[i].split(kwd).join(\"\");\n\t\t\t\t\t\t\t} else if (bi === -1) { //if the keyword isn't in the beginning, add it.\n\t\t\t\t\t\t\t\tba[i] += \" \" + kwd;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb = ba.join(\", \");\n\t\t\t\te = ea.join(\", \");\n\t\t\t}\n\t\t\treturn _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);\n\t\t};\n\n\t\t/**\n\t\t * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:\n\t\t * this._firstPT = sp.parse(element, \"5px 10px 20px rgb(2550,102,51)\", \"boxShadow\", this);\n\t\t * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).\n\t\t * @param {!Object} t Target object whose property is being tweened\n\t\t * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).\n\t\t * @param {!string} p Property name\n\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.\n\t\t * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)\n\t\t * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.\n\t\t * @param {Object=} vars Original vars object that contains the data for parsing.\n\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.\n\t\t */\n\t\tp.parse = function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\treturn this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);\n\t\t};\n\n\t\t/**\n\t\t * Registers a special property that should be intercepted from any \"css\" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:\n\t\t *  1) Target object whose property should be tweened (typically a DOM element)\n\t\t *  2) The end/destination value (could be a string, number, object, or whatever you want)\n\t\t *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)\n\t\t *\n\t\t * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric \"ratio\" parameter to your function that indicates the change factor (usually between 0 and 1). For example:\n\t\t *\n\t\t * CSSPlugin.registerSpecialProp(\"myCustomProp\", function(target, value, tween) {\n\t\t *      var start = target.style.width;\n\t\t *      return function(ratio) {\n\t\t *              target.style.width = (start + value * ratio) + \"px\";\n\t\t *              console.log(\"set width to \" + target.style.width);\n\t\t *          }\n\t\t * }, 0);\n\t\t *\n\t\t * Then, when I do this tween, it will trigger my special property:\n\t\t *\n\t\t * TweenLite.to(element, 1, {css:{myCustomProp:100}});\n\t\t *\n\t\t * In the example, of course, we're just changing the width, but you can do anything you want.\n\t\t *\n\t\t * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define \"myCustomProp\", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})\n\t\t * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a \"change factor\" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.\n\t\t * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.\n\t\t */\n\t\tCSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {\n\t\t\t_registerComplexSpecialProp(name, {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\tvar rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);\n\t\t\t\trv.plugin = plugin;\n\t\t\t\trv.setRatio = onInitTween(t, e, cssp._tween, p);\n\t\t\t\treturn rv;\n\t\t\t}, priority:priority});\n\t\t};\n\n\n\n\n\n\n\t\t//transform-related methods and properties\n\t\tCSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the \"transform\" attribute instead (users can override this).\n\t\tvar _transformProps = (\"scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent\").split(\",\"),\n\t\t\t_transformProp = _checkPropPrefix(\"transform\"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.\n\t\t\t_transformPropCSS = _prefixCSS + \"transform\",\n\t\t\t_transformOriginProp = _checkPropPrefix(\"transformOrigin\"),\n\t\t\t_supports3D = (_checkPropPrefix(\"perspective\") !== null),\n\t\t\tTransform = _internals.Transform = function() {\n\t\t\t\tthis.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;\n\t\t\t\tthis.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || \"auto\";\n\t\t\t},\n\t\t\t_SVGElement = _gsScope.SVGElement,\n\t\t\t_useSVGTransformAttr,\n\t\t\t//Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.\n\n\t\t\t_createSVG = function(type, container, attributes) {\n\t\t\t\tvar element = _doc.createElementNS(\"http://www.w3.org/2000/svg\", type),\n\t\t\t\t\treg = /([a-z])([A-Z])/g,\n\t\t\t\t\tp;\n\t\t\t\tfor (p in attributes) {\n\t\t\t\t\telement.setAttributeNS(null, p.replace(reg, \"$1-$2\").toLowerCase(), attributes[p]);\n\t\t\t\t}\n\t\t\t\tcontainer.appendChild(element);\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\t_docElement = _doc.documentElement || {},\n\t\t\t_forceSVGTransformAttr = (function() {\n\t\t\t\t//IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the \"transform\" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element\n\t\t\t\tvar force = _ieVers || (/Android/i.test(_agent) && !_gsScope.chrome),\n\t\t\t\t\tsvg, rect, width;\n\t\t\t\tif (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway\n\t\t\t\t\tsvg = _createSVG(\"svg\", _docElement);\n\t\t\t\t\trect = _createSVG(\"rect\", svg, {width:100, height:50, x:100});\n\t\t\t\t\twidth = rect.getBoundingClientRect().width;\n\t\t\t\t\trect.style[_transformOriginProp] = \"50% 50%\";\n\t\t\t\t\trect.style[_transformProp] = \"scaleX(0.5)\";\n\t\t\t\t\tforce = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).\n\t\t\t\t\t_docElement.removeChild(svg);\n\t\t\t\t}\n\t\t\t\treturn force;\n\t\t\t})(),\n\t\t\t_parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {\n\t\t\t\tvar tm = e._gsTransform,\n\t\t\t\t\tm = _getMatrix(e, true),\n\t\t\t\t\tv, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;\n\t\t\t\tif (tm) {\n\t\t\t\t\txOriginOld = tm.xOrigin; //record the original values before we alter them.\n\t\t\t\t\tyOriginOld = tm.yOrigin;\n\t\t\t\t}\n\t\t\t\tif (!absolute || (v = absolute.split(\" \")).length < 2) {\n\t\t\t\t\tb = e.getBBox();\n\t\t\t\t\tif (b.x === 0 && b.y === 0 && b.width + b.height === 0) { //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n\t\t\t\t\t\tb = {x: parseFloat(e.hasAttribute(\"x\") ? e.getAttribute(\"x\") : e.hasAttribute(\"cx\") ? e.getAttribute(\"cx\") : 0) || 0, y: parseFloat(e.hasAttribute(\"y\") ? e.getAttribute(\"y\") : e.hasAttribute(\"cy\") ? e.getAttribute(\"cy\") : 0) || 0, width:0, height:0};\n\t\t\t\t\t}\n\t\t\t\t\tlocal = _parsePosition(local).split(\" \");\n\t\t\t\t\tv = [(local[0].indexOf(\"%\") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,\n\t\t\t\t\t\t (local[1].indexOf(\"%\") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];\n\t\t\t\t}\n\t\t\t\tdecoratee.xOrigin = xOrigin = parseFloat(v[0]);\n\t\t\t\tdecoratee.yOrigin = yOrigin = parseFloat(v[1]);\n\t\t\t\tif (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.\n\t\t\t\t\ta = m[0];\n\t\t\t\t\tb = m[1];\n\t\t\t\t\tc = m[2];\n\t\t\t\t\td = m[3];\n\t\t\t\t\ttx = m[4];\n\t\t\t\t\tty = m[5];\n\t\t\t\t\tdeterminant = (a * d - b * c);\n\t\t\t\t\tif (determinant) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n\t\t\t\t\t\tx = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);\n\t\t\t\t\t\ty = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);\n\t\t\t\t\t\txOrigin = decoratee.xOrigin = v[0] = x;\n\t\t\t\t\t\tyOrigin = decoratee.yOrigin = v[1] = y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly\n\t\t\t\t\tif (skipRecord) {\n\t\t\t\t\t\tdecoratee.xOffset = tm.xOffset;\n\t\t\t\t\t\tdecoratee.yOffset = tm.yOffset;\n\t\t\t\t\t\ttm = decoratee;\n\t\t\t\t\t}\n\t\t\t\t\tif (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {\n\t\t\t\t\t\tx = xOrigin - xOriginOld;\n\t\t\t\t\t\ty = yOrigin - yOriginOld;\n\t\t\t\t\t\t//originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.\n\t\t\t\t\t\t//tm.x -= x - (x * m[0] + y * m[2]);\n\t\t\t\t\t\t//tm.y -= y - (x * m[1] + y * m[3]);\n\t\t\t\t\t\ttm.xOffset += (x * m[0] + y * m[2]) - x;\n\t\t\t\t\t\ttm.yOffset += (x * m[1] + y * m[3]) - y;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttm.xOffset = tm.yOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!skipRecord) {\n\t\t\t\t\te.setAttribute(\"data-svg-origin\", v.join(\" \"));\n\t\t\t\t}\n\t\t\t},\n\t\t\t_getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n\t\t\t\tvar svg = _createElement(\"svg\", (this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\")) || \"http://www.w3.org/2000/svg\"),\n\t\t\t\t\toldParent = this.parentNode,\n\t\t\t\t\toldSibling = this.nextSibling,\n\t\t\t\t\toldCSS = this.style.cssText,\n\t\t\t\t\tbbox;\n\t\t\t\t_docElement.appendChild(svg);\n\t\t\t\tsvg.appendChild(this);\n\t\t\t\tthis.style.display = \"block\";\n\t\t\t\tif (swapIfPossible) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbbox = this.getBBox();\n\t\t\t\t\t\tthis._originalGetBBox = this.getBBox;\n\t\t\t\t\t\tthis.getBBox = _getBBoxHack;\n\t\t\t\t\t} catch (e) { }\n\t\t\t\t} else if (this._originalGetBBox) {\n\t\t\t\t\tbbox = this._originalGetBBox();\n\t\t\t\t}\n\t\t\t\tif (oldSibling) {\n\t\t\t\t\toldParent.insertBefore(this, oldSibling);\n\t\t\t\t} else {\n\t\t\t\t\toldParent.appendChild(this);\n\t\t\t\t}\n\t\t\t\t_docElement.removeChild(svg);\n\t\t\t\tthis.style.cssText = oldCSS;\n\t\t\t\treturn bbox;\n\t\t\t},\n\t\t\t_getBBox = function(e) {\n\t\t\t\ttry {\n\t\t\t\t\treturn e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn _getBBoxHack.call(e, true);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works\n\t\t\t\treturn !!(_SVGElement && e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n\t\t\t},\n\t\t\t_identity2DMatrix = [1,0,0,1,0,0],\n\t\t\t_getMatrix = function(e, force2D) {\n\t\t\t\tvar tm = e._gsTransform || new Transform(),\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\tstyle = e.style,\n\t\t\t\t\tisDefault, s, m, n, dec, nextSibling, parent;\n\t\t\t\tif (_transformProp) {\n\t\t\t\t\ts = _getStyle(e, _transformPropCSS, null, true);\n\t\t\t\t} else if (e.currentStyle) {\n\t\t\t\t\t//for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.\n\t\t\t\t\ts = e.currentStyle.filter.match(_ieGetMatrixExp);\n\t\t\t\t\ts = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(\",\") : \"\";\n\t\t\t\t}\n\t\t\t\tisDefault = (!s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\");\n\t\t\t\tif (_transformProp && isDefault && !e.offsetParent) { //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n\t\t\t\t\t//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n\t\t\t\t\tn = style.display;\n\t\t\t\t\tstyle.display = \"block\";\n\t\t\t\t\tparent = e.parentNode;\n\t\t\t\t\tif (!parent || !e.offsetParent) {\n\t\t\t\t\t\tdec = 1; //flag\n\t\t\t\t\t\tnextSibling = e.nextSibling;\n\t\t\t\t\t\t_docElement.appendChild(e); //we must add it to the DOM in order to get values properly\n\t\t\t\t\t}\n\t\t\t\t\ts = _getStyle(e, _transformPropCSS, null, true);\n\t\t\t\t\tisDefault = (!s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\");\n\t\t\t\t\tif (n) {\n\t\t\t\t\t\tstyle.display = n;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_removeProp(style, \"display\");\n\t\t\t\t\t}\n\t\t\t\t\tif (dec) {\n\t\t\t\t\t\tif (nextSibling) {\n\t\t\t\t\t\t\tparent.insertBefore(e, nextSibling);\n\t\t\t\t\t\t} else if (parent) {\n\t\t\t\t\t\t\tparent.appendChild(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_docElement.removeChild(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tm.svg || (e.getCTM && _isSVG(e))) {\n\t\t\t\t\tif (isDefault && (style[_transformProp] + \"\").indexOf(\"matrix\") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values\n\t\t\t\t\t\ts = style[_transformProp];\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t}\n\t\t\t\t\tm = e.getAttribute(\"transform\");\n\t\t\t\t\tif (isDefault && m) {\n\t\t\t\t\t\tm = e.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n\t\t\t\t\t\ts = \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + m.e + \",\" + m.f + \")\";\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isDefault) {\n\t\t\t\t\treturn _identity2DMatrix;\n\t\t\t\t}\n\t\t\t\t//split the matrix values out into an array (m for matrix)\n\t\t\t\tm = (s || \"\").match(_numExp) || [];\n\t\t\t\ti = m.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tn = Number(m[i]);\n\t\t\t\t\tm[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).\n\t\t\t\t}\n\t\t\t\treturn (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.\n\t\t\t * @param {!Object} t target element\n\t\t\t * @param {Object=} cs computed style object (optional)\n\t\t\t * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}\n\t\t\t * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)\n\t\t\t * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}\n\t\t\t */\n\t\t\t_getTransform = _internals.getTransform = function(t, cs, rec, parse) {\n\t\t\t\tif (t._gsTransform && rec && !parse) {\n\t\t\t\t\treturn t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.\n\t\t\t\t}\n\t\t\t\tvar tm = rec ? t._gsTransform || new Transform() : new Transform(),\n\t\t\t\t\tinvX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.\n\t\t\t\t\tmin = 0.00002,\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\tzOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, \"0 0 0\").split(\" \")[2]) || tm.zOrigin  || 0 : 0,\n\t\t\t\t\tdefaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,\n\t\t\t\t\tm, i, scaleX, scaleY, rotation, skewX;\n\n\t\t\t\ttm.svg = !!(t.getCTM && _isSVG(t));\n\t\t\t\tif (tm.svg) {\n\t\t\t\t\t_parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, \"50% 50%\") + \"\", tm, t.getAttribute(\"data-svg-origin\"));\n\t\t\t\t\t_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;\n\t\t\t\t}\n\t\t\t\tm = _getMatrix(t);\n\t\t\t\tif (m !== _identity2DMatrix) {\n\n\t\t\t\t\tif (m.length === 16) {\n\t\t\t\t\t\t//we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)\n\t\t\t\t\t\tvar a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3],\n\t\t\t\t\t\t\ta12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7],\n\t\t\t\t\t\t\ta13 = m[8], a23 = m[9], a33 = m[10],\n\t\t\t\t\t\t\ta14 = m[12], a24 = m[13], a34 = m[14],\n\t\t\t\t\t\t\ta43 = m[11],\n\t\t\t\t\t\t\tangle = Math.atan2(a32, a33),\n\t\t\t\t\t\t\tt1, t2, t3, t4, cos, sin;\n\t\t\t\t\t\t//we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari\n\t\t\t\t\t\tif (tm.zOrigin) {\n\t\t\t\t\t\t\ta34 = -tm.zOrigin;\n\t\t\t\t\t\t\ta14 = a13*a34-m[12];\n\t\t\t\t\t\t\ta24 = a23*a34-m[13];\n\t\t\t\t\t\t\ta34 = a33*a34+tm.zOrigin-m[14];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.\n\t\t\t\t\t\ttm.rotationX = angle * _RAD2DEG;\n\t\t\t\t\t\t//rotationX\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\t\tt1 = a12*cos+a13*sin;\n\t\t\t\t\t\t\tt2 = a22*cos+a23*sin;\n\t\t\t\t\t\t\tt3 = a32*cos+a33*sin;\n\t\t\t\t\t\t\ta13 = a12*-sin+a13*cos;\n\t\t\t\t\t\t\ta23 = a22*-sin+a23*cos;\n\t\t\t\t\t\t\ta33 = a32*-sin+a33*cos;\n\t\t\t\t\t\t\ta43 = a42*-sin+a43*cos;\n\t\t\t\t\t\t\ta12 = t1;\n\t\t\t\t\t\t\ta22 = t2;\n\t\t\t\t\t\t\ta32 = t3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//rotationY\n\t\t\t\t\t\tangle = Math.atan2(-a31, a33);\n\t\t\t\t\t\ttm.rotationY = angle * _RAD2DEG;\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\t\tt1 = a11*cos-a13*sin;\n\t\t\t\t\t\t\tt2 = a21*cos-a23*sin;\n\t\t\t\t\t\t\tt3 = a31*cos-a33*sin;\n\t\t\t\t\t\t\ta23 = a21*sin+a23*cos;\n\t\t\t\t\t\t\ta33 = a31*sin+a33*cos;\n\t\t\t\t\t\t\ta43 = a41*sin+a43*cos;\n\t\t\t\t\t\t\ta11 = t1;\n\t\t\t\t\t\t\ta21 = t2;\n\t\t\t\t\t\t\ta31 = t3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//rotationZ\n\t\t\t\t\t\tangle = Math.atan2(a21, a11);\n\t\t\t\t\t\ttm.rotation = angle * _RAD2DEG;\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\t\t\tt1 = a11*cos+a21*sin;\n\t\t\t\t\t\t\tt2 = a12*cos+a22*sin;\n\t\t\t\t\t\t\tt3 = a13*cos+a23*sin;\n\t\t\t\t\t\t\ta21 = a21*cos-a11*sin;\n\t\t\t\t\t\t\ta22 = a22*cos-a12*sin;\n\t\t\t\t\t\t\ta23 = a23*cos-a13*sin;\n\t\t\t\t\t\t\ta11 = t1;\n\t\t\t\t\t\t\ta12 = t2;\n\t\t\t\t\t\t\ta13 = t3;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n\t\t\t\t\t\t\ttm.rotationX = tm.rotation = 0;\n\t\t\t\t\t\t\ttm.rotationY = 180 - tm.rotationY;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//skewX\n\t\t\t\t\t\tangle = Math.atan2(a12, a22);\n\n\t\t\t\t\t\t//scales\n\t\t\t\t\t\ttm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ttm.scaleY = ((Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ttm.scaleZ = ((Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ta11 /= tm.scaleX;\n\t\t\t\t\t\ta12 /= tm.scaleY;\n\t\t\t\t\t\ta21 /= tm.scaleX;\n\t\t\t\t\t\ta22 /= tm.scaleY;\n\t\t\t\t\t\tif (Math.abs(angle) > min) {\n\t\t\t\t\t\t\ttm.skewX = angle * _RAD2DEG;\n\t\t\t\t\t\t\ta12 = 0; //unskews\n\t\t\t\t\t\t\tif (tm.skewType !== \"simple\") {\n\t\t\t\t\t\t\t\ttm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttm.skewX = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* //for testing purposes\n\t\t\t\t\t\tvar transform = \"matrix3d(\",\n\t\t\t\t\t\t\tcomma = \",\",\n\t\t\t\t\t\t\tzero = \"0\";\n\t\t\t\t\t\ta13 /= tm.scaleZ;\n\t\t\t\t\t\ta23 /= tm.scaleZ;\n\t\t\t\t\t\ta31 /= tm.scaleX;\n\t\t\t\t\t\ta32 /= tm.scaleY;\n\t\t\t\t\t\ta33 /= tm.scaleZ;\n\t\t\t\t\t\ttransform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);\n\t\t\t\t\t\ttransform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);\n\t\t\t\t\t\ttransform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);\n\t\t\t\t\t\ttransform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;\n\t\t\t\t\t\ttransform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + \")\";\n\t\t\t\t\t\tconsole.log(transform);\n\t\t\t\t\t\tdocument.querySelector(\".test\").style[_transformProp] = transform;\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\ttm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;\n\t\t\t\t\t\ttm.x = a14;\n\t\t\t\t\t\ttm.y = a24;\n\t\t\t\t\t\ttm.z = a34;\n\t\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);\n\t\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's \"display\" is \"none\", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.\n\t\t\t\t\t\tvar k = (m.length >= 6),\n\t\t\t\t\t\t\ta = k ? m[0] : 1,\n\t\t\t\t\t\t\tb = m[1] || 0,\n\t\t\t\t\t\t\tc = m[2] || 0,\n\t\t\t\t\t\t\td = k ? m[3] : 1;\n\t\t\t\t\t\ttm.x = m[4] || 0;\n\t\t\t\t\t\ttm.y = m[5] || 0;\n\t\t\t\t\t\tscaleX = Math.sqrt(a * a + b * b);\n\t\t\t\t\t\tscaleY = Math.sqrt(d * d + c * c);\n\t\t\t\t\t\trotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n\t\t\t\t\t\tskewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;\n\t\t\t\t\t\ttm.scaleX = scaleX;\n\t\t\t\t\t\ttm.scaleY = scaleY;\n\t\t\t\t\t\ttm.rotation = rotation;\n\t\t\t\t\t\ttm.skewX = skewX;\n\t\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\t\ttm.rotationX = tm.rotationY = tm.z = 0;\n\t\t\t\t\t\t\ttm.perspective = defaultTransformPerspective;\n\t\t\t\t\t\t\ttm.scaleZ = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);\n\t\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {\n\t\t\t\t\t\tif (invX) {\n\t\t\t\t\t\t\ttm.scaleX *= -1;\n\t\t\t\t\t\t\ttm.skewX += (tm.rotation <= 0) ? 180 : -180;\n\t\t\t\t\t\t\ttm.rotation += (tm.rotation <= 0) ? 180 : -180;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttm.scaleY *= -1;\n\t\t\t\t\t\t\ttm.skewX += (tm.skewX <= 0) ? 180 : -180;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttm.zOrigin = zOrigin;\n\t\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.\n\t\t\t\t\tfor (i in tm) {\n\t\t\t\t\t\tif (tm[i] < min) if (tm[i] > -min) {\n\t\t\t\t\t\t\ttm[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//DEBUG: _log(\"parsed rotation of \" + t.getAttribute(\"id\")+\": \"+(tm.rotationX)+\", \"+(tm.rotationY)+\", \"+(tm.rotation)+\", scale: \"+tm.scaleX+\", \"+tm.scaleY+\", \"+tm.scaleZ+\", position: \"+tm.x+\", \"+tm.y+\", \"+tm.z+\", perspective: \"+tm.perspective+ \", origin: \"+ tm.xOrigin+ \",\"+ tm.yOrigin);\n\t\t\t\tif (rec) {\n\t\t\t\t\tt._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)\n\t\t\t\t\tif (tm.svg) { //if we're supposed to apply transforms to the SVG element's \"transform\" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.\n\t\t\t\t\t\tif (_useSVGTransformAttr && t.style[_transformProp]) {\n\t\t\t\t\t\t\tTweenLite.delayedCall(0.001, function(){ //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).\n\t\t\t\t\t\t\t\t_removeProp(t.style, _transformProp);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (!_useSVGTransformAttr && t.getAttribute(\"transform\")) {\n\t\t\t\t\t\t\tTweenLite.delayedCall(0.001, function(){\n\t\t\t\t\t\t\t\tt.removeAttribute(\"transform\");\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn tm;\n\t\t\t},\n\n\t\t\t//for setting 2D transforms in IE6, IE7, and IE8 (must use a \"filter\" to emulate the behavior of modern day browser transforms)\n\t\t\t_setIETransformRatio = function(v) {\n\t\t\t\tvar t = this.data, //refers to the element's _gsTransform object\n\t\t\t\t\tang = -t.rotation * _DEG2RAD,\n\t\t\t\t\tskew = ang + t.skewX * _DEG2RAD,\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\ta = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,\n\t\t\t\t\tb = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,\n\t\t\t\t\tc = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,\n\t\t\t\t\td = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,\n\t\t\t\t\tstyle = this.t.style,\n\t\t\t\t\tcs = this.t.currentStyle,\n\t\t\t\t\tfilters, val;\n\t\t\t\tif (!cs) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tval = b; //just for swapping the variables an inverting them (reused \"val\" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)\n\t\t\t\tb = -c;\n\t\t\t\tc = -val;\n\t\t\t\tfilters = cs.filter;\n\t\t\t\tstyle.filter = \"\"; //remove filters so that we can accurately measure offsetWidth/offsetHeight\n\t\t\t\tvar w = this.t.offsetWidth,\n\t\t\t\t\th = this.t.offsetHeight,\n\t\t\t\t\tclip = (cs.position !== \"absolute\"),\n\t\t\t\t\tm = \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + a + \", M12=\" + b + \", M21=\" + c + \", M22=\" + d,\n\t\t\t\t\tox = t.x + (w * t.xPercent / 100),\n\t\t\t\t\toy = t.y + (h * t.yPercent / 100),\n\t\t\t\t\tdx, dy;\n\n\t\t\t\t//if transformOrigin is being used, adjust the offset x and y\n\t\t\t\tif (t.ox != null) {\n\t\t\t\t\tdx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;\n\t\t\t\t\tdy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;\n\t\t\t\t\tox += dx - (dx * a + dy * b);\n\t\t\t\t\toy += dy - (dx * c + dy * d);\n\t\t\t\t}\n\n\t\t\t\tif (!clip) {\n\t\t\t\t\tm += \", sizingMethod='auto expand')\";\n\t\t\t\t} else {\n\t\t\t\t\tdx = (w / 2);\n\t\t\t\t\tdy = (h / 2);\n\t\t\t\t\t//translate to ensure that transformations occur around the correct origin (default is center).\n\t\t\t\t\tm += \", Dx=\" + (dx - (dx * a + dy * b) + ox) + \", Dy=\" + (dy - (dx * c + dy * d) + oy) + \")\";\n\t\t\t\t}\n\t\t\t\tif (filters.indexOf(\"DXImageTransform.Microsoft.Matrix(\") !== -1) {\n\t\t\t\t\tstyle.filter = filters.replace(_ieSetMatrixExp, m);\n\t\t\t\t} else {\n\t\t\t\t\tstyle.filter = m + \" \" + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.\n\t\t\t\t}\n\n\t\t\t\t//at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.\n\t\t\t\tif (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf(\"Dx=0, Dy=0\") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf(\"gradient(\" && filters.indexOf(\"Alpha\")) === -1) {\n\t\t\t\t\tstyle.removeAttribute(\"filter\");\n\t\t\t\t}\n\n\t\t\t\t//we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).\n\t\t\t\tif (!clip) {\n\t\t\t\t\tvar mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom\n\t\t\t\t\t\tmarg, prop, dif;\n\t\t\t\t\tdx = t.ieOffsetX || 0;\n\t\t\t\t\tdy = t.ieOffsetY || 0;\n\t\t\t\t\tt.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);\n\t\t\t\t\tt.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);\n\t\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\t\tprop = _margins[i];\n\t\t\t\t\t\tmarg = cs[prop];\n\t\t\t\t\t\t//we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)\n\t\t\t\t\t\tval = (marg.indexOf(\"px\") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, \"\")) || 0;\n\t\t\t\t\t\tif (val !== t[prop]) {\n\t\t\t\t\t\t\tdif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyle[prop] = (t[prop] = Math.round( val - dif * ((i === 0 || i === 2) ? 1 : mult) )) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* translates a super small decimal to a string WITHOUT scientific notation\n\t\t\t_safeDecimal = function(n) {\n\t\t\t\tvar s = (n < 0 ? -n : n) + \"\",\n\t\t\t\t\ta = s.split(\"e-\");\n\t\t\t\treturn (n < 0 ? \"-0.\" : \"0.\") + new Array(parseInt(a[1], 10) || 0).join(\"0\") + a[0].split(\".\").join(\"\");\n\t\t\t},\n\t\t\t*/\n\n\t\t\t_setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {\n\t\t\t\tvar t = this.data, //refers to the element's _gsTransform object\n\t\t\t\t\tstyle = this.t.style,\n\t\t\t\t\tangle = t.rotation,\n\t\t\t\t\trotationX = t.rotationX,\n\t\t\t\t\trotationY = t.rotationY,\n\t\t\t\t\tsx = t.scaleX,\n\t\t\t\t\tsy = t.scaleY,\n\t\t\t\t\tsz = t.scaleZ,\n\t\t\t\t\tx = t.x,\n\t\t\t\t\ty = t.y,\n\t\t\t\t\tz = t.z,\n\t\t\t\t\tisSVG = t.svg,\n\t\t\t\t\tperspective = t.perspective,\n\t\t\t\t\tforce3D = t.force3D,\n\t\t\t\t\tskewY = t.skewY,\n\t\t\t\t\tskewX = t.skewX,\n\t\t\t\t\tt1,\ta11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,\n\t\t\t\t\tzOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;\n\t\t\t\tif (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n\t\t\t\t\tskewX += skewY;\n\t\t\t\t\tangle += skewY;\n\t\t\t\t}\n\n\t\t\t\t//check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)\n\t\t\t\tif (((((v === 1 || v === 0) && force3D === \"auto\" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.\n\n\t\t\t\t\t//2D\n\t\t\t\t\tif (angle || skewX || isSVG) {\n\t\t\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\t\t\tskew = skewX * _DEG2RAD;\n\t\t\t\t\t\trnd = 100000;\n\t\t\t\t\t\ta11 = Math.cos(angle) * sx;\n\t\t\t\t\t\ta21 = Math.sin(angle) * sx;\n\t\t\t\t\t\ta12 = Math.sin(angle - skew) * -sy;\n\t\t\t\t\t\ta22 = Math.cos(angle - skew) * sy;\n\t\t\t\t\t\tif (skew && t.skewType === \"simple\") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\t\tt1 = Math.tan(skew - skewY * _DEG2RAD);\n\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\ta12 *= t1;\n\t\t\t\t\t\t\ta22 *= t1;\n\t\t\t\t\t\t\tif (skewY) {\n\t\t\t\t\t\t\t\tt1 = Math.tan(skewY * _DEG2RAD);\n\t\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isSVG) {\n\t\t\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t\t\t\tif (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the matrix to simulate it.\n\t\t\t\t\t\t\t\tmin = this.t.getBBox();\n\t\t\t\t\t\t\t\tx += t.xPercent * 0.01 * min.width;\n\t\t\t\t\t\t\t\ty += t.yPercent * 0.01 * min.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmin = 0.000001;\n\t\t\t\t\t\t\tif (x < min) if (x > -min) {\n\t\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (y < min) if (y > -min) {\n\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransform = (((a11 * rnd) | 0) / rnd) + \",\" + (((a21 * rnd) | 0) / rnd) + \",\" + (((a12 * rnd) | 0) / rnd) + \",\" + (((a22 * rnd) | 0) / rnd) + \",\" + x + \",\" + y + \")\";\n\t\t\t\t\t\tif (isSVG && _useSVGTransformAttr) {\n\t\t\t\t\t\t\tthis.t.setAttribute(\"transform\", \"matrix(\" + transform);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 5 decimal places.\n\t\t\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + transform;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + sx + \",0,0,\" + sy + \",\" + x + \",\" + y + \")\";\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\t\t\t\tif (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.\n\t\t\t\t\tmin = 0.0001;\n\t\t\t\t\tif (sx < min && sx > -min) {\n\t\t\t\t\t\tsx = sz = 0.00002;\n\t\t\t\t\t}\n\t\t\t\t\tif (sy < min && sy > -min) {\n\t\t\t\t\t\tsy = sz = 0.00002;\n\t\t\t\t\t}\n\t\t\t\t\tif (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).\n\t\t\t\t\t\tperspective = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (angle || skewX) {\n\t\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\t\tcos = a11 = Math.cos(angle);\n\t\t\t\t\tsin = a21 = Math.sin(angle);\n\t\t\t\t\tif (skewX) {\n\t\t\t\t\t\tangle -= skewX * _DEG2RAD;\n\t\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\t\tif (t.skewType === \"simple\") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\t\tt1 = Math.tan((skewX - skewY) * _DEG2RAD);\n\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\tcos *= t1;\n\t\t\t\t\t\t\tsin *= t1;\n\t\t\t\t\t\t\tif (t.skewY) {\n\t\t\t\t\t\t\t\tt1 = Math.tan(skewY * _DEG2RAD);\n\t\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ta12 = -sin;\n\t\t\t\t\ta22 = cos;\n\n\t\t\t\t} else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...\n\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) translate3d(\" : \"translate3d(\") + x + \"px,\" + y + \"px,\" + z +\"px)\" + ((sx !== 1 || sy !== 1) ? \" scale(\" + sx + \",\" + sy + \")\" : \"\");\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\ta11 = a22 = 1;\n\t\t\t\t\ta12 = a21 = 0;\n\t\t\t\t}\n\t\t\t\t// KEY  INDEX   AFFECTS a[row][column]\n\t\t\t\t// a11  0       rotation, rotationY, scaleX\n\t\t\t\t// a21  1       rotation, rotationY, scaleX\n\t\t\t\t// a31  2       rotationY, scaleX\n\t\t\t\t// a41  3       rotationY, scaleX\n\t\t\t\t// a12  4       rotation, skewX, rotationX, scaleY\n\t\t\t\t// a22  5       rotation, skewX, rotationX, scaleY\n\t\t\t\t// a32  6       rotationX, scaleY\n\t\t\t\t// a42  7       rotationX, scaleY\n\t\t\t\t// a13  8       rotationY, rotationX, scaleZ\n\t\t\t\t// a23  9       rotationY, rotationX, scaleZ\n\t\t\t\t// a33  10      rotationY, rotationX, scaleZ\n\t\t\t\t// a43  11      rotationY, rotationX, perspective, scaleZ\n\t\t\t\t// a14  12      x, zOrigin, svgOrigin\n\t\t\t\t// a24  13      y, zOrigin, svgOrigin\n\t\t\t\t// a34  14      z, zOrigin\n\t\t\t\t// a44  15\n\t\t\t\t// rotation: Math.atan2(a21, a11)\n\t\t\t\t// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))\n\t\t\t\t// rotationX: Math.atan2(a32, a33)\n\t\t\t\ta33 = 1;\n\t\t\t\ta13 = a23 = a31 = a32 = a41 = a42 = 0;\n\t\t\t\ta43 = (perspective) ? -1 / perspective : 0;\n\t\t\t\tzOrigin = t.zOrigin;\n\t\t\t\tmin = 0.000001; //threshold below which browsers use scientific notation which won't work.\n\t\t\t\tcomma = \",\";\n\t\t\t\tzero = \"0\";\n\t\t\t\tangle = rotationY * _DEG2RAD;\n\t\t\t\tif (angle) {\n\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\ta31 = -sin;\n\t\t\t\t\ta41 = a43*-sin;\n\t\t\t\t\ta13 = a11*sin;\n\t\t\t\t\ta23 = a21*sin;\n\t\t\t\t\ta33 = cos;\n\t\t\t\t\ta43 *= cos;\n\t\t\t\t\ta11 *= cos;\n\t\t\t\t\ta21 *= cos;\n\t\t\t\t}\n\t\t\t\tangle = rotationX * _DEG2RAD;\n\t\t\t\tif (angle) {\n\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\tt1 = a12*cos+a13*sin;\n\t\t\t\t\tt2 = a22*cos+a23*sin;\n\t\t\t\t\ta32 = a33*sin;\n\t\t\t\t\ta42 = a43*sin;\n\t\t\t\t\ta13 = a12*-sin+a13*cos;\n\t\t\t\t\ta23 = a22*-sin+a23*cos;\n\t\t\t\t\ta33 = a33*cos;\n\t\t\t\t\ta43 = a43*cos;\n\t\t\t\t\ta12 = t1;\n\t\t\t\t\ta22 = t2;\n\t\t\t\t}\n\t\t\t\tif (sz !== 1) {\n\t\t\t\t\ta13*=sz;\n\t\t\t\t\ta23*=sz;\n\t\t\t\t\ta33*=sz;\n\t\t\t\t\ta43*=sz;\n\t\t\t\t}\n\t\t\t\tif (sy !== 1) {\n\t\t\t\t\ta12*=sy;\n\t\t\t\t\ta22*=sy;\n\t\t\t\t\ta32*=sy;\n\t\t\t\t\ta42*=sy;\n\t\t\t\t}\n\t\t\t\tif (sx !== 1) {\n\t\t\t\t\ta11*=sx;\n\t\t\t\t\ta21*=sx;\n\t\t\t\t\ta31*=sx;\n\t\t\t\t\ta41*=sx;\n\t\t\t\t}\n\n\t\t\t\tif (zOrigin || isSVG) {\n\t\t\t\t\tif (zOrigin) {\n\t\t\t\t\t\tx += a13*-zOrigin;\n\t\t\t\t\t\ty += a23*-zOrigin;\n\t\t\t\t\t\tz += a33*-zOrigin+zOrigin;\n\t\t\t\t\t}\n\t\t\t\t\tif (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually\n\t\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t\t}\n\t\t\t\t\tif (x < min && x > -min) {\n\t\t\t\t\t\tx = zero;\n\t\t\t\t\t}\n\t\t\t\t\tif (y < min && y > -min) {\n\t\t\t\t\t\ty = zero;\n\t\t\t\t\t}\n\t\t\t\t\tif (z < min && z > -min) {\n\t\t\t\t\t\tz = 0; //don't use string because we calculate perspective later and need the number.\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:\n\t\t\t\ttransform = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix3d(\" : \"matrix3d(\");\n\t\t\t\ttransform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);\n\t\t\t\ttransform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);\n\t\t\t\tif (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)\n\t\t\t\t\ttransform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);\n\t\t\t\t\ttransform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;\n\t\t\t\t} else {\n\t\t\t\t\ttransform += \",0,0,0,0,1,0,\";\n\t\t\t\t}\n\t\t\t\ttransform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + \")\";\n\n\t\t\t\tstyle[_transformProp] = transform;\n\t\t\t};\n\n\t\tp = Transform.prototype;\n\t\tp.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;\n\t\tp.scaleX = p.scaleY = p.scaleZ = 1;\n\n\t\t_registerComplexSpecialProp(\"transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin\", {parser:function(t, e, parsingProp, cssp, pt, plugin, vars) {\n\t\t\tif (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.\n\t\t\tcssp._lastParsedTransform = vars;\n\t\t\tvar scaleFunc = (vars.scale && typeof(vars.scale) === \"function\") ? vars.scale : 0; //if there's a function-based \"scale\" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).\n\t\t\tif (scaleFunc) {\n\t\t\t\tvars.scale = scaleFunc(_index, t);\n\t\t\t}\n\t\t\tvar originalGSTransform = t._gsTransform,\n\t\t\t\tstyle = t.style,\n\t\t\t\tmin = 0.000001,\n\t\t\t\ti = _transformProps.length,\n\t\t\t\tv = vars,\n\t\t\t\tendRotations = {},\n\t\t\t\ttransformOriginString = \"transformOrigin\",\n\t\t\t\tm1 = _getTransform(t, _cs, true, v.parseTransform),\n\t\t\t\torig = v.transform && ((typeof(v.transform) === \"function\") ? v.transform(_index, _target) : v.transform),\n\t\t\t\tm2, copy, has3D, hasChange, dr, x, y, matrix, p;\n\t\t\tm1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;\n\t\t\tcssp._transform = m1;\n\t\t\tif (\"rotationZ\" in v) {\n\t\t\t\tv.rotation = v.rotationZ;\n\t\t\t}\n\t\t\tif (orig && typeof(orig) === \"string\" && _transformProp) { //for values like transform:\"rotate(60deg) scale(0.5, 0.8)\"\n\t\t\t\tcopy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.\n\t\t\t\tcopy[_transformProp] = orig;\n\t\t\t\tcopy.display = \"block\"; //if display is \"none\", the browser often refuses to report the transform properties correctly.\n\t\t\t\tcopy.position = \"absolute\";\n\t\t\t\tif (orig.indexOf(\"%\") !== -1) { //%-based translations will fail unless we set the width/height to match the original target...\n\t\t\t\t\tcopy.width = _getStyle(t, \"width\");\n\t\t\t\t\tcopy.height = _getStyle(t, \"height\");\n\t\t\t\t}\n\t\t\t\t_doc.body.appendChild(_tempDiv);\n\t\t\t\tm2 = _getTransform(_tempDiv, null, false);\n\t\t\t\tif (m1.skewType === \"simple\") { //the default _getTransform() reports the skewX/scaleY as if skewType is \"compensated\", thus we need to adjust that here if skewType is \"simple\".\n\t\t\t\t\tm2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);\n\t\t\t\t}\n\t\t\t\tif (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...\n\t\t\t\t\tx = m1.xOrigin;\n\t\t\t\t\ty = m1.yOrigin;\n\t\t\t\t\tm2.x -= m1.xOffset;\n\t\t\t\t\tm2.y -= m1.yOffset;\n\t\t\t\t\tif (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.\n\t\t\t\t\t\torig = {};\n\t\t\t\t\t\t_parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);\n\t\t\t\t\t\tx = orig.xOrigin;\n\t\t\t\t\t\ty = orig.yOrigin;\n\t\t\t\t\t\tm2.x -= orig.xOffset - m1.xOffset;\n\t\t\t\t\t\tm2.y -= orig.yOffset - m1.yOffset;\n\t\t\t\t\t}\n\t\t\t\t\tif (x || y) {\n\t\t\t\t\t\tmatrix = _getMatrix(_tempDiv, true);\n\t\t\t\t\t\tm2.x -= x - (x * matrix[0] + y * matrix[2]);\n\t\t\t\t\t\tm2.y -= y - (x * matrix[1] + y * matrix[3]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_doc.body.removeChild(_tempDiv);\n\t\t\t\tif (!m2.perspective) {\n\t\t\t\t\tm2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n\t\t\t\t}\n\t\t\t\tif (v.xPercent != null) {\n\t\t\t\t\tm2.xPercent = _parseVal(v.xPercent, m1.xPercent);\n\t\t\t\t}\n\t\t\t\tif (v.yPercent != null) {\n\t\t\t\t\tm2.yPercent = _parseVal(v.yPercent, m1.yPercent);\n\t\t\t\t}\n\t\t\t} else if (typeof(v) === \"object\") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)\n\t\t\t\tm2 = {scaleX:_parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),\n\t\t\t\t\tscaleY:_parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),\n\t\t\t\t\tscaleZ:_parseVal(v.scaleZ, m1.scaleZ),\n\t\t\t\t\tx:_parseVal(v.x, m1.x),\n\t\t\t\t\ty:_parseVal(v.y, m1.y),\n\t\t\t\t\tz:_parseVal(v.z, m1.z),\n\t\t\t\t\txPercent:_parseVal(v.xPercent, m1.xPercent),\n\t\t\t\t\tyPercent:_parseVal(v.yPercent, m1.yPercent),\n\t\t\t\t\tperspective:_parseVal(v.transformPerspective, m1.perspective)};\n\t\t\t\tdr = v.directionalRotation;\n\t\t\t\tif (dr != null) {\n\t\t\t\t\tif (typeof(dr) === \"object\") {\n\t\t\t\t\t\tfor (copy in dr) {\n\t\t\t\t\t\t\tv[copy] = dr[copy];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tv.rotation = dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (typeof(v.x) === \"string\" && v.x.indexOf(\"%\") !== -1) {\n\t\t\t\t\tm2.x = 0;\n\t\t\t\t\tm2.xPercent = _parseVal(v.x, m1.xPercent);\n\t\t\t\t}\n\t\t\t\tif (typeof(v.y) === \"string\" && v.y.indexOf(\"%\") !== -1) {\n\t\t\t\t\tm2.y = 0;\n\t\t\t\t\tm2.yPercent = _parseVal(v.y, m1.yPercent);\n\t\t\t\t}\n\n\t\t\t\tm2.rotation = _parseAngle((\"rotation\" in v) ? v.rotation : (\"shortRotation\" in v) ? v.shortRotation + \"_short\" : m1.rotation, m1.rotation, \"rotation\", endRotations);\n\t\t\t\tif (_supports3D) {\n\t\t\t\t\tm2.rotationX = _parseAngle((\"rotationX\" in v) ? v.rotationX : (\"shortRotationX\" in v) ? v.shortRotationX + \"_short\" : m1.rotationX || 0, m1.rotationX, \"rotationX\", endRotations);\n\t\t\t\t\tm2.rotationY = _parseAngle((\"rotationY\" in v) ? v.rotationY : (\"shortRotationY\" in v) ? v.shortRotationY + \"_short\" : m1.rotationY || 0, m1.rotationY, \"rotationY\", endRotations);\n\t\t\t\t}\n\t\t\t\tm2.skewX = _parseAngle(v.skewX, m1.skewX);\n\t\t\t\tm2.skewY = _parseAngle(v.skewY, m1.skewY);\n\t\t\t}\n\t\t\tif (_supports3D && v.force3D != null) {\n\t\t\t\tm1.force3D = v.force3D;\n\t\t\t\thasChange = true;\n\t\t\t}\n\n\t\t\thas3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);\n\t\t\tif (!has3D && v.scale != null) {\n\t\t\t\tm2.scaleZ = 1; //no need to tween scaleZ.\n\t\t\t}\n\n\t\t\twhile (--i > -1) {\n\t\t\t\tp = _transformProps[i];\n\t\t\t\torig = m2[p] - m1[p];\n\t\t\t\tif (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {\n\t\t\t\t\thasChange = true;\n\t\t\t\t\tpt = new CSSPropTween(m1, p, m1[p], orig, pt);\n\t\t\t\t\tif (p in endRotations) {\n\t\t\t\t\t\tpt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested\n\t\t\t\t\t}\n\t\t\t\t\tpt.xs0 = 0; //ensures the value stays numeric in setRatio()\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torig = (typeof(v.transformOrigin) === \"function\") ? v.transformOrigin(_index, _target) : v.transformOrigin;\n\t\t\tif (m1.svg && (orig || v.svgOrigin)) {\n\t\t\t\tx = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin\n\t\t\t\ty = m1.yOffset;\n\t\t\t\t_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);\n\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOrigin\", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to(\"#wheel\", 3, {rotation:180, transformOrigin:\"50% 50%\", delay:1}); TweenLite.fromTo(\"#wheel\", 3, {scale:0.5, transformOrigin:\"50% 50%\"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.\n\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOrigin\", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);\n\t\t\t\tif (x !== m1.xOffset || y !== m1.yOffset) {\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOffset\", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOffset\", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);\n\t\t\t\t}\n\t\t\t\torig = \"0px 0px\"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin\n\t\t\t}\n\t\t\tif (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a \"transformOrigin\" in this particular tween (maybe they did it via css directly).\n\t\t\t\tif (_transformProp) {\n\t\t\t\t\thasChange = true;\n\t\t\t\t\tp = _transformOriginProp;\n\t\t\t\t\tif (!orig) {\n\t\t\t\t\t\torig = (_getStyle(t, p, _cs, false, \"50% 50%\") + \"\").split(\" \");\n\t\t\t\t\t\torig = orig[0] + \" \" + orig[1] + \" \" + m1.zOrigin + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\torig += \"\";\n\t\t\t\t\tpt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);\n\t\t\t\t\tpt.b = style[p];\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\tcopy = m1.zOrigin;\n\t\t\t\t\t\torig = orig.split(\" \");\n\t\t\t\t\t\tm1.zOrigin = ((orig.length > 2) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.\n\t\t\t\t\t\tpt.xs0 = pt.e = orig[0] + \" \" + (orig[1] || \"50%\") + \" 0px\"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!\n\t\t\t\t\t\tpt = new CSSPropTween(m1, \"zOrigin\", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)\n\t\t\t\t\t\tpt.b = copy;\n\t\t\t\t\t\tpt.xs0 = pt.e = m1.zOrigin;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.xs0 = pt.e = orig;\n\t\t\t\t\t}\n\n\t\t\t\t\t//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).\n\t\t\t\t} else {\n\t\t\t\t\t_parsePosition(orig + \"\", m1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasChange) {\n\t\t\t\tcssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();\n\t\t\t}\n\t\t\tif (scaleFunc) {\n\t\t\t\tvars.scale = scaleFunc;\n\t\t\t}\n\t\t\treturn pt;\n\t\t}, allowFunc:true, prefix:true});\n\n\t\t_registerComplexSpecialProp(\"boxShadow\", {defaultValue:\"0px 0px 0px 0px #999\", prefix:true, color:true, multi:true, keyword:\"inset\"});\n\t\t_registerComplexSpecialProp(\"clipPath\", {defaultValue:\"inset(0px)\", prefix:true, multi:true, formatter:_getFormatter(\"inset(0px 0px 0px 0px)\", false, true)});\n\n\t\t_registerComplexSpecialProp(\"borderRadius\", {defaultValue:\"0px\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\te = this.format(e);\n\t\t\tvar props = [\"borderTopLeftRadius\",\"borderTopRightRadius\",\"borderBottomRightRadius\",\"borderBottomLeftRadius\"],\n\t\t\t\tstyle = t.style,\n\t\t\t\tea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;\n\t\t\tw = parseFloat(t.offsetWidth);\n\t\t\th = parseFloat(t.offsetHeight);\n\t\t\tea1 = e.split(\" \");\n\t\t\tfor (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!\n\t\t\t\tif (this.p.indexOf(\"border\")) { //older browsers used a prefix\n\t\t\t\t\tprops[i] = _checkPropPrefix(props[i]);\n\t\t\t\t}\n\t\t\t\tbs = bs2 = _getStyle(t, props[i], _cs, false, \"0px\");\n\t\t\t\tif (bs.indexOf(\" \") !== -1) {\n\t\t\t\t\tbs2 = bs.split(\" \");\n\t\t\t\t\tbs = bs2[0];\n\t\t\t\t\tbs2 = bs2[1];\n\t\t\t\t}\n\t\t\t\tes = es2 = ea1[i];\n\t\t\t\tbn = parseFloat(bs);\n\t\t\t\tbsfx = bs.substr((bn + \"\").length);\n\t\t\t\trel = (es.charAt(1) === \"=\");\n\t\t\t\tif (rel) {\n\t\t\t\t\ten = parseInt(es.charAt(0)+\"1\", 10);\n\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\tesfx = es.substr((en + \"\").length - (en < 0 ? 1 : 0)) || \"\";\n\t\t\t\t} else {\n\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\tesfx = es.substr((en + \"\").length);\n\t\t\t\t}\n\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\tesfx = _suffixMap[p] || bsfx;\n\t\t\t\t}\n\t\t\t\tif (esfx !== bsfx) {\n\t\t\t\t\thn = _convertToPixels(t, \"borderLeft\", bn, bsfx); //horizontal number (we use a bogus \"borderLeft\" property just because the _convertToPixels() method searches for the keywords \"Left\", \"Right\", \"Top\", and \"Bottom\" to determine of it's a horizontal or vertical property, and we need \"border\" in the name so that it knows it should measure relative to the element itself, not its parent.\n\t\t\t\t\tvn = _convertToPixels(t, \"borderTop\", bn, bsfx); //vertical number\n\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\tbs = (hn / w * 100) + \"%\";\n\t\t\t\t\t\tbs2 = (vn / h * 100) + \"%\";\n\t\t\t\t\t} else if (esfx === \"em\") {\n\t\t\t\t\t\tem = _convertToPixels(t, \"borderLeft\", 1, \"em\");\n\t\t\t\t\t\tbs = (hn / em) + \"em\";\n\t\t\t\t\t\tbs2 = (vn / em) + \"em\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbs = hn + \"px\";\n\t\t\t\t\t\tbs2 = vn + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif (rel) {\n\t\t\t\t\t\tes = (parseFloat(bs) + en) + esfx;\n\t\t\t\t\t\tes2 = (parseFloat(bs2) + en) + esfx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = _parseComplex(style, props[i], bs + \" \" + bs2, es + \" \" + es2, false, \"0px\", pt);\n\t\t\t}\n\t\t\treturn pt;\n\t\t}, prefix:true, formatter:_getFormatter(\"0px 0px 0px 0px\", false, true)});\n\t\t_registerComplexSpecialProp(\"borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius\", {defaultValue:\"0px\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\treturn _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, \"0px 0px\")), this.format(e), false, \"0px\", pt);\n\t\t}, prefix:true, formatter:_getFormatter(\"0px 0px\", false, true)});\n\t\t_registerComplexSpecialProp(\"backgroundPosition\", {defaultValue:\"0 0\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar bp = \"background-position\",\n\t\t\t\tcs = (_cs || _getComputedStyle(t, null)),\n\t\t\t\tbs = this.format( ((cs) ? _ieVers ? cs.getPropertyValue(bp + \"-x\") + \" \" + cs.getPropertyValue(bp + \"-y\") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + \" \" + t.currentStyle.backgroundPositionY) || \"0 0\"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase\n\t\t\t\tes = this.format(e),\n\t\t\t\tba, ea, i, pct, overlap, src;\n\t\t\tif ((bs.indexOf(\"%\") !== -1) !== (es.indexOf(\"%\") !== -1) && es.split(\",\").length < 2) {\n\t\t\t\tsrc = _getStyle(t, \"backgroundImage\").replace(_urlExp, \"\");\n\t\t\t\tif (src && src !== \"none\") {\n\t\t\t\t\tba = bs.split(\" \");\n\t\t\t\t\tea = es.split(\" \");\n\t\t\t\t\t_tempImg.setAttribute(\"src\", src); //set the temp IMG's src to the background-image so that we can measure its width/height\n\t\t\t\t\ti = 2;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tbs = ba[i];\n\t\t\t\t\t\tpct = (bs.indexOf(\"%\") !== -1);\n\t\t\t\t\t\tif (pct !== (ea[i].indexOf(\"%\") !== -1)) {\n\t\t\t\t\t\t\toverlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;\n\t\t\t\t\t\t\tba[i] = pct ? (parseFloat(bs) / 100 * overlap) + \"px\" : (parseFloat(bs) / overlap * 100) + \"%\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbs = ba.join(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, bs, es, pt, plugin);\n\t\t}, formatter:_parsePosition});\n\t\t_registerComplexSpecialProp(\"backgroundSize\", {defaultValue:\"0 0\", formatter:function(v) {\n\t\t\tv += \"\"; //ensure it's a string\n\t\t\treturn (v.substr(0,2) === \"co\") ? v : _parsePosition(v.indexOf(\" \") === -1 ? v + \" \" + v : v); //if set to something like \"100% 100%\", Safari typically reports the computed style as just \"100%\" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as \"100% 0\" (wrong). Also remember that it could be \"cover\" or \"contain\" which we can't tween but should be able to set.\n\t\t}});\n\t\t_registerComplexSpecialProp(\"perspective\", {defaultValue:\"0px\", prefix:true});\n\t\t_registerComplexSpecialProp(\"perspectiveOrigin\", {defaultValue:\"50% 50%\", prefix:true});\n\t\t_registerComplexSpecialProp(\"transformStyle\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"backfaceVisibility\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"userSelect\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"margin\", {parser:_getEdgeParser(\"marginTop,marginRight,marginBottom,marginLeft\")});\n\t\t_registerComplexSpecialProp(\"padding\", {parser:_getEdgeParser(\"paddingTop,paddingRight,paddingBottom,paddingLeft\")});\n\t\t_registerComplexSpecialProp(\"clip\", {defaultValue:\"rect(0px,0px,0px,0px)\", parser:function(t, e, p, cssp, pt, plugin){\n\t\t\tvar b, cs, delim;\n\t\t\tif (_ieVers < 9) { //IE8 and earlier don't report a \"clip\" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.\n\t\t\t\tcs = t.currentStyle;\n\t\t\t\tdelim = _ieVers < 8 ? \" \" : \",\";\n\t\t\t\tb = \"rect(\" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + \")\";\n\t\t\t\te = this.format(e).split(\",\").join(delim);\n\t\t\t} else {\n\t\t\t\tb = this.format(_getStyle(t, this.p, _cs, false, this.dflt));\n\t\t\t\te = this.format(e);\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, b, e, pt, plugin);\n\t\t}});\n\t\t_registerComplexSpecialProp(\"textShadow\", {defaultValue:\"0px 0px 0px #999\", color:true, multi:true});\n\t\t_registerComplexSpecialProp(\"autoRound,strictUnits\", {parser:function(t, e, p, cssp, pt) {return pt;}}); //just so that we can ignore these properties (not tween them)\n\t\t_registerComplexSpecialProp(\"border\", {defaultValue:\"0px solid #000\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar bw = _getStyle(t, \"borderTopWidth\", _cs, false, \"0px\"),\n\t\t\t\tend = this.format(e).split(\" \"),\n\t\t\t\tesfx = end[0].replace(_suffixExp, \"\");\n\t\t\tif (esfx !== \"px\") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.\n\t\t\t\tbw = (parseFloat(bw) / _convertToPixels(t, \"borderTopWidth\", 1, esfx)) + esfx;\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, this.format(bw + \" \" + _getStyle(t, \"borderTopStyle\", _cs, false, \"solid\") + \" \" + _getStyle(t, \"borderTopColor\", _cs, false, \"#000\")), end.join(\" \"), pt, plugin);\n\t\t\t}, color:true, formatter:function(v) {\n\t\t\t\tvar a = v.split(\" \");\n\t\t\t\treturn a[0] + \" \" + (a[1] || \"solid\") + \" \" + (v.match(_colorExp) || [\"#000\"])[0];\n\t\t\t}});\n\t\t_registerComplexSpecialProp(\"borderWidth\", {parser:_getEdgeParser(\"borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth\")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).\n\t\t_registerComplexSpecialProp(\"float,cssFloat,styleFloat\", {parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar s = t.style,\n\t\t\t\tprop = (\"cssFloat\" in s) ? \"cssFloat\" : \"styleFloat\";\n\t\t\treturn new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);\n\t\t}});\n\n\t\t//opacity-related\n\t\tvar _setIEOpacityRatio = function(v) {\n\t\t\t\tvar t = this.t, //refers to the element's style property\n\t\t\t\t\tfilters = t.filter || _getStyle(this.data, \"filter\") || \"\",\n\t\t\t\t\tval = (this.s + this.c * v) | 0,\n\t\t\t\t\tskip;\n\t\t\t\tif (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.\n\t\t\t\t\tif (filters.indexOf(\"atrix(\") === -1 && filters.indexOf(\"radient(\") === -1 && filters.indexOf(\"oader(\") === -1) {\n\t\t\t\t\t\tt.removeAttribute(\"filter\");\n\t\t\t\t\t\tskip = (!_getStyle(this.data, \"filter\")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt.filter = filters.replace(_alphaFilterExp, \"\");\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!skip) {\n\t\t\t\t\tif (this.xn1) {\n\t\t\t\t\t\tt.filter = filters = filters || (\"alpha(opacity=\" + val + \")\"); //works around bug in IE7/8 that prevents changes to \"visibility\" from being applied properly if the filter is changed to a different alpha on the same frame.\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.indexOf(\"pacity\") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the \"O\" to avoid case-sensitivity issues\n\t\t\t\t\t\tif (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as \"visibility\" changes (this.xn1 is 1 if this tween is an \"autoAlpha\" tween)\n\t\t\t\t\t\t\tt.filter = filters + \" alpha(opacity=\" + val + \")\"; //we round the value because otherwise, bugs in IE7/8 can prevent \"visibility\" changes from being applied properly.\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt.filter = filters.replace(_opacityExp, \"opacity=\" + val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t_registerComplexSpecialProp(\"opacity,alpha,autoAlpha\", {defaultValue:\"1\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar b = parseFloat(_getStyle(t, \"opacity\", _cs, false, \"1\")),\n\t\t\t\tstyle = t.style,\n\t\t\t\tisAutoAlpha = (p === \"autoAlpha\");\n\t\t\tif (typeof(e) === \"string\" && e.charAt(1) === \"=\") {\n\t\t\t\te = ((e.charAt(0) === \"-\") ? -1 : 1) * parseFloat(e.substr(2)) + b;\n\t\t\t}\n\t\t\tif (isAutoAlpha && b === 1 && _getStyle(t, \"visibility\", _cs) === \"hidden\" && e !== 0) { //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t\tif (_supportsOpacity) {\n\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b, e - b, pt);\n\t\t\t} else {\n\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b * 100, (e - b) * 100, pt);\n\t\t\t\tpt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to \"visibility\" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.\n\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\tpt.type = 2;\n\t\t\t\tpt.b = \"alpha(opacity=\" + pt.s + \")\";\n\t\t\t\tpt.e = \"alpha(opacity=\" + (pt.s + pt.c) + \")\";\n\t\t\t\tpt.data = t;\n\t\t\t\tpt.plugin = plugin;\n\t\t\t\tpt.setRatio = _setIEOpacityRatio;\n\t\t\t}\n\t\t\tif (isAutoAlpha) { //we have to create the \"visibility\" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier\n\t\t\t\tpt = new CSSPropTween(style, \"visibility\", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? \"inherit\" : \"hidden\"), ((e === 0) ? \"hidden\" : \"inherit\"));\n\t\t\t\tpt.xs0 = \"inherit\";\n\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\tcssp._overwriteProps.push(p);\n\t\t\t}\n\t\t\treturn pt;\n\t\t}});\n\n\n\t\tvar _removeProp = function(s, p) {\n\t\t\t\tif (p) {\n\t\t\t\t\tif (s.removeProperty) {\n\t\t\t\t\t\tif (p.substr(0,2) === \"ms\" || p.substr(0,6) === \"webkit\") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n\t\t\t\t\t\t\tp = \"-\" + p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t\t} else { //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n\t\t\t\t\t\ts.removeAttribute(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t_setClassNameRatio = function(v) {\n\t\t\t\tthis.t._gsClassPT = this;\n\t\t\t\tif (v === 1 || v === 0) {\n\t\t\t\t\tthis.t.setAttribute(\"class\", (v === 0) ? this.b : this.e);\n\t\t\t\t\tvar mpt = this.data, //first MiniPropTween\n\t\t\t\t\t\ts = this.t.style;\n\t\t\t\t\twhile (mpt) {\n\t\t\t\t\t\tif (!mpt.v) {\n\t\t\t\t\t\t\t_removeProp(s, mpt.p);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts[mpt.p] = mpt.v;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t\t}\n\t\t\t\t\tif (v === 1 && this.t._gsClassPT === this) {\n\t\t\t\t\t\tthis.t._gsClassPT = null;\n\t\t\t\t\t}\n\t\t\t\t} else if (this.t.getAttribute(\"class\") !== this.e) {\n\t\t\t\t\tthis.t.setAttribute(\"class\", this.e);\n\t\t\t\t}\n\t\t\t};\n\t\t_registerComplexSpecialProp(\"className\", {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\tvar b = t.getAttribute(\"class\") || \"\", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute(\"class\") and setAttribute(\"class\", value\") is more reliable.\n\t\t\t\tcssText = t.style.cssText,\n\t\t\t\tdifData, bs, cnpt, cnptLookup, mpt;\n\t\t\tpt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\tpt.setRatio = _setClassNameRatio;\n\t\t\tpt.pr = -11;\n\t\t\t_hasPriority = true;\n\t\t\tpt.b = b;\n\t\t\tbs = _getAllStyles(t, _cs);\n\t\t\t//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)\n\t\t\tcnpt = t._gsClassPT;\n\t\t\tif (cnpt) {\n\t\t\t\tcnptLookup = {};\n\t\t\t\tmpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tcnptLookup[mpt.p] = 1;\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t\tcnpt.setRatio(1);\n\t\t\t}\n\t\t\tt._gsClassPT = pt;\n\t\t\tpt.e = (e.charAt(1) !== \"=\") ? e : b.replace(new RegExp(\"(?:\\\\s|^)\" + e.substr(2) + \"(?![\\\\w-])\"), \"\") + ((e.charAt(0) === \"+\") ? \" \" + e.substr(2) : \"\");\n\t\t\tt.setAttribute(\"class\", pt.e);\n\t\t\tdifData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);\n\t\t\tt.setAttribute(\"class\", b);\n\t\t\tpt.data = difData.firstMPT;\n\t\t\tt.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\n\t\t\tpt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if \"className\" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)\n\t\t\treturn pt;\n\t\t}});\n\n\n\t\tvar _setClearPropsRatio = function(v) {\n\t\t\tif (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== \"isFromStart\") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).\n\t\t\t\tvar s = this.t.style,\n\t\t\t\t\ttransformParse = _specialProps.transform.parse,\n\t\t\t\t\ta, p, i, clearTransform, transform;\n\t\t\t\tif (this.e === \"all\") {\n\t\t\t\t\ts.cssText = \"\";\n\t\t\t\t\tclearTransform = true;\n\t\t\t\t} else {\n\t\t\t\t\ta = this.e.split(\" \").join(\"\").split(\",\");\n\t\t\t\t\ti = a.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tp = a[i];\n\t\t\t\t\t\tif (_specialProps[p]) {\n\t\t\t\t\t\t\tif (_specialProps[p].parse === transformParse) {\n\t\t\t\t\t\t\t\tclearTransform = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tp = (p === \"transformOrigin\") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like \"scaleX\" might be \"-webkit-transform\" or \"boxShadow\" might be \"-moz-box-shadow\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_removeProp(s, p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (clearTransform) {\n\t\t\t\t\t_removeProp(s, _transformProp);\n\t\t\t\t\ttransform = this.t._gsTransform;\n\t\t\t\t\tif (transform) {\n\t\t\t\t\t\tif (transform.svg) {\n\t\t\t\t\t\t\tthis.t.removeAttribute(\"data-svg-origin\");\n\t\t\t\t\t\t\tthis.t.removeAttribute(\"transform\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this.t._gsTransform;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\t_registerComplexSpecialProp(\"clearProps\", {parser:function(t, e, p, cssp, pt) {\n\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\tpt.setRatio = _setClearPropsRatio;\n\t\t\tpt.e = e;\n\t\t\tpt.pr = -10;\n\t\t\tpt.data = cssp._tween;\n\t\t\t_hasPriority = true;\n\t\t\treturn pt;\n\t\t}});\n\n\t\tp = \"bezier,throwProps,physicsProps,physics2D\".split(\",\");\n\t\ti = p.length;\n\t\twhile (i--) {\n\t\t\t_registerPluginProp(p[i]);\n\t\t}\n\n\n\n\n\n\n\n\n\t\tp = CSSPlugin.prototype;\n\t\tp._firstPT = p._lastParsedTransform = p._transform = null;\n\n\t\t//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.\n\t\tp._onInitTween = function(target, vars, tween, index) {\n\t\t\tif (!target.nodeType) { //css is only for dom elements\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._target = _target = target;\n\t\t\tthis._tween = tween;\n\t\t\tthis._vars = vars;\n\t\t\t_index = index;\n\t\t\t_autoRound = vars.autoRound;\n\t\t\t_hasPriority = false;\n\t\t\t_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;\n\t\t\t_cs = _getComputedStyle(target, \"\");\n\t\t\t_overwriteProps = this._overwriteProps;\n\t\t\tvar style = target.style,\n\t\t\t\tv, pt, pt2, first, last, next, zIndex, tpt, threeD;\n\t\t\tif (_reqSafariFix) if (style.zIndex === \"\") {\n\t\t\t\tv = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\tif (v === \"auto\" || v === \"\") {\n\t\t\t\t\t//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using \"left\" or \"top\" instead of transforms like \"x\" and \"y\") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.\n\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(vars) === \"string\") {\n\t\t\t\tfirst = style.cssText;\n\t\t\t\tv = _getAllStyles(target, _cs);\n\t\t\t\tstyle.cssText = first + \";\" + vars;\n\t\t\t\tv = _cssDif(target, v, _getAllStyles(target)).difs;\n\t\t\t\tif (!_supportsOpacity && _opacityValExp.test(vars)) {\n\t\t\t\t\tv.opacity = parseFloat( RegExp.$1 );\n\t\t\t\t}\n\t\t\t\tvars = v;\n\t\t\t\tstyle.cssText = first;\n\t\t\t}\n\n\t\t\tif (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:\"myClass\", scale:0.5, left:20} would work.\n\t\t\t\tthis._firstPT = pt = _specialProps.className.parse(target, vars.className, \"className\", this, null, null, vars);\n\t\t\t} else {\n\t\t\t\tthis._firstPT = pt = this.parse(target, vars, null);\n\t\t\t}\n\n\t\t\tif (this._transformType) {\n\t\t\t\tthreeD = (this._transformType === 3);\n\t\t\t\tif (!_transformProp) {\n\t\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\t} else if (_isSafari) {\n\t\t\t\t\t_reqSafariFix = true;\n\t\t\t\t\t//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).\n\t\t\t\t\tif (style.zIndex === \"\") {\n\t\t\t\t\t\tzIndex = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\t\t\tif (zIndex === \"auto\" || zIndex === \"\") {\n\t\t\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//Setting WebkitBackfaceVisibility corrects 3 bugs:\n\t\t\t\t\t// 1) [non-Android] Safari skips rendering changes to \"top\" and \"left\" that are made on the same frame/render as a transform update.\n\t\t\t\t\t// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly.\n\t\t\t\t\t// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.\n\t\t\t\t\t//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.\n\t\t\t\t\tif (_isSafariLT6) {\n\t\t\t\t\t\tthis._addLazySet(style, \"WebkitBackfaceVisibility\", this._vars.WebkitBackfaceVisibility || (threeD ? \"visible\" : \"hidden\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt2 = pt;\n\t\t\t\twhile (pt2 && pt2._next) {\n\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t}\n\t\t\t\ttpt = new CSSPropTween(target, \"transform\", 0, 0, null, 2);\n\t\t\t\tthis._linkCSSP(tpt, null, pt2);\n\t\t\t\ttpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;\n\t\t\t\ttpt.data = this._transform || _getTransform(target, _cs, true);\n\t\t\t\ttpt.tween = tween;\n\t\t\t\ttpt.pr = -1; //ensures that the transforms get applied after the components are updated.\n\t\t\t\t_overwriteProps.pop(); //we don't want to force the overwrite of all \"transform\" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.\n\t\t\t}\n\n\t\t\tif (_hasPriority) {\n\t\t\t\t//reorders the linked list in order of pr (priority)\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tthis._firstPT = first;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\n\t\tp.parse = function(target, vars, pt, plugin) {\n\t\t\tvar style = target.style,\n\t\t\t\tp, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;\n\t\t\tfor (p in vars) {\n\t\t\t\tes = vars[p]; //ending value string\n\t\t\t\tsp = _specialProps[p]; //SpecialProp lookup.\n\t\t\t\tif (typeof(es) === \"function\" && !(sp && sp.allowFunc)) {\n\t\t\t\t\tes = es(_index, _target);\n\t\t\t\t}\n\t\t\t\tif (sp) {\n\t\t\t\t\tpt = sp.parse(target, es, p, this, pt, plugin, vars);\n\t\t\t\t} else if (p.substr(0,2) === \"--\") { //for tweening CSS variables (which always start with \"--\"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.\n\t\t\t\t\tthis._tween._propLookup[p] = this._addTween.call(this._tween, target.style, \"setProperty\", _getComputedStyle(target).getPropertyValue(p) + \"\", es + \"\", p, false, p);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tbs = _getStyle(target, p, _cs) + \"\";\n\t\t\t\t\tisStr = (typeof(es) === \"string\");\n\t\t\t\t\tif (p === \"color\" || p === \"fill\" || p === \"stroke\" || p.indexOf(\"Color\") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:\n\t\t\t\t\t\tif (!isStr) {\n\t\t\t\t\t\t\tes = _parseColor(es);\n\t\t\t\t\t\t\tes = ((es.length > 3) ? \"rgba(\" : \"rgb(\") + es.join(\",\") + \")\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, \"transparent\", pt, 0, plugin);\n\n\t\t\t\t\t} else if (isStr && _complexExp.test(es)) {\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbn = parseFloat(bs);\n\t\t\t\t\t\tbsfx = (bn || bn === 0) ? bs.substr((bn + \"\").length) : \"\"; //remember, bs could be non-numeric like \"normal\" for fontWeight, so we should default to a blank suffix in that case.\n\n\t\t\t\t\t\tif (bs === \"\" || bs === \"auto\") {\n\t\t\t\t\t\t\tif (p === \"width\" || p === \"height\") {\n\t\t\t\t\t\t\t\tbn = _getDimension(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else if (p === \"left\" || p === \"top\") {\n\t\t\t\t\t\t\t\tbn = _calculateOffset(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbn = (p !== \"opacity\") ? 0 : 1;\n\t\t\t\t\t\t\t\tbsfx = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trel = (isStr && es.charAt(1) === \"=\");\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten = parseInt(es.charAt(0) + \"1\", 10);\n\t\t\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\t\t\tesfx = es.replace(_suffixExp, \"\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\t\t\tesfx = isStr ? es.replace(_suffixExp, \"\") : \"\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\t\t\tesfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tes = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.\n\t\t\t\t\t\t//if the beginning/ending suffixes don't match, normalize them...\n\t\t\t\t\t\tif (bsfx !== esfx) if (esfx !== \"\" || p === \"lineHeight\") if (en || en === 0) if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!\n\t\t\t\t\t\t\tbn = _convertToPixels(target, p, bn, bsfx);\n\t\t\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 100, \"%\") / 100;\n\t\t\t\t\t\t\t\tif (vars.strictUnits !== true) { //some browsers report only \"px\" values instead of allowing \"%\" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.\n\t\t\t\t\t\t\t\t\tbs = bn + \"%\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else if (esfx === \"em\" || esfx === \"rem\" || esfx === \"vw\" || esfx === \"vh\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 1, esfx);\n\n\t\t\t\t\t\t\t//otherwise convert to pixels.\n\t\t\t\t\t\t\t} else if (esfx !== \"px\") {\n\t\t\t\t\t\t\t\ten = _convertToPixels(target, p, en, esfx);\n\t\t\t\t\t\t\t\tesfx = \"px\"; //we don't use bsfx after this, so we don't need to set it to px too.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (rel) if (en || en === 0) {\n\t\t\t\t\t\t\t\tes = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten += bn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === \"px\" || p === \"zIndex\")), 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = esfx;\n\t\t\t\t\t\t\t//DEBUG: _log(\"tween \"+p+\" from \"+pt.b+\" (\"+bn+esfx+\") to \"+pt.e+\" with suffix: \"+pt.xs0);\n\t\t\t\t\t\t} else if (style[p] === undefined || !es && (es + \"\" === \"NaN\" || es == null)) {\n\t\t\t\t\t\t\t_log(\"invalid \" + p + \" tween value: \" + vars[p]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = (es === \"none\" && (p === \"display\" || p.indexOf(\"Style\") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for \"display\" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.\n\t\t\t\t\t\t\t//DEBUG: _log(\"non-tweening value \"+p+\": \"+pt.xs0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (plugin) if (pt && !pt.plugin) {\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\n\t\t//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.\n\t\tp.setRatio = function(v) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tmin = 0.000001,\n\t\t\t\tval, str, i;\n\t\t\t//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like \"position\" or \"float\" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).\n\t\t\tif (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tif (pt.r && pt.type !== -1) {\n\t\t\t\t\t\t\tval = pt.r(pt.s + pt.c);\n\t\t\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t\t\t} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.e;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\n\t\t\t} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = pt.c * v + pt.s;\n\t\t\t\t\tif (pt.r) {\n\t\t\t\t\t\tval = pt.r(val);\n\t\t\t\t\t} else if (val < min) if (val > -min) {\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\tif (i === 2) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;\n\t\t\t\t\t\t} else if (i === 3) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;\n\t\t\t\t\t\t} else if (i === 4) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;\n\t\t\t\t\t\t} else if (i === 5) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (pt.type === -1) { //non-tweening value\n\t\t\t\t\t\tpt.t[pt.p] = pt.xs0;\n\n\t\t\t\t\t} else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\n\t\t\t//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).\n\t\t\t} else {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tpt.t[pt.p] = pt.b;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @private\n\t\t * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.\n\t\t * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked\n\t\t * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call\n\t\t * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin\n\t\t * doesn't have any transform-related properties of its own. You can call this method as many times as you\n\t\t * want and it won't create duplicate CSSPropTweens.\n\t\t *\n\t\t * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)\n\t\t */\n\t\tp._enableTransforms = function(threeD) {\n\t\t\tthis._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.\n\t\t\tthis._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;\n\t\t};\n\n\t\tvar lazySet = function(v) {\n\t\t\tthis.t[this.p] = this.e;\n\t\t\tthis.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.\n\t\t};\n\t\t/** @private Gives us a way to set a value on the first render (and only the first render). **/\n\t\tp._addLazySet = function(t, p, v) {\n\t\t\tvar pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);\n\t\t\tpt.e = v;\n\t\t\tpt.setRatio = lazySet;\n\t\t\tpt.data = this;\n\t\t};\n\n\t\t/** @private **/\n\t\tp._linkCSSP = function(pt, next, prev, remove) {\n\t\t\tif (pt) {\n\t\t\t\tif (next) {\n\t\t\t\t\tnext._prev = pt;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t}\n\t\t\t\tif (pt._prev) {\n\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\tremove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)\n\t\t\t\t}\n\t\t\t\tif (prev) {\n\t\t\t\t\tprev._next = pt;\n\t\t\t\t} else if (!remove && this._firstPT === null) {\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t}\n\t\t\t\tpt._next = next;\n\t\t\t\tpt._prev = prev;\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\t\tp._mod = function(lookup) {\n\t\t\tvar pt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (typeof(lookup[pt.p]) === \"function\") { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging \"r\" as an indicator that the value should be rounded internally.\n\t\t\t\t\tpt.r = lookup[pt.p];\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\t//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the \"visibility\" property.\n\t\tp._kill = function(lookup) {\n\t\t\tvar copy = lookup,\n\t\t\t\tpt, p, xfirst;\n\t\t\tif (lookup.autoAlpha || lookup.alpha) {\n\t\t\t\tcopy = {};\n\t\t\t\tfor (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.\n\t\t\t\t\tcopy[p] = lookup[p];\n\t\t\t\t}\n\t\t\t\tcopy.opacity = 1;\n\t\t\t\tif (copy.autoAlpha) {\n\t\t\t\t\tcopy.visibility = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's \"xfirst\".\n\t\t\t\txfirst = pt.xfirst;\n\t\t\t\tif (xfirst && xfirst._prev) {\n\t\t\t\t\tthis._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev\n\t\t\t\t} else if (xfirst === this._firstPT) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tthis._linkCSSP(pt._next, pt._next._next, xfirst._prev);\n\t\t\t\t}\n\t\t\t\tthis._classNamePT = null;\n\t\t\t}\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.\n\t\t\t\t\tpt.plugin._kill(lookup);\n\t\t\t\t\tp = pt.plugin;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn TweenPlugin.prototype._kill.call(this, copy);\n\t\t};\n\n\n\n\t\t//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.\n\t\tvar _getChildStyles = function(e, props, targets) {\n\t\t\t\tvar children, i, child, type;\n\t\t\t\tif (e.slice) {\n\t\t\t\t\ti = e.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t_getChildStyles(e[i], props, targets);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tchildren = e.childNodes;\n\t\t\t\ti = children.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tchild = children[i];\n\t\t\t\t\ttype = child.type;\n\t\t\t\t\tif (child.style) {\n\t\t\t\t\t\tprops.push(_getAllStyles(child));\n\t\t\t\t\t\tif (targets) {\n\t\t\t\t\t\t\ttargets.push(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {\n\t\t\t\t\t\t_getChildStyles(child, props, targets);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t/**\n\t\t * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite\n\t\t * and then compares the style properties of all the target's child elements at the tween's start and end, and\n\t\t * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting\n\t\t * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is\n\t\t * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens\n\t\t * is because it creates entirely new tweens that may have completely different targets than the original tween,\n\t\t * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API\n\t\t * and it would create other problems. For example:\n\t\t *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)\n\t\t *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.\n\t\t *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.\n\t\t *\n\t\t * @param {Object} target object to be tweened\n\t\t * @param {number} Duration in seconds (or frames for frames-based tweens)\n\t\t * @param {Object} Object containing the end values, like {className:\"newClass\", ease:Linear.easeNone}\n\t\t * @return {Array} An array of TweenLite instances\n\t\t */\n\t\tCSSPlugin.cascadeTo = function(target, duration, vars) {\n\t\t\tvar tween = TweenLite.to(target, duration, vars),\n\t\t\t\tresults = [tween],\n\t\t\t\tb = [],\n\t\t\t\te = [],\n\t\t\t\ttargets = [],\n\t\t\t\t_reservedProps = TweenLite._internals.reservedProps,\n\t\t\t\ti, difs, p, from;\n\t\t\ttarget = tween._targets || tween.target;\n\t\t\t_getChildStyles(target, b, targets);\n\t\t\ttween.render(duration, true, true);\n\t\t\t_getChildStyles(target, e);\n\t\t\ttween.render(0, true, true);\n\t\t\ttween._enabled(true);\n\t\t\ti = targets.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tdifs = _cssDif(targets[i], b[i], e[i]);\n\t\t\t\tif (difs.firstMPT) {\n\t\t\t\t\tdifs = difs.difs;\n\t\t\t\t\tfor (p in vars) {\n\t\t\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfrom = {};\n\t\t\t\t\tfor (p in difs) {\n\t\t\t\t\t\tfrom[p] = b[i][p];\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(TweenLite.fromTo(targets[i], duration, from, difs));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tTweenPlugin.activate([CSSPlugin]);\n\t\treturn CSSPlugin;\n\n\t}, true);\n\nexport var CSSPlugin = globals.CSSPlugin;\nexport { CSSPlugin as default };","/*!\n * VERSION: 0.17.1\n * DATE: 2019-02-28\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * Requires TweenLite and CSSPlugin version 1.17.0 or later (TweenMax contains both TweenLite and CSSPlugin). ThrowPropsPlugin is required for momentum-based continuation of movement after the mouse/touch is released (ThrowPropsPlugin is a membership benefit of Club GreenSock - http://greensock.com/club/).\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\nimport TweenLite, { _gsScope, globals, EventDispatcher } from \"./TweenLite.js\";\nimport CSSPlugin from \"./CSSPlugin.js\";\n\n\t_gsScope._gsDefine(\"utils.Draggable\", [\"events.EventDispatcher\",\"TweenLite\",\"plugins.CSSPlugin\"], function() {\n\n\t\tvar _tempVarsXY = {css:{}, data:\"_draggable\"}, //speed optimization - we reuse the same vars object for x/y TweenLite.set() calls to minimize garbage collection tasks and improve performance.\n\t\t\t_tempVarsX = {css:{}, data:\"_draggable\"},\n\t\t\t_tempVarsY = {css:{}, data:\"_draggable\"},\n\t\t\t_tempVarsRotation = {css:{}},\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\t_tempEvent = {}, //for populating with pageX/pageY in old versions of IE\n\t\t\t_emptyFunc = function() { return false; },\n\t\t\t_dummyElement = {style:{}, appendChild:_emptyFunc, removeChild:_emptyFunc},\n\t\t\t_doc = _gsScope.document || {createElement: function() {return _dummyElement;}},\n\t\t\t_docElement = _doc.documentElement || {},\n\t\t\t_createElement = function(type) {\n\t\t\t\treturn _doc.createElementNS ? _doc.createElementNS(\"http://www.w3.org/1999/xhtml\", type) : _doc.createElement(type);\n\t\t\t},\n\t\t\t_tempDiv = _createElement(\"div\"),\n\t\t\t_emptyArray = [],\n\t\t\t_RAD2DEG = 180 / Math.PI,\n\t\t\t_max = 999999999999999,\n\t\t\t_getTime = Date.now || function() {return new Date().getTime();},\n\t\t\t_isOldIE = !!(!_doc.addEventListener && _doc.all),\n\t\t\t_placeholderDiv = _doc.createElement(\"div\"),\n\t\t\t_renderQueue = [],\n\t\t\t_lookup = {}, //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.\n\t\t\t_lookupCount = 0,\n\t\t\t_clickableTagExp = /^(?:a|input|textarea|button|select)$/i,\n\t\t\t_dragCount = 0, //total number of elements currently being dragged\n\t\t\t_prefix,\n\t\t\t_isMultiTouching,\n\t\t\t_isAndroid = (_gsScope.navigator && _gsScope.navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1), //Android handles touch events in an odd way and it's virtually impossible to \"feature test\" so we resort to UA sniffing\n\t\t\t_lastDragTime = 0,\n\t\t\t_temp1 = {}, // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.\n\t\t\t_windowProxy = {}, //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.\n\t\t\t_supportsPassive,\n\t\t\t_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tif (typeof(a) === \"string\") {\n\t\t\t\t\ta = TweenLite.selector(a);\n\t\t\t\t}\n\t\t\t\tif (!a || a.nodeType) { //if it's not an array, wrap it in one.\n\t\t\t\t\treturn [a];\n\t\t\t\t}\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++]));\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_copy = function(obj, factor) {\n\t\t\t\tvar copy = {}, p;\n\t\t\t\tif (factor) {\n\t\t\t\t\tfor (p in obj) {\n\t\t\t\t\t\tcopy[p] = obj[p] * factor;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (p in obj) {\n\t\t\t\t\t\tcopy[p] = obj[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn copy;\n\t\t\t},\n\t\t\tThrowPropsPlugin,\n\n\t\t\t_renderQueueTick = function() {\n\t\t\t\tvar i = _renderQueue.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t_renderQueue[i]();\n\t\t\t\t}\n\t\t\t},\n\t\t\t_addToRenderQueue = function(func) {\n\t\t\t\t_renderQueue.push(func);\n\t\t\t\tif (_renderQueue.length === 1) {\n\t\t\t\t\tTweenLite.ticker.addEventListener(\"tick\", _renderQueueTick, this, false, 1);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_removeFromRenderQueue = function(func) {\n\t\t\t\tvar i = _renderQueue.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (_renderQueue[i] === func) {\n\t\t\t\t\t\t_renderQueue.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tTweenLite.to(_renderQueueTimeout, 0, {overwrite:\"all\", delay:15, onComplete:_renderQueueTimeout, data:\"_draggable\"}); //remove the \"tick\" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).\n\t\t\t},\n\t\t\t_renderQueueTimeout = function() {\n\t\t\t\tif (!_renderQueue.length) {\n\t\t\t\t\tTweenLite.ticker.removeEventListener(\"tick\", _renderQueueTick);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_extend = function(obj, defaults) {\n\t\t\t\tvar p;\n\t\t\t\tfor (p in defaults) {\n\t\t\t\t\tif (obj[p] === undefined) {\n\t\t\t\t\t\tobj[p] = defaults[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn obj;\n\t\t\t},\n\t\t\t_getDocScrollTop = function() {\n\t\t\t\treturn (window.pageYOffset != null) ? window.pageYOffset : (_doc.scrollTop != null) ? _doc.scrollTop : _docElement.scrollTop || _doc.body.scrollTop || 0;\n\t\t\t},\n\t\t\t_getDocScrollLeft = function() {\n\t\t\t\treturn (window.pageXOffset != null) ? window.pageXOffset : (_doc.scrollLeft != null) ? _doc.scrollLeft : _docElement.scrollLeft || _doc.body.scrollLeft || 0;\n\t\t\t},\n\t\t\t_addScrollListener = function(e, callback) {\n\t\t\t\t_addListener(e, \"scroll\", callback);\n\t\t\t\tif (!_isRoot(e.parentNode)) {\n\t\t\t\t\t_addScrollListener(e.parentNode, callback);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_removeScrollListener = function(e, callback) {\n\t\t\t\t_removeListener(e, \"scroll\", callback);\n\t\t\t\tif (!_isRoot(e.parentNode)) {\n\t\t\t\t\t_removeScrollListener(e.parentNode, callback);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_isRoot = function (e) {\n\t\t\t\treturn !!(!e || e === _docElement || e === _doc || e === _doc.body || e === window || !e.nodeType || !e.parentNode);\n\t\t\t},\n\t\t\t_getMaxScroll = function(element, axis) {\n\t\t\t\tvar dim = (axis === \"x\") ? \"Width\" : \"Height\",\n\t\t\t\t\tscroll = \"scroll\" + dim,\n\t\t\t\t\tclient = \"client\" + dim,\n\t\t\t\t\tbody = _doc.body;\n\t\t\t\treturn Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], body[scroll]) - (window[\"inner\" + dim] || _docElement[client] || body[client]) : element[scroll] - element[client]);\n\t\t\t},\n\t\t\t_recordMaxScrolls = function(e) { //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.\n\t\t\t\tvar isRoot = _isRoot(e),\n\t\t\t\t\tx = _getMaxScroll(e, \"x\"),\n\t\t\t\t\ty = _getMaxScroll(e, \"y\");\n\t\t\t\tif (isRoot) {\n\t\t\t\t\te = _windowProxy;\n\t\t\t\t} else {\n\t\t\t\t\t_recordMaxScrolls(e.parentNode);\n\t\t\t\t}\n\t\t\t\te._gsMaxScrollX = x;\n\t\t\t\te._gsMaxScrollY = y;\n\t\t\t\te._gsScrollX = e.scrollLeft || 0;\n\t\t\t\te._gsScrollY = e.scrollTop || 0;\n\t\t\t},\n\n\t\t\t//just used for IE8 and earlier to normalize events and populate pageX/pageY\n\t\t\t_populateIEEvent = function(e, preventDefault) {\n\t\t\t\te = e || window.event;\n\t\t\t\t_tempEvent.pageX = e.clientX + _doc.body.scrollLeft + _docElement.scrollLeft;\n\t\t\t\t_tempEvent.pageY = e.clientY + _doc.body.scrollTop + _docElement.scrollTop;\n\t\t\t\tif (preventDefault) {\n\t\t\t\t\te.returnValue = false;\n\t\t\t\t}\n\t\t\t\treturn _tempEvent;\n\t\t\t},\n\n\t\t\t//grabs the first element it finds (and we include the window as an element), so if it's selector text, it'll feed that value to TweenLite.selector, if it's a jQuery object or some other selector engine's result, it'll grab the first one, and same for an array. If the value doesn't contain a DOM element, it'll just return null.\n\t\t\t_unwrapElement = function(value) {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (typeof(value) === \"string\") {\n\t\t\t\t\tvalue = TweenLite.selector(value);\n\t\t\t\t}\n\t\t\t\tif (value.length && value !== window && value[0] && value[0].style && !value.nodeType) {\n\t\t\t\t\tvalue = value[0];\n\t\t\t\t}\n\t\t\t\treturn (value === window || (value.nodeType && value.style)) ? value : null;\n\t\t\t},\n\n\t\t\t_checkPrefix = function(e, p) {\n\t\t\t\tvar s = e.style,\n\t\t\t\t\tcapped, i, a;\n\t\t\t\tif (s[p] === undefined) {\n\t\t\t\t\ta = [\"O\",\"Moz\",\"ms\",\"Ms\",\"Webkit\"];\n\t\t\t\t\ti = 5;\n\t\t\t\t\tcapped = p.charAt(0).toUpperCase() + p.substr(1);\n\t\t\t\t\twhile (--i > -1 && s[a[i]+capped] === undefined) { }\n\t\t\t\t\tif (i < 0) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\t_prefix = (i === 3) ? \"ms\" : a[i];\n\t\t\t\t\tp = _prefix + capped;\n\t\t\t\t}\n\t\t\t\treturn p;\n\t\t\t},\n\n\t\t\t_setStyle = function(e, p, value) {\n\t\t\t\tvar s = e.style;\n\t\t\t\tif (!s) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (s[p] === undefined) {\n\t\t\t\t\tp = _checkPrefix(e, p);\n\t\t\t\t}\n\t\t\t\tif (value == null) {\n\t\t\t\t\tif (s.removeProperty) {\n\t\t\t\t\t\ts.removeProperty(p.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n\t\t\t\t\t} else { //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n\t\t\t\t\t\ts.removeAttribute(p);\n\t\t\t\t\t}\n\t\t\t\t} else if (s[p] !== undefined) {\n\t\t\t\t\ts[p] = value;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_computedStyleScope = (typeof(window) !== \"undefined\" ? window : _doc.defaultView || {getComputedStyle:function() {}}),\n\t\t\t_getComputedStyle = function(e, s) {\n\t\t\t\treturn _computedStyleScope.getComputedStyle((e instanceof Element) ? e : e.host || (e.parentNode || {}).host || e, s); //the \"host\" stuff helps to accommodate ShadowDom objects.\n\t\t\t},\n\t\t\t_horizExp = /(?:Left|Right|Width)/i,\n\t\t\t_suffixExp = /(?:\\d|\\-|\\+|=|#|\\.)*/g,\n\t\t\t_convertToPixels = function(t, p, v, sfx, recurse) {\n\t\t\t\tif (sfx === \"px\" || !sfx) { return v; }\n\t\t\t\tif (sfx === \"auto\" || !v) { return 0; }\n\t\t\t\tvar horiz = _horizExp.test(p),\n\t\t\t\t\tnode = t,\n\t\t\t\t\tstyle = _tempDiv.style,\n\t\t\t\t\tneg = (v < 0),\n\t\t\t\t\tpix;\n\t\t\t\tif (neg) {\n\t\t\t\t\tv = -v;\n\t\t\t\t}\n\t\t\t\tif (sfx === \"%\" && p.indexOf(\"border\") !== -1) {\n\t\t\t\t\tpix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);\n\t\t\t\t} else {\n\t\t\t\t\tstyle.cssText = \"border:0 solid red;position:\" + _getStyle(t, \"position\", true) + \";line-height:0;\";\n\t\t\t\t\tif (sfx === \"%\" || !node.appendChild) {\n\t\t\t\t\t\tnode = t.parentNode || _doc.body;\n\t\t\t\t\t\tstyle[(horiz ? \"width\" : \"height\")] = v + sfx;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[(horiz ? \"borderLeftWidth\" : \"borderTopWidth\")] = v + sfx;\n\t\t\t\t\t}\n\t\t\t\t\tnode.appendChild(_tempDiv);\n\t\t\t\t\tpix = parseFloat(_tempDiv[(horiz ? \"offsetWidth\" : \"offsetHeight\")]);\n\t\t\t\t\tnode.removeChild(_tempDiv);\n\t\t\t\t\tif (pix === 0 && !recurse) {\n\t\t\t\t\t\tpix = _convertToPixels(t, p, v, sfx, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn neg ? -pix : pix;\n\t\t\t},\n\t\t\t_calculateOffset = function(t, p) { //for figuring out \"top\" or \"left\" in px when it's \"auto\". We need to factor in margin with the offsetLeft/offsetTop\n\t\t\t\tif (_getStyle(t, \"position\", true) !== \"absolute\") { return 0; }\n\t\t\t\tvar dim = ((p === \"left\") ? \"Left\" : \"Top\"),\n\t\t\t\t\tv = _getStyle(t, \"margin\" + dim, true);\n\t\t\t\treturn t[\"offset\" + dim] - (_convertToPixels(t, p, parseFloat(v), (v + \"\").replace(_suffixExp, \"\")) || 0);\n\t\t\t},\n\n\t\t\t_getStyle = function(element, prop, keepUnits) {\n\t\t\t\tvar rv = (element._gsTransform || {})[prop],\n\t\t\t\t\tcs;\n\t\t\t\tif (rv || rv === 0) {\n\t\t\t\t\treturn rv;\n\t\t\t\t} else if (element.style && element.style[prop]) { //shadow dom elements don't have \"style\".\n\t\t\t\t\trv = element.style[prop];\n\t\t\t\t} else if ((cs = _getComputedStyle(element))) {\n\t\t\t\t\trv = cs.getPropertyValue(prop.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n\t\t\t\t\trv = (rv || cs.length) ? rv : cs[prop]; //Opera behaves VERY strangely - length is usually 0 and cs[prop] is the only way to get accurate results EXCEPT when checking for -o-transform which only works with cs.getPropertyValue()!\n\t\t\t\t} else if (element.currentStyle) {\n\t\t\t\t\trv = element.currentStyle[prop];\n\t\t\t\t}\n\t\t\t\tif (rv === \"auto\" && (prop === \"top\" || prop === \"left\")) {\n\t\t\t\t\trv = _calculateOffset(element, prop);\n\t\t\t\t}\n\t\t\t\treturn keepUnits ? rv : parseFloat(rv) || 0;\n\t\t\t},\n\n\t\t\t_dispatchEvent = function(instance, type, callbackName) {\n\t\t\t\tvar vars = instance.vars,\n\t\t\t\t\tcallback = vars[callbackName],\n\t\t\t\t\tlisteners = instance._listeners[type];\n\t\t\t\tif (typeof(callback) === \"function\") {\n\t\t\t\t\tcallback.apply(vars[callbackName + \"Scope\"] || vars.callbackScope || instance, vars[callbackName + \"Params\"] || [instance.pointerEvent]);\n\t\t\t\t}\n\t\t\t\tif (listeners) {\n\t\t\t\t\tinstance.dispatchEvent(type);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_getBounds = function(obj, context) { //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.\n\t\t\t\tvar e = _unwrapElement(obj),\n\t\t\t\t\ttop, left, offset;\n\t\t\t\tif (!e) {\n\t\t\t\t\tif (obj.left !== undefined) {\n\t\t\t\t\t\toffset = _getOffsetTransformOrigin(context); //the bounds should be relative to the origin\n\t\t\t\t\t\treturn {left: obj.left - offset.x, top: obj.top - offset.y, width: obj.width, height: obj.height};\n\t\t\t\t\t}\n\t\t\t\t\tleft = obj.min || obj.minX || obj.minRotation || 0;\n\t\t\t\t\ttop = obj.min || obj.minY || 0;\n\t\t\t\t\treturn {left:left, top:top, width:(obj.max || obj.maxX || obj.maxRotation || 0) - left, height:(obj.max || obj.maxY || 0) - top};\n\t\t\t\t}\n\t\t\t\treturn _getElementBounds(e, context);\n\t\t\t},\n\n\t\t\t_svgBorderFactor,\n\t\t\t_svgBorderScales,\n\t\t\t_svgScrollOffset,\n\t\t\t_hasBorderBug,\n\t\t\t_hasReparentBug,//some browsers, like Chrome 49, alter the offsetTop/offsetLeft/offsetParent of elements when a non-identity transform is applied.\n\t\t\t_setEnvironmentVariables = function() { //some browsers factor the border into the SVG coordinate space, some don't (like Firefox). Some apply transforms to them, some don't. We feature-detect here so we know how to handle the border(s). We can't do this immediately - we must wait for the document.body to exist.\n\t\t\t\tif (!_doc.createElementNS) {\n\t\t\t\t\t_svgBorderFactor = 0;\n\t\t\t\t\t_svgBorderScales = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar div = _createElement(\"div\"),\n\t\t\t\t\tsvg = _doc.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\"),\n\t\t\t\t\twrapper = _createElement(\"div\"),\n\t\t\t\t\tstyle = div.style,\n\t\t\t\t\tparent = _doc.body || _docElement,\n\t\t\t\t\tisFlex = (_getStyle(parent, \"display\", true) === \"flex\"), //Firefox bug causes getScreenCTM() to return null when parent is display:flex and the element isn't rendered inside the window (like if it's below the scroll position)\n\t\t\t\t\tmatrix, e1, point, oldValue;\n\t\t\t\tif (_doc.body && _transformProp) {\n\t\t\t\t\tstyle.position = \"absolute\";\n\t\t\t\t\tparent.appendChild(wrapper);\n\t\t\t\t\twrapper.appendChild(div);\n\t\t\t\t\toldValue = div.offsetParent;\n\t\t\t\t\twrapper.style[_transformProp] = \"rotate(1deg)\";\n\t\t\t\t\t_hasReparentBug = (div.offsetParent === oldValue);\n\t\t\t\t\twrapper.style.position = \"absolute\";\n\t\t\t\t\tstyle.height = \"10px\";\n\t\t\t\t\toldValue = div.offsetTop;\n\t\t\t\t\twrapper.style.border = \"5px solid red\";\n\t\t\t\t\t_hasBorderBug = (oldValue !== div.offsetTop); //some browsers, like Firefox 38, cause the offsetTop/Left to be affected by a parent's border.\n\t\t\t\t\tparent.removeChild(wrapper);\n\t\t\t\t}\n\t\t\t\tstyle = svg.style;\n\t\t\t\tsvg.setAttributeNS(null, \"width\", \"400px\");\n\t\t\t\tsvg.setAttributeNS(null, \"height\", \"400px\");\n\t\t\t\tsvg.setAttributeNS(null, \"viewBox\", \"0 0 400 400\");\n\t\t\t\tstyle.display = \"block\";\n\t\t\t\tstyle.boxSizing = \"border-box\";\n\t\t\t\tstyle.border = \"0px solid red\";\n\t\t\t\tstyle.transform = \"none\";\n\t\t\t\t// in some browsers (like certain flavors of Android), the getScreenCTM() matrix is contaminated by the scroll position. We can run some logic here to detect that condition, but we ended up not needing this because we found another workaround using getBoundingClientRect().\n\t\t\t\tdiv.style.cssText = \"width:100px;height:100px;overflow:scroll;-ms-overflow-style:none;\";\n\t\t\t\tparent.appendChild(div);\n\t\t\t\tdiv.appendChild(svg);\n\t\t\t\tpoint = svg.createSVGPoint().matrixTransform(svg.getScreenCTM());\n\t\t\t\te1 = point.y;\n\t\t\t\tdiv.scrollTop = 100;\n\t\t\t\tpoint.x = point.y = 0;\n\t\t\t\tpoint = point.matrixTransform(svg.getScreenCTM());\n\t\t\t\t_svgScrollOffset = (e1 - point.y < 100.1) ? 0 : e1 - point.y - 150;\n\t\t\t\tdiv.removeChild(svg);\n\t\t\t\tparent.removeChild(div);\n\t\t\t\t// -- end _svgScrollOffset calculation.\n\t\t\t\tparent.appendChild(svg);\n\t\t\t\tif (isFlex) {\n\t\t\t\t\tparent.style.display = \"block\"; //Firefox bug causes getScreenCTM() to return null when parent is display:flex and the element isn't rendered inside the window (like if it's below the scroll position)\n\t\t\t\t}\n\t\t\t\tmatrix = svg.getScreenCTM();\n\t\t\t\te1 = matrix.e;\n\t\t\t\tstyle.border = \"50px solid red\";\n\t\t\t\tmatrix = svg.getScreenCTM();\n\t\t\t\tif (e1 === 0 && matrix.e === 0 && matrix.f === 0 && matrix.a === 1) { //Opera has a bunch of bugs - it doesn't adjust the x/y of the matrix, nor does it scale when box-sizing is border-box but it does so elsewhere; to get the correct behavior we set _svgBorderScales to true.\n\t\t\t\t\t_svgBorderFactor = 1;\n\t\t\t\t\t_svgBorderScales = true;\n\t\t\t\t} else {\n\t\t\t\t\t_svgBorderFactor = (e1 !== matrix.e) ? 1 : 0;\n\t\t\t\t\t_svgBorderScales = (matrix.a !== 1);\n\t\t\t\t}\n\t\t\t\tif (isFlex) {\n\t\t\t\t\tparent.style.display = \"flex\";\n\t\t\t\t}\n\t\t\t\tparent.removeChild(svg);\n\t\t\t},\n\n\t\t\t_supports3D = (_checkPrefix(_tempDiv, \"perspective\") !== \"\"),\n\n\t\t\t// start matrix and point conversion methods...\n\t\t\t_transformOriginProp = _checkPrefix(_tempDiv, \"transformOrigin\").replace(/^ms/g, \"Ms\").replace(/([A-Z])/g, \"-$1\").toLowerCase(),\n\t\t\t_transformProp = _checkPrefix(_tempDiv, \"transform\"),\n\t\t\t_transformPropCSS = _transformProp.replace(/^ms/g, \"Ms\").replace(/([A-Z])/g, \"-$1\").toLowerCase(),\n\t\t\t_point1 = {}, //we reuse _point1 and _point2 objects inside matrix and point conversion methods to conserve memory and minimize garbage collection tasks.\n\t\t\t_point2 = {},\n\t\t\t_SVGElement = _gsScope.SVGElement,\n\t\t\t_isSVG = function(e) {\n\t\t\t\treturn !!(_SVGElement && typeof(e.getBBox) === \"function\" && e.getCTM && (!e.parentNode || (e.parentNode.getBBox && e.parentNode.getCTM)));\n\t\t\t},\n\t\t\t_isIE10orBelow = (_gsScope.navigator && (((/MSIE ([0-9]{1,}[\\.0-9]{0,})/).exec(_gsScope.navigator.userAgent) || (/Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/).exec(_gsScope.navigator.userAgent)) && parseFloat( RegExp.$1 ) < 11)), //Ideally we'd avoid user agent sniffing, but there doesn't seem to be a way to feature-detect and sense a border-related bug that only affects IE10 and IE9.\n\t\t\t_tempTransforms = [],\n\t\t\t_tempElements = [],\n\t\t\t_getSVGOffsets = function(e) { //SVG elements don't always report offsetTop/offsetLeft/offsetParent at all (I'm looking at you, Firefox 29 and Android), so we have to do some work to manufacture those values. You can pass any SVG element and it'll spit back an object with offsetTop, offsetLeft, offsetParent, scaleX, and scaleY properties. We need the scaleX and scaleY to handle the way SVG can resize itself based on the container.\n\t\t\t\tif (!e.getBoundingClientRect || !e.parentNode || !_transformProp) {\n\t\t\t\t\treturn {offsetTop:0, offsetLeft:0, scaleX:1, scaleY:1, offsetParent:_docElement};\n\t\t\t\t}\n\t\t\t\tif (Draggable.cacheSVGData !== false && e._dCache && e._dCache.lastUpdate === TweenLite.ticker.frame) { //performance optimization. Assume that if the offsets are requested again on the same tick, we can just feed back the values we already calculated (no need to keep recalculating until another tick elapses).\n\t\t\t\t\treturn e._dCache;\n\t\t\t\t}\n\t\t\t\tvar curElement = e,\n\t\t\t\t\tcache = _cache(e),\n\t\t\t\t\teRect, parentRect, offsetParent, cs, m, i, point1, point2, borderWidth, borderHeight, width, height;\n\t\t\t\tcache.lastUpdate = TweenLite.ticker.frame;\n\t\t\t\tif (e.getBBox && !cache.isSVGRoot) { //if it's a nested/child SVG element, we must find the parent SVG canvas and measure the offset from there.\n\t\t\t\t\tcurElement = e.parentNode;\n\t\t\t\t\teRect = e.getBBox();\n\t\t\t\t\twhile (curElement && (curElement.nodeName + \"\").toLowerCase() !== \"svg\") {\n\t\t\t\t\t\tcurElement = curElement.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\tcs = _getSVGOffsets(curElement);\n\t\t\t\t\tcache.offsetTop = eRect.y * cs.scaleY;\n\t\t\t\t\tcache.offsetLeft = eRect.x * cs.scaleX;\n\t\t\t\t\tcache.scaleX = cs.scaleX;\n\t\t\t\t\tcache.scaleY = cs.scaleY;\n\t\t\t\t\tcache.offsetParent = curElement || _docElement;\n\t\t\t\t\treturn cache;\n\t\t\t\t}\n\t\t\t\t//only root SVG elements continue here...\n\t\t\t\toffsetParent = cache.offsetParent;\n\t\t\t\tif (offsetParent === _doc.body) {\n\t\t\t\t\toffsetParent = _docElement; //avoids problems with margins/padding on the body\n\t\t\t\t}\n\t\t\t\t//walk up the ancestors and record any non-identity transforms (and reset them to \"none\") until we reach the offsetParent. We must do this so that the getBoundingClientRect() is accurate for measuring the offsetTop/offsetLeft. We'll revert the values later...\n\t\t\t\t_tempElements.length = _tempTransforms.length = 0;\n\t\t\t\twhile (curElement && curElement.parentNode) {\n\t\t\t\t\tm = _getStyle(curElement, _transformProp, true);\n\t\t\t\t\tif (m !== \"matrix(1, 0, 0, 1, 0, 0)\" && m !== \"none\" && m !== \"translate3d(0px, 0px, 0px)\") {\n\t\t\t\t\t\t_tempElements.push(curElement);\n\t\t\t\t\t\t_tempTransforms.push(curElement.style[_transformProp]);\n\t\t\t\t\t\tcurElement.style[_transformProp] = \"none\";\n\t\t\t\t\t}\n\t\t\t\t\tcurElement = curElement.parentNode;\n\t\t\t\t}\n\t\t\t\tparentRect = offsetParent.getBoundingClientRect();\n\t\t\t\tm = e.getScreenCTM();\n\n\t\t\t\tpoint2 = e.createSVGPoint();\n\t\t\t\tpoint1 = point2.matrixTransform(m);\n\t\t\t\tcache.scaleX = Math.sqrt(m.a * m.a + m.b * m.b);\n\t\t\t\tcache.scaleY = Math.sqrt(m.d * m.d + m.c * m.c);\n\t\t\t\tif (_svgBorderFactor === undefined) {\n\t\t\t\t\t_setEnvironmentVariables();\n\t\t\t\t}\n\t\t\t\tif (cache.borderBox && !_svgBorderScales && e.getAttribute(\"width\")) { //some browsers (like Safari) don't properly scale the matrix to accommodate the border when box-sizing is border-box, so we must calculate it here...\n\t\t\t\t\tcs = _getComputedStyle(e) || {};\n\t\t\t\t\tborderWidth = (parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth)) || 0;\n\t\t\t\t\tborderHeight = (parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth)) || 0;\n\t\t\t\t\twidth = parseFloat(cs.width) || 0;\n\t\t\t\t\theight = parseFloat(cs.height) || 0;\n\t\t\t\t\tcache.scaleX *= (width - borderWidth) / width;\n\t\t\t\t\tcache.scaleY *= (height - borderHeight) / height;\n\t\t\t\t}\n\t\t\t\tif (_svgScrollOffset) { //some browsers (like Chrome for Android) have bugs in the way getScreenCTM() is reported (it doesn't factor in scroll position), so we must revert to a more expensive technique for calculating offsetTop/Left.\n\t\t\t\t\teRect = e.getBoundingClientRect();\n\t\t\t\t\tcache.offsetLeft = eRect.left - parentRect.left;\n\t\t\t\t\tcache.offsetTop = eRect.top - parentRect.top;\n\t\t\t\t} else {\n\t\t\t\t\tcache.offsetLeft = point1.x - parentRect.left;\n\t\t\t\t\tcache.offsetTop = point1.y - parentRect.top;\n\t\t\t\t}\n\t\t\t\tcache.offsetParent = offsetParent;\n\t\t\t\ti = _tempElements.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t_tempElements[i].style[_transformProp] = _tempTransforms[i];\n\t\t\t\t}\n\t\t\t\treturn cache;\n\t\t\t},\n\t\t\t_getOffsetTransformOrigin = function(e, decoratee) { //returns the x/y position of the transformOrigin of the element, in its own local coordinate system (pixels), offset from the top left corner.\n\t\t\t\tdecoratee = decoratee || {};\n\t\t\t\tif (!e || e === _docElement || !e.parentNode || e === window) {\n\t\t\t\t\treturn {x:0, y:0};\n\t\t\t\t}\n\t\t\t\tvar cs = _getComputedStyle(e),\n\t\t\t\t\tv = (_transformOriginProp && cs) ? cs.getPropertyValue(_transformOriginProp) : \"50% 50%\",\n\t\t\t\t\ta = v.split(\" \"),\n\t\t\t\t\tx = (v.indexOf(\"left\") !== -1) ? \"0%\" : (v.indexOf(\"right\") !== -1) ? \"100%\" : a[0],\n\t\t\t\t\ty = (v.indexOf(\"top\") !== -1) ? \"0%\" : (v.indexOf(\"bottom\") !== -1) ? \"100%\" : a[1];\n\t\t\t\tif (y === \"center\" || y == null) {\n\t\t\t\t\ty = \"50%\";\n\t\t\t\t}\n\t\t\t\tif (x === \"center\" || isNaN(parseFloat(x))) { //remember, the user could flip-flop the values and say \"bottom center\" or \"center bottom\", etc. \"center\" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an \"=\" sign in the value, it's relative.\n\t\t\t\t\tx = \"50%\";\n\t\t\t\t}\n\t\t\t\tif (e.getBBox && _isSVG(e)) { //SVG elements must be handled in a special way because their origins are calculated from the top left.\n\t\t\t\t\tif (!e._gsTransform) {\n\t\t\t\t\t\tTweenLite.set(e, {x:\"+=0\", overwrite:false}); //forces creation of the _gsTransform where we store all the transform components including xOrigin and yOrigin for SVG elements, as of GSAP 1.15.0 which also takes care of calculating the origin from the upper left corner of the SVG canvas.\n\t\t\t\t\t\tif (e._gsTransform.xOrigin === undefined) {\n\t\t\t\t\t\t\tconsole.log(\"Draggable requires at least GSAP 1.17.0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tv = e.getBBox();\n\t\t\t\t\tdecoratee.x = (e._gsTransform.xOrigin - v.x);\n\t\t\t\t\tdecoratee.y = (e._gsTransform.yOrigin - v.y);\n\t\t\t\t} else {\n\t\t\t\t\tif (e.getBBox && (x + y).indexOf(\"%\") !== -1) { //Firefox doesn't report offsetWidth/height on <svg> elements.\n\t\t\t\t\t\te = e.getBBox();\n\t\t\t\t\t\te = {offsetWidth: e.width, offsetHeight: e.height};\n\t\t\t\t\t}\n\t\t\t\t\tdecoratee.x = ((x.indexOf(\"%\") !== -1) ? e.offsetWidth * parseFloat(x) / 100 : parseFloat(x));\n\t\t\t\t\tdecoratee.y = ((y.indexOf(\"%\") !== -1) ? e.offsetHeight * parseFloat(y) / 100 : parseFloat(y));\n\t\t\t\t}\n\t\t\t\treturn decoratee;\n\t\t\t},\n\t\t\t_cache = function(e) { //computes some important values and stores them in a _dCache object attached to the element itself so that we can optimize performance\n\t\t\t\tif (Draggable.cacheSVGData !== false && e._dCache && e._dCache.lastUpdate === TweenLite.ticker.frame) { //performance optimization. Assume that if the offsets are requested again on the same tick, we can just feed back the values we already calculated (no need to keep recalculating until another tick elapses).\n\t\t\t\t\treturn e._dCache;\n\t\t\t\t}\n\t\t\t\tvar cache = e._dCache = e._dCache || {},\n\t\t\t\t\tcs = _getComputedStyle(e),\n\t\t\t\t\tisSVG = (e.getBBox && _isSVG(e)),\n\t\t\t\t\tisSVGRoot = ((e.nodeName + \"\").toLowerCase() === \"svg\"),\n\t\t\t\t\tcurSVG;\n\t\t\t\tcache.isSVG = isSVG;\n\t\t\t\tcache.isSVGRoot = isSVGRoot;\n\t\t\t\tcache.borderBox = (cs.boxSizing === \"border-box\");\n\t\t\t\tcache.computedStyle = cs;\n\t\t\t\tif (isSVGRoot) { //some browsers don't report parentNode on SVG elements.\n\t\t\t\t\tcurSVG = e.parentNode || _docElement;\n\t\t\t\t\tcurSVG.insertBefore(_tempDiv, e);\n\t\t\t\t\tcache.offsetParent = _tempDiv.offsetParent || _docElement; //in some cases, Firefox still reports offsetParent as null.\n\t\t\t\t\tcurSVG.removeChild(_tempDiv);\n\t\t\t\t} else if (isSVG) {\n\t\t\t\t\tcurSVG = e.parentNode;\n\t\t\t\t\twhile (curSVG && (curSVG.nodeName + \"\").toLowerCase() !== \"svg\") { //offsetParent is always the SVG canvas for SVG elements.\n\t\t\t\t\t\tcurSVG = curSVG.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\tcache.offsetParent = curSVG;\n\t\t\t\t} else {\n\t\t\t\t\tcache.offsetParent = e.offsetParent;\n\t\t\t\t}\n\t\t\t\treturn cache;\n\t\t\t},\n\t\t\t_getOffset2DMatrix = function(e, offsetOrigin, parentOffsetOrigin, zeroOrigin, isBase) {  //\"isBase\" helps us discern context - it should only be true when the element is the base one (the one at which we're starting to walk up the chain). It only matters in cases when it's an <svg> element itself because that's a case when we don't apply scaling.\n\t\t\t\tif (e === window || !e || !e.style || !e.parentNode) {\n\t\t\t\t\treturn [1,0,0,1,0,0];\n\t\t\t\t}\n\t\t\t\tvar cache = e._dCache || _cache(e),\n\t\t\t\t\tparent = e.parentNode,\n\t\t\t\t\tparentCache = parent._dCache || _cache(parent),\n\t\t\t\t\tcs = cache.computedStyle,\n\t\t\t\t\tparentOffsetParent = cache.isSVG ? parentCache.offsetParent : parent.offsetParent,\n\t\t\t\t\tm, isRoot, offsets, rect, t, sx, sy, offsetX, offsetY, parentRect, borderTop, borderLeft, borderTranslateX, borderTranslateY;\n\t\t\t\tm = (cache.isSVG && (e.style[_transformProp] + \"\").indexOf(\"matrix\") !== -1) ? e.style[_transformProp] : cs ? cs.getPropertyValue(_transformPropCSS) : e.currentStyle ? e.currentStyle[_transformProp] : \"1,0,0,1,0,0\"; //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values\n\t\t\t\tif (e.getBBox && (e.getAttribute(\"transform\") + \"\").indexOf(\"matrix\") !== -1) { //SVG can store transform data in its \"transform\" attribute instead of the CSS, so look for that here (only accept matrix()).\n\t\t\t\t\tm = e.getAttribute(\"transform\");\n\t\t\t\t}\n\t\t\t\tm = (m + \"\").match(/(?:\\-|\\.|\\b)(\\d|\\.|e\\-)+/g) || [1,0,0,1,0,0];\n\t\t\t\tif (m.length > 6) {\n\t\t\t\t\tm = [m[0], m[1], m[4], m[5], m[12], m[13]];\n\t\t\t\t}\n\t\t\t\tif (zeroOrigin) {\n\t\t\t\t\tm[4] = m[5] = 0;\n\t\t\t\t} else if (cache.isSVG && (t = e._gsTransform) && (t.xOrigin || t.yOrigin)) {\n\t\t\t\t\t//SVGs handle origin very differently. Factor in GSAP's handling of origin values here:\n\t\t\t\t\tm[0] = parseFloat(m[0]);\n\t\t\t\t\tm[1] = parseFloat(m[1]);\n\t\t\t\t\tm[2] = parseFloat(m[2]);\n\t\t\t\t\tm[3] = parseFloat(m[3]);\n\t\t\t\t\tm[4] = parseFloat(m[4]) - (t.xOrigin - (t.xOrigin * m[0] + t.yOrigin * m[2]));\n\t\t\t\t\tm[5] = parseFloat(m[5]) - (t.yOrigin - (t.xOrigin * m[1] + t.yOrigin * m[3]));\n\t\t\t\t}\n\t\t\t\tif (offsetOrigin) {\n\t\t\t\t\tif (_svgBorderFactor === undefined) {\n\t\t\t\t\t\t_setEnvironmentVariables();\n\t\t\t\t\t}\n\t\t\t\t\toffsets = (cache.isSVG || cache.isSVGRoot) ? _getSVGOffsets(e) : e;\n\t\t\t\t\tif (cache.isSVG) { //don't just rely on \"instanceof _SVGElement\" because if the SVG is embedded via an object tag, it won't work (SVGElement is mapped to a different object))\n\t\t\t\t\t\trect = e.getBBox();\n\t\t\t\t\t\tparentRect = (parentCache.isSVGRoot) ? {x:0, y:0} : parent.getBBox();\n\t\t\t\t\t\toffsets = {offsetLeft:rect.x - parentRect.x, offsetTop:rect.y - parentRect.y, offsetParent:cache.offsetParent};\n\t\t\t\t\t} else if (cache.isSVGRoot) {\n\t\t\t\t\t\tborderTop = parseInt(cs.borderTopWidth, 10) || 0;\n\t\t\t\t\t\tborderLeft = parseInt(cs.borderLeftWidth, 10) || 0;\n\t\t\t\t\t\tborderTranslateX = ((m[0] - _svgBorderFactor) * borderLeft + m[2] * borderTop);\n\t\t\t\t\t\tborderTranslateY = (m[1] * borderLeft + (m[3] - _svgBorderFactor) * borderTop);\n\n\t\t\t\t\t\tsx = offsetOrigin.x;\n\t\t\t\t\t\tsy = offsetOrigin.y;\n\t\t\t\t\t\toffsetX = (sx - (sx * m[0] + sy * m[2])); //accommodate the SVG root's transforms when the origin isn't in the top left.\n\t\t\t\t\t\toffsetY = (sy - (sx * m[1] + sy * m[3]));\n\n\t\t\t\t\t\tm[4] = parseFloat(m[4]) + offsetX;\n\t\t\t\t\t\tm[5] = parseFloat(m[5]) + offsetY;\n\t\t\t\t\t\toffsetOrigin.x -= offsetX;\n\t\t\t\t\t\toffsetOrigin.y -= offsetY;\n\t\t\t\t\t\tsx = offsets.scaleX;\n\t\t\t\t\t\tsy = offsets.scaleY;\n\t\t\t\t\t\tif (!isBase) { //when getting the matrix for a root <svg> element itself (NOT in the context of an SVG element that's nested inside of it like a <path>), we do NOT apply the scaling!\n\t\t\t\t\t\t\toffsetOrigin.x *= sx;\n\t\t\t\t\t\t\toffsetOrigin.y *= sy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tm[0] *= sx;\n\t\t\t\t\t\tm[1] *= sy;\n\t\t\t\t\t\tm[2] *= sx;\n\t\t\t\t\t\tm[3] *= sy;\n\t\t\t\t\t\tif (!_isIE10orBelow) {\n\t\t\t\t\t\t\toffsetOrigin.x += borderTranslateX;\n\t\t\t\t\t\t\toffsetOrigin.y += borderTranslateY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (parentOffsetParent === _doc.body && offsets.offsetParent === _docElement) { //to avoid issues with margin/padding on the <body>, we always set the offsetParent to _docElement in the _getSVGOffsets() function but there's a condition we check later in this function for (parentOffsetParent === offsets.offsetParent) which would fail if we don't run this logic. In other words, parentOffsetParent may be <body> and the <svg>'s offsetParent is also <body> but artificially set to _docElement to avoid margin/padding issues.\n\t\t\t\t\t\t\tparentOffsetParent = _docElement;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!_hasBorderBug && e.offsetParent) {\n\t\t\t\t\t\toffsetOrigin.x += parseInt(_getStyle(e.offsetParent, \"borderLeftWidth\"), 10) || 0;\n\t\t\t\t\t\toffsetOrigin.y += parseInt(_getStyle(e.offsetParent, \"borderTopWidth\"), 10) || 0;\n\t\t\t\t\t}\n\t\t\t\t\tisRoot = (parent === _docElement || parent === _doc.body);\n\t\t\t\t\tm[4] = Number(m[4]) + offsetOrigin.x + (offsets.offsetLeft || 0) - parentOffsetOrigin.x - (isRoot ? 0 : parent.scrollLeft || 0);\n\t\t\t\t\tm[5] = Number(m[5]) + offsetOrigin.y + (offsets.offsetTop || 0) - parentOffsetOrigin.y - (isRoot ? 0 : parent.scrollTop || 0);\n\t\t\t\t\tif (parent && _getStyle(e, \"position\", true) === \"fixed\") { //fixed position elements should factor in the scroll position of the document.\n\t\t\t\t\t\tm[4] += _getDocScrollLeft();\n\t\t\t\t\t\tm[5] += _getDocScrollTop();\n\t\t\t\t\t\tparent = parent.offsetParent;\n\t\t\t\t\t\twhile (parent) {\n\t\t\t\t\t\t\tm[4] -= parent.offsetLeft;\n\t\t\t\t\t\t\tm[5] -= parent.offsetTop;\n\t\t\t\t\t\t\tparent = parent.offsetParent;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (parent && parent !== _docElement && parentOffsetParent === offsets.offsetParent && !parentCache.isSVG && (!_hasReparentBug || _getOffset2DMatrix(parent).join(\"\") === \"100100\")) {\n\t\t\t\t\t\toffsets = (parentCache.isSVGRoot) ? _getSVGOffsets(parent) : parent;\n\t\t\t\t\t\tm[4] -= offsets.offsetLeft || 0;\n\t\t\t\t\t\tm[5] -= offsets.offsetTop || 0;\n\t\t\t\t\t\tif (!_hasBorderBug && parentCache.offsetParent && !cache.isSVG && !cache.isSVGRoot) {\n\t\t\t\t\t\t\tm[4] -= parseInt(_getStyle(parentCache.offsetParent, \"borderLeftWidth\"), 10) || 0;\n\t\t\t\t\t\t\tm[5] -= parseInt(_getStyle(parentCache.offsetParent, \"borderTopWidth\"), 10) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn m;\n\t\t\t},\n\t\t\t_getConcatenatedMatrix = function(e, invert) {\n\t\t\t\tif (!e || e === window || !e.parentNode) {\n\t\t\t\t\treturn [1,0,0,1,0,0];\n\t\t\t\t}\n\t\t\t\t//note: we keep reusing _point1 and _point2 in order to minimize memory usage and garbage collection chores.\n\t\t\t\tvar originOffset = _getOffsetTransformOrigin(e, _point1),\n\t\t\t\t\tparentOriginOffset = _getOffsetTransformOrigin(e.parentNode, _point2),\n\t\t\t\t\tm = _getOffset2DMatrix(e, originOffset, parentOriginOffset, false, !invert),\n\t\t\t\t\ta, b, c, d, tx, ty, m2, determinant;\n\t\t\t\twhile ((e = e.parentNode) && e.parentNode && e !== _docElement) {\n\t\t\t\t\toriginOffset = parentOriginOffset;\n\t\t\t\t\tparentOriginOffset = _getOffsetTransformOrigin(e.parentNode, (originOffset === _point1) ? _point2 : _point1);\n\t\t\t\t\tm2 = _getOffset2DMatrix(e, originOffset, parentOriginOffset);\n\t\t\t\t\ta = m[0];\n\t\t\t\t\tb = m[1];\n\t\t\t\t\tc = m[2];\n\t\t\t\t\td = m[3];\n\t\t\t\t\ttx = m[4];\n\t\t\t\t\tty = m[5];\n\t\t\t\t\tm[0] = a * m2[0] + b * m2[2];\n\t\t\t\t\tm[1] = a * m2[1] + b * m2[3];\n\t\t\t\t\tm[2] = c * m2[0] + d * m2[2];\n\t\t\t\t\tm[3] = c * m2[1] + d * m2[3];\n\t\t\t\t\tm[4] = tx * m2[0] + ty * m2[2] + m2[4];\n\t\t\t\t\tm[5] = tx * m2[1] + ty * m2[3] + m2[5];\n\t\t\t\t}\n\t\t\t\tif (invert) {\n\t\t\t\t\ta = m[0];\n\t\t\t\t\tb = m[1];\n\t\t\t\t\tc = m[2];\n\t\t\t\t\td = m[3];\n\t\t\t\t\ttx = m[4];\n\t\t\t\t\tty = m[5];\n\t\t\t\t\tdeterminant = (a * d - b * c);\n\t\t\t\t\tm[0] = d / determinant;\n\t\t\t\t\tm[1] = -b / determinant;\n\t\t\t\t\tm[2] = -c / determinant;\n\t\t\t\t\tm[3] = a / determinant;\n\t\t\t\t\tm[4] = (c * ty - d * tx) / determinant;\n\t\t\t\t\tm[5] = -(a * ty - b * tx) / determinant;\n\t\t\t\t}\n\t\t\t\treturn m;\n\t\t\t},\n\t\t\t_localToGlobal = function(e, p, fromTopLeft, decoratee) {\n\t\t\t\te = _unwrapElement(e);\n\t\t\t\tvar m = _getConcatenatedMatrix(e, false),\n\t\t\t\t\tx = p.x,\n\t\t\t\t\ty = p.y;\n\t\t\t\tif (fromTopLeft) {\n\t\t\t\t\t_getOffsetTransformOrigin(e, p);\n\t\t\t\t\tx -= p.x;\n\t\t\t\t\ty -= p.y;\n\t\t\t\t}\n\t\t\t\tdecoratee = (decoratee === true) ? p : decoratee || {};\n\t\t\t\tdecoratee.x = x * m[0] + y * m[2] + m[4];\n\t\t\t\tdecoratee.y = x * m[1] + y * m[3] + m[5];\n\t\t\t\treturn decoratee;\n\t\t\t},\n\t\t\t_localizePoint = function(p, localToGlobal, globalToLocal) {\n\t\t\t\tvar x = p.x * localToGlobal[0] + p.y * localToGlobal[2] + localToGlobal[4],\n\t\t\t\t\ty = p.x * localToGlobal[1] + p.y * localToGlobal[3] + localToGlobal[5];\n\t\t\t\tp.x = x * globalToLocal[0] + y * globalToLocal[2] + globalToLocal[4];\n\t\t\t\tp.y = x * globalToLocal[1] + y * globalToLocal[3] + globalToLocal[5];\n\t\t\t\treturn p;\n\t\t\t},\n\n\t\t\t_getElementBounds = function(e, context, fromTopLeft) {\n\t\t\t\tif (!(e = _unwrapElement(e))) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tcontext = _unwrapElement(context);\n\t\t\t\tvar isSVG = (e.getBBox && _isSVG(e)),\n\t\t\t\t\torigin, left, right, top, bottom, mLocalToGlobal, mGlobalToLocal, p1, p2, p3, p4, bbox, width, height, cache, borderLeft, borderTop, viewBox, viewBoxX, viewBoxY, computedDimensions, cs;\n\t\t\t\tif (e === window) {\n\t\t\t\t\ttop = _getDocScrollTop();\n\t\t\t\t\tleft = _getDocScrollLeft();\n\t\t\t\t\tright = left + (_docElement.clientWidth || e.innerWidth || _doc.body.clientWidth || 0);\n\t\t\t\t\tbottom = top + (((e.innerHeight || 0) - 20 < _docElement.clientHeight) ? _docElement.clientHeight : e.innerHeight || _doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.\n\t\t\t\t} else if (context === undefined || context === window) {\n\t\t\t\t\treturn e.getBoundingClientRect();\n\t\t\t\t} else {\n\t\t\t\t\torigin = _getOffsetTransformOrigin(e);\n\t\t\t\t\tleft = -origin.x;\n\t\t\t\t\ttop = -origin.y;\n\t\t\t\t\tif (isSVG) {\n\t\t\t\t\t\tbbox = e.getBBox();\n\t\t\t\t\t\twidth = bbox.width;\n\t\t\t\t\t\theight = bbox.height;\n\t\t\t\t\t} else if ((e.nodeName + \"\").toLowerCase() !== \"svg\" && e.offsetWidth) { //Chrome dropped support for \"offsetWidth\" on SVG elements\n\t\t\t\t\t\twidth = e.offsetWidth;\n\t\t\t\t\t\theight = e.offsetHeight;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomputedDimensions = _getComputedStyle(e);\n\t\t\t\t\t\twidth = parseFloat(computedDimensions.width);\n\t\t\t\t\t\theight = parseFloat(computedDimensions.height);\n\t\t\t\t\t}\n\t\t\t\t\tright = left + width;\n\t\t\t\t\tbottom = top + height;\n\t\t\t\t\tif (e.nodeName.toLowerCase() === \"svg\" && !_isOldIE) { //root SVG elements are a special beast because they have 2 types of scaling - transforms on themselves as well as the stretching of the SVG canvas itself based on the outer size and the viewBox. If, for example, the SVG's viewbox is \"0 0 100 100\" but the CSS is set to width:200px; height:200px, that'd make it appear at 2x scale even though the element itself has no CSS transforms but the offsetWidth/offsetHeight are based on that css, not the viewBox so we need to adjust them accordingly.\n\t\t\t\t\t\tcache = _getSVGOffsets(e);\n\t\t\t\t\t\tcs = cache.computedStyle || {};\n\t\t\t\t\t\tviewBox = (e.getAttribute(\"viewBox\") || \"0 0\").split(\" \");\n\t\t\t\t\t\tviewBoxX = parseFloat(viewBox[0]);\n\t\t\t\t\t\tviewBoxY = parseFloat(viewBox[1]);\n\t\t\t\t\t\tborderLeft = parseFloat(cs.borderLeftWidth) || 0;\n\t\t\t\t\t\tborderTop = parseFloat(cs.borderTopWidth) || 0;\n\t\t\t\t\t\tleft /= cache.scaleX;\n\t\t\t\t\t\ttop /= cache.scaleY;\n\t\t\t\t\t\tright = left + width - (width - ((width - borderLeft) / cache.scaleX) - viewBoxX);\n\t\t\t\t\t\tbottom = top + height - (height - ((height - borderTop) / cache.scaleY) - viewBoxY);\n\t\t\t\t\t\tleft -= borderLeft / cache.scaleX - viewBoxX;\n\t\t\t\t\t\ttop -= borderTop / cache.scaleY - viewBoxY;\n\t\t\t\t\t\tif (computedDimensions) { //when we had to use computed styles, factor in the border now.\n\t\t\t\t\t\t\tright += (parseFloat(cs.borderRightWidth) + borderLeft) / cache.scaleX;\n\t\t\t\t\t\t\tbottom += (borderTop + parseFloat(cs.borderBottomWidth)) / cache.scaleY;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (e === context) {\n\t\t\t\t\treturn {left:left, top:top, width: right - left, height: bottom - top};\n\t\t\t\t}\n\t\t\t\tmLocalToGlobal = _getConcatenatedMatrix(e);\n\t\t\t\tmGlobalToLocal = _getConcatenatedMatrix(context, true);\n\t\t\t\tp1 = _localizePoint({x:left, y:top}, mLocalToGlobal, mGlobalToLocal);\n\t\t\t\tp2 = _localizePoint({x:right, y:top}, mLocalToGlobal, mGlobalToLocal);\n\t\t\t\tp3 = _localizePoint({x:right, y:bottom}, mLocalToGlobal, mGlobalToLocal);\n\t\t\t\tp4 = _localizePoint({x:left, y:bottom}, mLocalToGlobal, mGlobalToLocal);\n\t\t\t\tleft = Math.min(p1.x, p2.x, p3.x, p4.x);\n\t\t\t\ttop = Math.min(p1.y, p2.y, p3.y, p4.y);\n\t\t\t\t_temp1.x = _temp1.y = 0;\n\t\t\t\tif (fromTopLeft) {\n\t\t\t\t\t_getOffsetTransformOrigin(context, _temp1);\n\t\t\t\t}\n\t\t\t\treturn {left:left + _temp1.x, top:top + _temp1.y, width:Math.max(p1.x, p2.x, p3.x, p4.x) - left, height:Math.max(p1.y, p2.y, p3.y, p4.y) - top};\n\t\t\t},\n\t\t\t// end matrix and point conversion methods\n\n\n\n\t\t\t_isArrayLike = function(e) {\n\t\t\t\treturn (e && e.length && e[0] && ((e[0].nodeType && e[0].style && !e.nodeType) || (e[0].length && e[0][0]))) ? true : false; //could be an array of jQuery objects too, so accommodate that.\n\t\t\t},\n\n\t\t\t_flattenArray = function(a) {\n\t\t\t\tvar result = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti, e, j;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\te = a[i];\n\t\t\t\t\tif (_isArrayLike(e)) {\n\t\t\t\t\t\tj = e.length;\n\t\t\t\t\t\tfor (j = 0; j < e.length; j++) {\n\t\t\t\t\t\t\tresult.push(e[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (e && e.length !== 0) {\n\t\t\t\t\t\tresult.push(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\t_isTouchDevice = (typeof(window) !== \"undefined\" && (\"ontouchstart\" in _docElement) && (\"orientation\" in window)),\n\t\t\t_touchEventLookup = (function(types) { //we create an object that makes it easy to translate touch event types into their \"pointer\" counterparts if we're in a browser that uses those instead. Like IE10 uses \"MSPointerDown\" instead of \"touchstart\", for example.\n\t\t\t\tvar standard = types.split(\",\"),\n\t\t\t\t\tconverted = ((_tempDiv.onpointerdown !== undefined) ? \"pointerdown,pointermove,pointerup,pointercancel\" : (_tempDiv.onmspointerdown !== undefined) ? \"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel\" : types).split(\",\"),\n\t\t\t\t\tobj = {},\n\t\t\t\t\ti = 4;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tobj[standard[i]] = converted[i];\n\t\t\t\t\tobj[converted[i]] = standard[i];\n\t\t\t\t}\n\t\t\t\t//to avoid problems in iOS 9, test to see if the browser supports the \"passive\" option on addEventListener().\n\t\t\t\ttry {\n\t\t\t\t\t_docElement.addEventListener(\"test\", null, Object.defineProperty({}, \"passive\", {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\t_supportsPassive = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t} catch (e) {}\n\t\t\t\treturn obj;\n\t\t\t}(\"touchstart,touchmove,touchend,touchcancel\")),\n\n\t\t\t_addListener = function(element, type, func, capture) {\n\t\t\t\tif (element.addEventListener) {\n\t\t\t\t\tvar touchType = _touchEventLookup[type];\n\t\t\t\t\tcapture = capture || (_supportsPassive ? {passive:false} : null);\n\t\t\t\t\telement.addEventListener(touchType || type, func, capture);\n\t\t\t\t\tif (touchType && type !== touchType) { //some browsers actually support both, so must we.\n\t\t\t\t\t\telement.addEventListener(type, func, capture);\n\t\t\t\t\t}\n\t\t\t\t} else if (element.attachEvent) {\n\t\t\t\t\telement.attachEvent(\"on\" + type, func);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_removeListener = function(element, type, func) {\n\t\t\t\tif (element.removeEventListener) {\n\t\t\t\t\tvar touchType = _touchEventLookup[type];\n\t\t\t\t\telement.removeEventListener(touchType || type, func);\n\t\t\t\t\tif (touchType && type !== touchType) {\n\t\t\t\t\t\telement.removeEventListener(type, func);\n\t\t\t\t\t}\n\t\t\t\t} else if (element.detachEvent) {\n\t\t\t\t\telement.detachEvent(\"on\" + type, func);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_hasTouchID = function(list, ID) {\n\t\t\t\tvar i = list.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (list[i].identifier === ID) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t_onMultiTouchDocumentEnd = function(e) {\n\t\t\t\t_isMultiTouching = (e.touches && _dragCount < e.touches.length);\n\t\t\t\t_removeListener(e.target, \"touchend\", _onMultiTouchDocumentEnd);\n\t\t\t},\n\n\t\t\t_onMultiTouchDocument = function(e) {\n\t\t\t\t_isMultiTouching = (e.touches && _dragCount < e.touches.length);\n\t\t\t\t_addListener(e.target, \"touchend\", _onMultiTouchDocumentEnd);\n\t\t\t},\n\n\t\t\t_parseThrowProps = function(draggable, snap, max, min, factor, forceZeroVelocity) {\n\t\t\t\tvar vars = {},\n\t\t\t\t\ta, i, l;\n\t\t\t\tif (snap) {\n\t\t\t\t\tif (factor !== 1 && snap instanceof Array) { //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.\n\t\t\t\t\t\tvars.end = a = [];\n\t\t\t\t\t\tl = snap.length;\n\t\t\t\t\t\tif (typeof(snap[0]) === \"object\") { //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.\n\t\t\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\t\t\ta[i] = _copy(snap[i], factor);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\t\t\ta[i] = snap[i] * factor;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmax += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if \"snap:[-$('#menu').width(), 0]\" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.\n\t\t\t\t\t\tmin -= 1.1;\n\t\t\t\t\t} else if (typeof(snap) === \"function\") {\n\t\t\t\t\t\tvars.end = function(value) {\n\t\t\t\t\t\t\tvar result = snap.call(draggable, value),\n\t\t\t\t\t\t\t\tcopy, p;\n\t\t\t\t\t\t\tif (factor !== 1) {\n\t\t\t\t\t\t\t\tif (typeof(result) === \"object\") {\n\t\t\t\t\t\t\t\t\tcopy = {};\n\t\t\t\t\t\t\t\t\tfor (p in result) {\n\t\t\t\t\t\t\t\t\t\tcopy[p] = result[p] * factor;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tresult = copy;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult *= factor;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvars.end = snap;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (max || max === 0) {\n\t\t\t\t\tvars.max = max;\n\t\t\t\t}\n\t\t\t\tif (min || min === 0) {\n\t\t\t\t\tvars.min = min;\n\t\t\t\t}\n\t\t\t\tif (forceZeroVelocity) {\n\t\t\t\t\tvars.velocity = 0;\n\t\t\t\t}\n\t\t\t\treturn vars;\n\t\t\t},\n\n\t\t\t_isClickable = function(e) { //sometimes it's convenient to mark an element as clickable by adding a data-clickable=\"true\" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has an onclick or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).\n\t\t\t\tvar data;\n\t\t\t\treturn (!e || !e.getAttribute || e.nodeName === \"BODY\") ? false : ((data = e.getAttribute(\"data-clickable\")) === \"true\" || (data !== \"false\" && (e.onclick || _clickableTagExp.test(e.nodeName + \"\") || e.getAttribute(\"contentEditable\") === \"true\"))) ? true : _isClickable(e.parentNode);\n\t\t\t},\n\n\t\t\t_setSelectable = function(elements, selectable) {\n\t\t\t\tvar i = elements.length,\n\t\t\t\t\te;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\te = elements[i];\n\t\t\t\t\te.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;\n\t\t\t\t\t_setStyle(e, \"userSelect\", (selectable ? \"text\" : \"none\"));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_addPaddingBR = (function() { //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).\n\t\t\t\tvar div = _doc.createElement(\"div\"),\n\t\t\t\t\tchild = _doc.createElement(\"div\"),\n\t\t\t\t\tchildStyle = child.style,\n\t\t\t\t\tparent = _doc.body || _tempDiv,\n\t\t\t\t\tval;\n\t\t\t\tchildStyle.display = \"inline-block\";\n\t\t\t\tchildStyle.position = \"relative\";\n\t\t\t\tdiv.style.cssText = child.innerHTML = \"width:90px; height:40px; padding:10px; overflow:auto; visibility: hidden\";\n\t\t\t\tdiv.appendChild(child);\n\t\t\t\tparent.appendChild(div);\n\t\t\t\tval = (child.offsetHeight + 18 > div.scrollHeight); //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.\n\t\t\t\tparent.removeChild(div);\n\t\t\t\treturn val;\n\t\t\t}()),\n\n\n\n\n\t\t\t//The ScrollProxy class wraps an element's contents into another div (we call it \"content\") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.\n\t\t\tScrollProxy = function(element, vars) {\n\t\t\t\telement = _unwrapElement(element);\n\t\t\t\tvars = vars || {};\n\t\t\t\tvar content = _doc.createElement(\"div\"),\n\t\t\t\t\tstyle = content.style,\n\t\t\t\t\tnode = element.firstChild,\n\t\t\t\t\toffsetTop = 0,\n\t\t\t\t\toffsetLeft = 0,\n\t\t\t\t\tprevTop = element.scrollTop,\n\t\t\t\t\tprevLeft = element.scrollLeft,\n\t\t\t\t\tscrollWidth = element.scrollWidth,\n\t\t\t\t\tscrollHeight = element.scrollHeight,\n\t\t\t\t\textraPadRight = 0,\n\t\t\t\t\tmaxLeft = 0,\n\t\t\t\t\tmaxTop = 0,\n\t\t\t\t\telementWidth, elementHeight, contentHeight, nextNode, transformStart, transformEnd;\n\n\t\t\t\tif (_supports3D && vars.force3D !== false) {\n\t\t\t\t\ttransformStart = \"translate3d(\";\n\t\t\t\t\ttransformEnd = \"px,0px)\";\n\t\t\t\t} else if (_transformProp) {\n\t\t\t\t\ttransformStart = \"translate(\";\n\t\t\t\t\ttransformEnd = \"px)\";\n\t\t\t\t}\n\n\t\t\t\tthis.scrollTop = function(value, force) {\n\t\t\t\t\tif (!arguments.length) {\n\t\t\t\t\t\treturn -this.top();\n\t\t\t\t\t}\n\t\t\t\t\tthis.top(-value, force);\n\t\t\t\t};\n\n\t\t\t\tthis.scrollLeft = function(value, force) {\n\t\t\t\t\tif (!arguments.length) {\n\t\t\t\t\t\treturn -this.left();\n\t\t\t\t\t}\n\t\t\t\t\tthis.left(-value, force);\n\t\t\t\t};\n\n\t\t\t\tthis.left = function(value, force) {\n\t\t\t\t\tif (!arguments.length) {\n\t\t\t\t\t\treturn -(element.scrollLeft + offsetLeft);\n\t\t\t\t\t}\n\t\t\t\t\tvar dif = element.scrollLeft - prevLeft,\n\t\t\t\t\t\toldOffset = offsetLeft;\n\t\t\t\t\tif ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n\t\t\t\t\t\tprevLeft = element.scrollLeft;\n\t\t\t\t\t\tTweenLite.killTweensOf(this, true, {left:1, scrollLeft:1});\n\t\t\t\t\t\tthis.left(-prevLeft);\n\t\t\t\t\t\tif (vars.onKill) {\n\t\t\t\t\t\t\tvars.onKill();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvalue = -value; //invert because scrolling works in the opposite direction\n\t\t\t\t\tif (value < 0) {\n\t\t\t\t\t\toffsetLeft = (value - 0.5) | 0;\n\t\t\t\t\t\tvalue = 0;\n\t\t\t\t\t} else if (value > maxLeft) {\n\t\t\t\t\t\toffsetLeft = (value - maxLeft) | 0;\n\t\t\t\t\t\tvalue = maxLeft;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toffsetLeft = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (offsetLeft || oldOffset) {\n\t\t\t\t\t\tif (transformStart) {\n\t\t\t\t\t\t\tif (!this._suspendTransforms) {\n\t\t\t\t\t\t\t\tstyle[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstyle.left = -offsetLeft + \"px\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (offsetLeft + extraPadRight >= 0) {\n\t\t\t\t\t\t\tstyle.paddingRight = offsetLeft + extraPadRight + \"px\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telement.scrollLeft = value | 0;\n\t\t\t\t\tprevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjsut the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.\n\t\t\t\t};\n\n\t\t\t\tthis.top = function(value, force) {\n\t\t\t\t\tif (!arguments.length) {\n\t\t\t\t\t\treturn -(element.scrollTop + offsetTop);\n\t\t\t\t\t}\n\t\t\t\t\tvar dif = element.scrollTop - prevTop,\n\t\t\t\t\t\toldOffset = offsetTop;\n\t\t\t\t\tif ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n\t\t\t\t\t\tprevTop = element.scrollTop;\n\t\t\t\t\t\tTweenLite.killTweensOf(this, true, {top:1, scrollTop:1});\n\t\t\t\t\t\tthis.top(-prevTop);\n\t\t\t\t\t\tif (vars.onKill) {\n\t\t\t\t\t\t\tvars.onKill();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvalue = -value; //invert because scrolling works in the opposite direction\n\t\t\t\t\tif (value < 0) {\n\t\t\t\t\t\toffsetTop = (value - 0.5) | 0;\n\t\t\t\t\t\tvalue = 0;\n\t\t\t\t\t} else if (value > maxTop) {\n\t\t\t\t\t\toffsetTop = (value - maxTop) | 0;\n\t\t\t\t\t\tvalue = maxTop;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toffsetTop = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (offsetTop || oldOffset) {\n\t\t\t\t\t\tif (transformStart) {\n\t\t\t\t\t\t\tif (!this._suspendTransforms) {\n\t\t\t\t\t\t\t\tstyle[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstyle.top = -offsetTop + \"px\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telement.scrollTop = value | 0;\n\t\t\t\t\tprevTop = element.scrollTop;\n\t\t\t\t};\n\n\t\t\t\tthis.maxScrollTop = function() {\n\t\t\t\t\treturn maxTop;\n\t\t\t\t};\n\n\t\t\t\tthis.maxScrollLeft = function() {\n\t\t\t\t\treturn maxLeft;\n\t\t\t\t};\n\n\t\t\t\tthis.disable = function() {\n\t\t\t\t\tnode = content.firstChild;\n\t\t\t\t\twhile (node) {\n\t\t\t\t\t\tnextNode = node.nextSibling;\n\t\t\t\t\t\telement.appendChild(node);\n\t\t\t\t\t\tnode = nextNode;\n\t\t\t\t\t}\n\t\t\t\t\tif (element === content.parentNode) { //in case disable() is called when it's already disabled.\n\t\t\t\t\t\telement.removeChild(content);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.enable = function() {\n\t\t\t\t\tnode = element.firstChild;\n\t\t\t\t\tif (node === content) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\twhile (node) {\n\t\t\t\t\t\tnextNode = node.nextSibling;\n\t\t\t\t\t\tcontent.appendChild(node);\n\t\t\t\t\t\tnode = nextNode;\n\t\t\t\t\t}\n\t\t\t\t\telement.appendChild(content);\n\t\t\t\t\tthis.calibrate();\n\t\t\t\t};\n\n\t\t\t\tthis.calibrate = function(force) {\n\t\t\t\t\tvar widthMatches = (element.clientWidth === elementWidth),\n\t\t\t\t\t\tx, y;\n\t\t\t\t\tprevTop = element.scrollTop;\n\t\t\t\t\tprevLeft = element.scrollLeft;\n\t\t\t\t\tif (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {\n\t\t\t\t\t\treturn; //no need to recalculate things if the width and height haven't changed.\n\t\t\t\t\t}\n\t\t\t\t\tif (offsetTop || offsetLeft) {\n\t\t\t\t\t\tx = this.left();\n\t\t\t\t\t\ty = this.top();\n\t\t\t\t\t\tthis.left(-element.scrollLeft);\n\t\t\t\t\t\tthis.top(-element.scrollTop);\n\t\t\t\t\t}\n\t\t\t\t\t//first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)\n\t\t\t\t\tif (!widthMatches || force) {\n\t\t\t\t\t\tstyle.display = \"block\";\n\t\t\t\t\t\tstyle.width = \"auto\";\n\t\t\t\t\t\tstyle.paddingRight = \"0px\";\n\t\t\t\t\t\textraPadRight = Math.max(0, element.scrollWidth - element.clientWidth);\n\t\t\t\t\t\t//if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.\n\t\t\t\t\t\tif (extraPadRight) {\n\t\t\t\t\t\t\textraPadRight += _getStyle(element, \"paddingLeft\") + (_addPaddingBR ? _getStyle(element, \"paddingRight\") : 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t\t\tstyle.position = \"relative\";\n\t\t\t\t\tstyle.overflow = \"visible\";\n\t\t\t\t\tstyle.verticalAlign = \"top\";\n\t\t\t\t\tstyle.width = \"100%\";\n\t\t\t\t\tstyle.paddingRight = extraPadRight + \"px\";\n\t\t\t\t\t//some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error\n\t\t\t\t\tif (_addPaddingBR) {\n\t\t\t\t\t\tstyle.paddingBottom = _getStyle(element, \"paddingBottom\", true);\n\t\t\t\t\t}\n\t\t\t\t\tif (_isOldIE) {\n\t\t\t\t\t\tstyle.zoom = \"1\";\n\t\t\t\t\t}\n\t\t\t\t\telementWidth = element.clientWidth;\n\t\t\t\t\telementHeight = element.clientHeight;\n\t\t\t\t\tscrollWidth = element.scrollWidth;\n\t\t\t\t\tscrollHeight = element.scrollHeight;\n\t\t\t\t\tmaxLeft = element.scrollWidth - elementWidth;\n\t\t\t\t\tmaxTop = element.scrollHeight - elementHeight;\n\t\t\t\t\tcontentHeight = content.offsetHeight;\n\t\t\t\t\tstyle.display = \"block\";\n\t\t\t\t\tif (x || y) {\n\t\t\t\t\t\tthis.left(x);\n\t\t\t\t\t\tthis.top(y);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.content = content;\n\t\t\t\tthis.element = element;\n\t\t\t\tthis._suspendTransforms = false;\n\t\t\t\tthis.enable();\n\t\t\t},\n\n\n\n\n\n\t\t\tDraggable = function(target, vars) {\n\t\t\t\tEventDispatcher.call(this, target);\n\t\t\t\ttarget = _unwrapElement(target); //in case the target is a selector object or selector text\n\t\t\t\tif (!ThrowPropsPlugin) {\n\t\t\t\t\tThrowPropsPlugin = _globals.com.greensock.plugins.ThrowPropsPlugin;\n\t\t\t\t}\n\t\t\t\tthis.vars = vars = _copy(vars || {});\n\t\t\t\tthis.target = target;\n\t\t\t\tthis.x = this.y = this.rotation = 0;\n\t\t\t\tthis.dragResistance = parseFloat(vars.dragResistance) || 0;\n\t\t\t\tthis.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;\n\t\t\t\tthis.lockAxis = vars.lockAxis;\n\t\t\t\tthis.autoScroll = vars.autoScroll || 0;\n\t\t\t\tthis.lockedAxis = null;\n\t\t\t\tthis.allowEventDefault = !!vars.allowEventDefault;\n\t\t\t\tvar type = (vars.type || (_isOldIE ? \"top,left\" : \"x,y\")).toLowerCase(),\n\t\t\t\t\txyMode = (type.indexOf(\"x\") !== -1 || type.indexOf(\"y\") !== -1),\n\t\t\t\t\trotationMode = (type.indexOf(\"rotation\") !== -1),\n\t\t\t\t\txProp = rotationMode ? \"rotation\" : xyMode ? \"x\" : \"left\",\n\t\t\t\t\tyProp = xyMode ? \"y\" : \"top\",\n\t\t\t\t\tallowX = (type.indexOf(\"x\") !== -1 || type.indexOf(\"left\") !== -1 || type === \"scroll\"),\n\t\t\t\t\tallowY = (type.indexOf(\"y\") !== -1 || type.indexOf(\"top\") !== -1 || type === \"scroll\"),\n\t\t\t\t\tminimumMovement = vars.minimumMovement || 2,\n\t\t\t\t\tself = this,\n\t\t\t\t\ttriggers = _slice(vars.trigger || vars.handle || target),\n\t\t\t\t\tkillProps = {},\n\t\t\t\t\tdragEndTime = 0,\n\t\t\t\t\tcheckAutoScrollBounds = false,\n\t\t\t\t\tautoScrollMarginTop = vars.autoScrollMarginTop || 40,\n\t\t\t\t\tautoScrollMarginRight = vars.autoScrollMarginRight || 40,\n\t\t\t\t\tautoScrollMarginBottom = vars.autoScrollMarginBottom || 40,\n\t\t\t\t\tautoScrollMarginLeft = vars.autoScrollMarginLeft || 40,\n\t\t\t\t\tisClickable = vars.clickableTest || _isClickable,\n\t\t\t\t\tclickTime = 0,\n\t\t\t\t\tenabled, scrollProxy, startPointerX, startPointerY, startElementX, startElementY, hasBounds, hasDragCallback, maxX, minX, maxY, minY, tempVars, cssVars, touch, touchID, rotationOrigin, dirty, old, snapX, snapY, snapXY, isClicking, touchEventTarget, matrix, interrupted, startScrollTop, startScrollLeft, applyObj, allowNativeTouchScrolling, touchDragAxis, isDispatching, clickDispatch, trustedClickDispatch,\n\n\t\t\t\t\tonContextMenu = function(e) { //used to prevent long-touch from triggering a context menu.\n\t\t\t\t\t\tif (self.isPressed && e.which < 2) {\n\t\t\t\t\t\t\tself.endDrag();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t//this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the \"mousemove\" or \"touchmove\" event handler which may get called many times inbetween refreshes.\n\t\t\t\t\trender = function(suppressEvents) {\n\t\t\t\t\t\tif (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {\n\t\t\t\t\t\t\tvar e = target,\n\t\t\t\t\t\t\t\tautoScrollFactor = self.autoScroll * 15, //multiplying by 15 just gives us a better \"feel\" speed-wise.\n\t\t\t\t\t\t\t\tparent, isRoot, rect, pointerX, pointerY, changeX, changeY, gap;\n\t\t\t\t\t\t\tcheckAutoScrollBounds = false;\n\t\t\t\t\t\t\t_windowProxy.scrollTop = ((window.pageYOffset != null) ? window.pageYOffset : (_docElement.scrollTop != null) ? _docElement.scrollTop : _doc.body.scrollTop);\n\t\t\t\t\t\t\t_windowProxy.scrollLeft = ((window.pageXOffset != null) ? window.pageXOffset : (_docElement.scrollLeft != null) ? _docElement.scrollLeft : _doc.body.scrollLeft);\n\t\t\t\t\t\t\tpointerX = self.pointerX - _windowProxy.scrollLeft;\n\t\t\t\t\t\t\tpointerY = self.pointerY - _windowProxy.scrollTop;\n\t\t\t\t\t\t\twhile (e && !isRoot) { //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.\n\t\t\t\t\t\t\t\tisRoot = _isRoot(e.parentNode);\n\t\t\t\t\t\t\t\tparent = isRoot ? _windowProxy : e.parentNode;\n\t\t\t\t\t\t\t\trect = isRoot ? {bottom:Math.max(_docElement.clientHeight, window.innerHeight || 0), right: Math.max(_docElement.clientWidth, window.innerWidth || 0), left:0, top:0} : parent.getBoundingClientRect();\n\t\t\t\t\t\t\t\tchangeX = changeY = 0;\n\t\t\t\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\t\t\t\tgap = parent._gsMaxScrollY - parent.scrollTop;\n\t\t\t\t\t\t\t\t\tif (gap < 0) {\n\t\t\t\t\t\t\t\t\t\tchangeY = gap;\n\t\t\t\t\t\t\t\t\t} else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {\n\t\t\t\t\t\t\t\t\t\tcheckAutoScrollBounds = true;\n\t\t\t\t\t\t\t\t\t\tchangeY = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.bottom - pointerY)) / autoScrollMarginBottom)) | 0);\n\t\t\t\t\t\t\t\t\t} else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {\n\t\t\t\t\t\t\t\t\t\tcheckAutoScrollBounds = true;\n\t\t\t\t\t\t\t\t\t\tchangeY = -Math.min(parent.scrollTop, (autoScrollFactor * (1 - Math.max(0, (pointerY - rect.top)) / autoScrollMarginTop)) | 0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (changeY) {\n\t\t\t\t\t\t\t\t\t\tparent.scrollTop += changeY;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\t\t\t\tgap = parent._gsMaxScrollX - parent.scrollLeft;\n\t\t\t\t\t\t\t\t\tif (gap < 0) {\n\t\t\t\t\t\t\t\t\t\tchangeX = gap;\n\t\t\t\t\t\t\t\t\t} else if (pointerX > rect.right - autoScrollMarginRight && gap) {\n\t\t\t\t\t\t\t\t\t\tcheckAutoScrollBounds = true;\n\t\t\t\t\t\t\t\t\t\tchangeX = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.right - pointerX)) / autoScrollMarginRight)) | 0);\n\t\t\t\t\t\t\t\t\t} else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {\n\t\t\t\t\t\t\t\t\t\tcheckAutoScrollBounds = true;\n\t\t\t\t\t\t\t\t\t\tchangeX = -Math.min(parent.scrollLeft, (autoScrollFactor * (1 - Math.max(0, (pointerX - rect.left)) / autoScrollMarginLeft)) | 0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (changeX) {\n\t\t\t\t\t\t\t\t\t\tparent.scrollLeft += changeX;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (isRoot && (changeX || changeY)) {\n\t\t\t\t\t\t\t\t\twindow.scrollTo(parent.scrollLeft, parent.scrollTop);\n\t\t\t\t\t\t\t\t\tsetPointerPosition(self.pointerX + changeX, self.pointerY + changeY);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\te = parent;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (dirty) {\n\t\t\t\t\t\t\tvar x = self.x,\n\t\t\t\t\t\t\t\ty = self.y,\n\t\t\t\t\t\t\t\tmin = 0.000001;\n\t\t\t\t\t\t\tif (x < min && x > -min) { //browsers don't handle super small decimals well.\n\t\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (y < min && y > -min) {\n\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\tself.deltaX = x - applyObj.data.rotation;\n\t\t\t\t\t\t\t\tapplyObj.data.rotation = self.rotation = x;\n\t\t\t\t\t\t\t\tapplyObj.setRatio(1); //note: instead of doing TweenLite.set(), as a performance optimization we skip right to the method that renders the transforms inside CSSPlugin. For old versions of IE, though, we do a normal TweenLite.set() to leverage its ability to re-reroute to an IE-specific 2D renderer.\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\t\t\t\t\tself.deltaY = y - scrollProxy.top();\n\t\t\t\t\t\t\t\t\t\tscrollProxy.top(y);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\t\t\t\t\tself.deltaX = x - scrollProxy.left();\n\t\t\t\t\t\t\t\t\t\tscrollProxy.left(x);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (xyMode) {\n\t\t\t\t\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\t\t\t\t\tself.deltaY = y - applyObj.data.y;\n\t\t\t\t\t\t\t\t\t\tapplyObj.data.y = y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\t\t\t\t\tself.deltaX = x - applyObj.data.x;\n\t\t\t\t\t\t\t\t\t\tapplyObj.data.x = x;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tapplyObj.setRatio(1); //note: instead of doing TweenLite.set(), as a performance optimization we skip right to the method that renders the transforms inside CSSPlugin. For old versions of IE, though, we do a normal TweenLite.set() to leverage its ability to re-reroute to an IE-specific 2D renderer.\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\t\t\t\t\tself.deltaY = y - parseFloat(target.style.top || 0);\n\t\t\t\t\t\t\t\t\t\ttarget.style.top = y + \"px\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\t\t\t\t\tself.deltaY = x - parseFloat(target.style.left || 0);\n\t\t\t\t\t\t\t\t\t\ttarget.style.left = x + \"px\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (hasDragCallback && !suppressEvents && !isDispatching) {\n\t\t\t\t\t\t\t\tisDispatching = true; //in case onDrag has an update() call (avoid endless loop)\n\t\t\t\t\t\t\t\t_dispatchEvent(self, \"drag\", \"onDrag\");\n\t\t\t\t\t\t\t\tisDispatching = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdirty = false;\n\t\t\t\t\t},\n\n\t\t\t\t\t//copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the ThrowPropsPlugin tween in an onUpdate to ensure things are synced and snapped.\n\t\t\t\t\tsyncXY = function(skipOnUpdate, skipSnap) {\n\t\t\t\t\t\tvar x = self.x,\n\t\t\t\t\t\t\ty = self.y,\n\t\t\t\t\t\t\tsnappedValue;\n\t\t\t\t\t\tif (!target._gsTransform && (xyMode || rotationMode)) { //just in case the _gsTransform got wiped, like if the user called clearProps on the transform or something (very rare), doing an x tween forces a re-parsing of the transforms and population of the _gsTransform.\n\t\t\t\t\t\t\tTweenLite.set(target, {x:\"+=0\", overwrite:false, data:\"_draggable\"});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (xyMode) {\n\t\t\t\t\t\t\tself.y = target._gsTransform.y;\n\t\t\t\t\t\t\tself.x = target._gsTransform.x;\n\t\t\t\t\t\t} else if (rotationMode) {\n\t\t\t\t\t\t\tself.x = self.rotation = target._gsTransform.rotation;\n\t\t\t\t\t\t} else if (scrollProxy) {\n\t\t\t\t\t\t\tself.y = scrollProxy.top();\n\t\t\t\t\t\t\tself.x = scrollProxy.left();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.y = parseInt(target.style.top, 10) || 0;\n\t\t\t\t\t\t\tself.x = parseInt(target.style.left, 10) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {\n\t\t\t\t\t\t\tif (snapXY) {\n\t\t\t\t\t\t\t\t_temp1.x = self.x;\n\t\t\t\t\t\t\t\t_temp1.y = self.y;\n\t\t\t\t\t\t\t\tsnappedValue = snapXY(_temp1);\n\t\t\t\t\t\t\t\tif (snappedValue.x !== self.x) {\n\t\t\t\t\t\t\t\t\tself.x = snappedValue.x;\n\t\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (snappedValue.y !== self.y) {\n\t\t\t\t\t\t\t\t\tself.y = snappedValue.y;\n\t\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (snapX) {\n\t\t\t\t\t\t\t\tsnappedValue = snapX(self.x);\n\t\t\t\t\t\t\t\tif (snappedValue !== self.x) {\n\t\t\t\t\t\t\t\t\tself.x = snappedValue;\n\t\t\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\t\t\tself.rotation = snappedValue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (snapY) {\n\t\t\t\t\t\t\t\tsnappedValue = snapY(self.y);\n\t\t\t\t\t\t\t\tif (snappedValue !== self.y) {\n\t\t\t\t\t\t\t\t\tself.y = snappedValue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (dirty) {\n\t\t\t\t\t\t\trender(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!skipOnUpdate) {\n\t\t\t\t\t\t\tself.deltaX = self.x - x;\n\t\t\t\t\t\t\tself.deltaY = self.y - y;\n\t\t\t\t\t\t\t_dispatchEvent(self, \"throwupdate\", \"onThrowUpdate\");\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tcalculateBounds = function() {\n\t\t\t\t\t\tvar bounds, targetBounds, snap, snapIsRaw;\n\t\t\t\t\t\thasBounds = false;\n\t\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\t\tscrollProxy.calibrate();\n\t\t\t\t\t\t\tself.minX = minX = -scrollProxy.maxScrollLeft();\n\t\t\t\t\t\t\tself.minY = minY = -scrollProxy.maxScrollTop();\n\t\t\t\t\t\t\tself.maxX = maxX = self.maxY = maxY = 0;\n\t\t\t\t\t\t\thasBounds = true;\n\t\t\t\t\t\t} else if (!!vars.bounds) {\n\t\t\t\t\t\t\tbounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}\n\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\tself.minX = minX = bounds.left;\n\t\t\t\t\t\t\t\tself.maxX = maxX = bounds.left + bounds.width;\n\t\t\t\t\t\t\t\tself.minY = minY = self.maxY = maxY = 0;\n\t\t\t\t\t\t\t} else if (vars.bounds.maxX !== undefined || vars.bounds.maxY !== undefined) {\n\t\t\t\t\t\t\t\tbounds = vars.bounds;\n\t\t\t\t\t\t\t\tself.minX = minX = bounds.minX;\n\t\t\t\t\t\t\t\tself.minY = minY = bounds.minY;\n\t\t\t\t\t\t\t\tself.maxX = maxX = bounds.maxX;\n\t\t\t\t\t\t\t\tself.maxY = maxY = bounds.maxY;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttargetBounds = _getBounds(target, target.parentNode);\n\t\t\t\t\t\t\t\tself.minX = minX = _getStyle(target, xProp) + bounds.left - targetBounds.left;\n\t\t\t\t\t\t\t\tself.minY = minY = _getStyle(target, yProp) + bounds.top - targetBounds.top;\n\t\t\t\t\t\t\t\tself.maxX = maxX = minX + (bounds.width - targetBounds.width);\n\t\t\t\t\t\t\t\tself.maxY = maxY = minY + (bounds.height - targetBounds.height);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (minX > maxX) {\n\t\t\t\t\t\t\t\tself.minX = maxX;\n\t\t\t\t\t\t\t\tself.maxX = maxX = minX;\n\t\t\t\t\t\t\t\tminX = self.minX;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (minY > maxY) {\n\t\t\t\t\t\t\t\tself.minY = maxY;\n\t\t\t\t\t\t\t\tself.maxY = maxY = minY;\n\t\t\t\t\t\t\t\tminY = self.minY;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\tself.minRotation = minX;\n\t\t\t\t\t\t\t\tself.maxRotation = maxX;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thasBounds = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (vars.liveSnap) {\n\t\t\t\t\t\t\tsnap = (vars.liveSnap === true) ? (vars.snap || {}) : vars.liveSnap;\n\t\t\t\t\t\t\tsnapIsRaw = (snap instanceof Array || typeof(snap) === \"function\");\n\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\tsnapX = buildSnapFunc((snapIsRaw ? snap : snap.rotation), minX, maxX, 1);\n\t\t\t\t\t\t\t\tsnapY = null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (snap.points) {\n\t\t\t\t\t\t\t\t\tsnapXY = buildPointSnapFunc((snapIsRaw ? snap : snap.points), minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\t\t\t\t\tsnapX = buildSnapFunc((snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft), minX, maxX, scrollProxy ? -1 : 1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\t\t\t\t\tsnapY = buildSnapFunc((snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop), minY, maxY, scrollProxy ? -1 : 1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t},\n\n\t\t\t\t\tonThrowComplete = function() {\n\t\t\t\t\t\tself.isThrowing = false;\n\t\t\t\t\t\t_dispatchEvent(self, \"throwcomplete\", \"onThrowComplete\");\n\t\t\t\t\t},\n\t\t\t\t\tonThrowOverwrite = function() {\n\t\t\t\t\t\tself.isThrowing = false;\n\t\t\t\t\t},\n\n\t\t\t\t\tanimate = function(throwProps, forceZeroVelocity) {\n\t\t\t\t\t\tvar snap, snapIsRaw, tween, overshootTolerance;\n\t\t\t\t\t\tif (throwProps && ThrowPropsPlugin) {\n\t\t\t\t\t\t\tif (throwProps === true) {\n\t\t\t\t\t\t\t\tsnap = vars.snap || vars.liveSnap || {};\n\t\t\t\t\t\t\t\tsnapIsRaw = (snap instanceof Array || typeof(snap) === \"function\");\n\t\t\t\t\t\t\t\tthrowProps = {resistance:(vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)};\n\t\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\t\tthrowProps.rotation = _parseThrowProps(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\t\t\t\t\tthrowProps[xProp] = _parseThrowProps(self, snapIsRaw ? snap : snap.points || snap.x || snap.left || snap.scrollLeft, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === \"x\"));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\t\t\t\t\tthrowProps[yProp] = _parseThrowProps(self, snapIsRaw ? snap : snap.points || snap.y || snap.top || snap.scrollTop, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === \"y\"));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (snap.points || (snap instanceof Array && typeof(snap[0]) === \"object\")) {\n\t\t\t\t\t\t\t\t\t\tthrowProps.linkedProps = xProp + \",\" + yProp;\n\t\t\t\t\t\t\t\t\t\tthrowProps.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a \"radius\" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that \"skipSnap\" parameter is true for syncXY.\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.isThrowing = true;\n\t\t\t\t\t\t\tovershootTolerance = (!isNaN(vars.overshootTolerance)) ? vars.overshootTolerance : (vars.edgeResistance === 1) ? 0 : (1 - self.edgeResistance) + 0.2;\n\t\t\t\t\t\t\tself.tween = tween = ThrowPropsPlugin.to(scrollProxy || target, {throwProps:throwProps, data:\"_draggable\", ease:(vars.ease || _globals.Power3.easeOut), onComplete:onThrowComplete, onOverwrite:onThrowOverwrite, onUpdate:(vars.fastMode ? _dispatchEvent : syncXY), onUpdateParams:(vars.fastMode ? [self, \"onthrowupdate\", \"onThrowUpdate\"] : (snap && snap.radius) ? [false, true] : _emptyArray)}, Math.max(vars.minDuration || 0, vars.maxDuration || 0) || 2, (!isNaN(vars.minDuration) ? vars.minDuration : (overshootTolerance === 0 || (typeof(throwProps) === \"object\" && throwProps.resistance > 1000)) ? 0 : 0.5), overshootTolerance);\n\t\t\t\t\t\t\tif (!vars.fastMode) {\n\t\t\t\t\t\t\t\t//to populate the end values, we just scrub the tween to the end, record the values, and then jump back to the beginning.\n\t\t\t\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\t\t\t\tscrollProxy._suspendTransforms = true; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttween.render(tween.duration(), true, true);\n\t\t\t\t\t\t\t\tsyncXY(true, true);\n\t\t\t\t\t\t\t\tself.endX = self.x;\n\t\t\t\t\t\t\t\tself.endY = self.y;\n\t\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\t\tself.endRotation = self.x;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttween.play(0);\n\t\t\t\t\t\t\t\tsyncXY(true, true);\n\t\t\t\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\t\t\t\tscrollProxy._suspendTransforms = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasBounds) {\n\t\t\t\t\t\t\tself.applyBounds();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tupdateMatrix = function(shiftStart) {\n\t\t\t\t\t\tvar start = matrix || [1,0,0,1,0,0],\n\t\t\t\t\t\t\ta, b, c, d, tx, ty, determinant, pointerX, pointerY;\n\t\t\t\t\t\tmatrix = _getConcatenatedMatrix(target.parentNode, true);\n\t\t\t\t\t\tif (shiftStart && self.isPressed && start.join(\",\") !== matrix.join(\",\")) { //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.\n\t\t\t\t\t\t\ta = start[0];\n\t\t\t\t\t\t\tb = start[1];\n\t\t\t\t\t\t\tc = start[2];\n\t\t\t\t\t\t\td = start[3];\n\t\t\t\t\t\t\ttx = start[4];\n\t\t\t\t\t\t\tty = start[5];\n\t\t\t\t\t\t\tdeterminant = (a * d - b * c);\n\t\t\t\t\t\t\tpointerX = startPointerX * (d / determinant) + startPointerY * (-c / determinant) + ((c * ty - d * tx) / determinant);\n\t\t\t\t\t\t\tpointerY = startPointerX * (-b / determinant) + startPointerY * (a / determinant) + (-(a * ty - b * tx) / determinant);\n\t\t\t\t\t\t\tstartPointerY = pointerX * matrix[1] + pointerY * matrix[3] + matrix[5];\n\t\t\t\t\t\t\tstartPointerX = pointerX * matrix[0] + pointerY * matrix[2] + matrix[4];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!matrix[1] && !matrix[2] && matrix[0] == 1 && matrix[3] == 1 && matrix[4] == 0 && matrix[5] == 0) { //if there are no transforms, we can optimize performance by not factoring in the matrix\n\t\t\t\t\t\t\tmatrix = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t},\n\n\t\t\t\t\trecordStartPositions = function() {\n\t\t\t\t\t\tvar edgeTolerance = 1 - self.edgeResistance;\n\t\t\t\t\t\tupdateMatrix(false);\n\t\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t\tstartPointerX = self.pointerX * matrix[0] + self.pointerY * matrix[2] + matrix[4]; //translate to local coordinate system\n\t\t\t\t\t\t\tstartPointerY = self.pointerX * matrix[1] + self.pointerY * matrix[3] + matrix[5];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (dirty) {\n\t\t\t\t\t\t\tsetPointerPosition(self.pointerX, self.pointerY);\n\t\t\t\t\t\t\trender(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\t\tcalculateBounds();\n\t\t\t\t\t\t\tstartElementY = scrollProxy.top();\n\t\t\t\t\t\t\tstartElementX = scrollProxy.left();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.\n\t\t\t\t\t\t\tif (isTweening()) {\n\t\t\t\t\t\t\t\tsyncXY(true, true);\n\t\t\t\t\t\t\t\tcalculateBounds();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tself.applyBounds();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\trotationOrigin = self.rotationOrigin = _localToGlobal(target, {x:0, y:0});\n\t\t\t\t\t\t\t\tsyncXY(true, true);\n\t\t\t\t\t\t\t\tstartElementX = self.x; //starting rotation (x always refers to rotation in type:\"rotation\", measured in degrees)\n\t\t\t\t\t\t\t\tstartElementY = self.y = Math.atan2(rotationOrigin.y - self.pointerY, self.pointerX - rotationOrigin.x) * _RAD2DEG;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstartScrollTop = target.parentNode ? target.parentNode.scrollTop || 0 : 0;\n\t\t\t\t\t\t\t\tstartScrollLeft = target.parentNode ? target.parentNode.scrollLeft || 0 : 0;\n\t\t\t\t\t\t\t\tstartElementY = _getStyle(target, yProp); //record the starting top and left values so that we can just add the mouse's movement to them later.\n\t\t\t\t\t\t\t\tstartElementX = _getStyle(target, xProp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (hasBounds && edgeTolerance) {\n\t\t\t\t\t\t\tif (startElementX > maxX) {\n\t\t\t\t\t\t\t\tstartElementX = maxX + (startElementX - maxX) / edgeTolerance;\n\t\t\t\t\t\t\t} else if (startElementX < minX) {\n\t\t\t\t\t\t\t\tstartElementX = minX - (minX - startElementX) / edgeTolerance;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!rotationMode) {\n\t\t\t\t\t\t\t\tif (startElementY > maxY) {\n\t\t\t\t\t\t\t\t\tstartElementY = maxY + (startElementY - maxY) / edgeTolerance;\n\t\t\t\t\t\t\t\t} else if (startElementY < minY) {\n\t\t\t\t\t\t\t\t\tstartElementY = minY - (minY - startElementY) / edgeTolerance;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.startX = startElementX;\n\t\t\t\t\t\tself.startY = startElementY;\n\t\t\t\t\t},\n\n\t\t\t\t\tisTweening = function() {\n\t\t\t\t\t\treturn (self.tween && self.tween.isActive());\n\t\t\t\t\t},\n\n\t\t\t\t\tremovePlaceholder = function() {\n\t\t\t\t\t\tif (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) { //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.\n\t\t\t\t\t\t\t_placeholderDiv.parentNode.removeChild(_placeholderDiv);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tbuildSnapFunc = function(snap, min, max, factor) {\n\t\t\t\t\t\tif (min == null) {\n\t\t\t\t\t\t\tmin = -_max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max == null) {\n\t\t\t\t\t\t\tmax = _max;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof(snap) === \"function\") {\n\t\t\t\t\t\t\treturn function(n) {\n\t\t\t\t\t\t\t\tvar edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\t\t\t\t\t\t\t\treturn snap.call(self, (n > max ? max + (n - max) * edgeTolerance : (n < min) ? min + (n - min) * edgeTolerance : n)) * factor;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (snap instanceof Array) {\n\t\t\t\t\t\t\treturn function(n) {\n\t\t\t\t\t\t\t\tvar i = snap.length,\n\t\t\t\t\t\t\t\t\tclosest = 0,\n\t\t\t\t\t\t\t\t\tabsDif = _max,\n\t\t\t\t\t\t\t\t\tval, dif;\n\t\t\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\t\t\tval = snap[i];\n\t\t\t\t\t\t\t\t\tdif = val - n;\n\t\t\t\t\t\t\t\t\tif (dif < 0) {\n\t\t\t\t\t\t\t\t\t\tdif = -dif;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (dif < absDif && val >= min && val <= max) {\n\t\t\t\t\t\t\t\t\t\tclosest = i;\n\t\t\t\t\t\t\t\t\t\tabsDif = dif;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn snap[closest];\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn isNaN(snap) ? function(n) { return n; } : function() { return snap * factor; };\n\t\t\t\t\t},\n\n\t\t\t\t\tbuildPointSnapFunc = function(snap, minX, maxX, minY, maxY, radius, factor) {\n\t\t\t\t\t\tradius = (radius && radius < _max) ? radius * radius : _max; //so we don't have to Math.sqrt() in the functions. Performance optimization.\n\t\t\t\t\t\tif (typeof(snap) === \"function\") {\n\t\t\t\t\t\t\treturn function(point) {\n\t\t\t\t\t\t\t\tvar edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,\n\t\t\t\t\t\t\t\t\tx = point.x,\n\t\t\t\t\t\t\t\t\ty = point.y,\n\t\t\t\t\t\t\t\t\tresult, dx, dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\t\t\t\t\t\t\t\tpoint.x = x = (x > maxX ? maxX + (x - maxX) * edgeTolerance : (x < minX) ? minX + (x - minX) * edgeTolerance : x);\n\t\t\t\t\t\t\t\tpoint.y = y = (y > maxY ? maxY + (y - maxY) * edgeTolerance : (y < minY) ? minY + (y - minY) * edgeTolerance : y);\n\t\t\t\t\t\t\t\tresult = snap.call(self, point);\n\t\t\t\t\t\t\t\tif (result !== point) {\n\t\t\t\t\t\t\t\t\tpoint.x = result.x;\n\t\t\t\t\t\t\t\t\tpoint.y = result.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (factor !== 1) {\n\t\t\t\t\t\t\t\t\tpoint.x *= factor;\n\t\t\t\t\t\t\t\t\tpoint.y *= factor;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (radius < _max) {\n\t\t\t\t\t\t\t\t\tdx = point.x - x;\n\t\t\t\t\t\t\t\t\tdy = point.y - y;\n\t\t\t\t\t\t\t\t\tif (dx * dx + dy * dy > radius) {\n\t\t\t\t\t\t\t\t\t\tpoint.x = x;\n\t\t\t\t\t\t\t\t\t\tpoint.y = y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn point;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (snap instanceof Array) {\n\t\t\t\t\t\t\treturn function(p) {\n\t\t\t\t\t\t\t\tvar i = snap.length,\n\t\t\t\t\t\t\t\t\tclosest = 0,\n\t\t\t\t\t\t\t\t\tminDist = _max,\n\t\t\t\t\t\t\t\t\tx, y, point, dist;\n\t\t\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\t\t\tpoint = snap[i];\n\t\t\t\t\t\t\t\t\tx = point.x - p.x;\n\t\t\t\t\t\t\t\t\ty = point.y - p.y;\n\t\t\t\t\t\t\t\t\tdist = x * x + y * y;\n\t\t\t\t\t\t\t\t\tif (dist < minDist) {\n\t\t\t\t\t\t\t\t\t\tclosest = i;\n\t\t\t\t\t\t\t\t\t\tminDist = dist;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn (minDist <= radius) ? snap[closest] : p;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn function(n) { return n; };\n\t\t\t\t\t},\n\n\t\t\t\t\t//called when the mouse is pressed (or touch starts)\n\t\t\t\t\tonPress = function(e, force) {\n\t\t\t\t\t\tvar i;\n\t\t\t\t\t\tif (!enabled || self.isPressed || !e || ((e.type === \"mousedown\" || e.type === \"pointerdown\") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type])) { //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick \"click\" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinterrupted = isTweening();\n\t\t\t\t\t\tself.pointerEvent = e;\n\t\t\t\t\t\tif (_touchEventLookup[e.type]) { //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.\n\t\t\t\t\t\t\ttouchEventTarget = (e.type.indexOf(\"touch\") !== -1) ? (e.currentTarget || e.target) : _doc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be \"MSPointerDown\" or \"pointerdown\".\n\t\t\t\t\t\t\t_addListener(touchEventTarget, \"touchend\", onRelease);\n\t\t\t\t\t\t\t_addListener(touchEventTarget, \"touchmove\", onMove);\n\t\t\t\t\t\t\t_addListener(touchEventTarget, \"touchcancel\", onRelease);\n\t\t\t\t\t\t\t_addListener(_doc, \"touchstart\", _onMultiTouchDocument);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttouchEventTarget = null;\n\t\t\t\t\t\t\t_addListener(_doc, \"mousemove\", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttouchDragAxis = null;\n\t\t\t\t\t\t_addListener(_doc, \"mouseup\", onRelease);\n\t\t\t\t\t\tif (e && e.target) {\n\t\t\t\t\t\t\t_addListener(e.target, \"mouseup\", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable=\"true\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tisClicking = (isClickable.call(self, e.target) && vars.dragClickables === false && !force);\n\t\t\t\t\t\tif (isClicking) {\n\t\t\t\t\t\t\t_addListener(e.target, \"change\", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a \"change\" event instead.\n\t\t\t\t\t\t\t_dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\t\t\t\t\t\t\t_dispatchEvent(self, \"press\", \"onPress\");\n\t\t\t\t\t\t\t_setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable=\"true\" (otherwise user couldn't drag to select text)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tallowNativeTouchScrolling = (!touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2))) ? false : allowX ? \"y\" : \"x\"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.\n\t\t\t\t\t\tif (_isOldIE) {\n\t\t\t\t\t\t\te = _populateIEEvent(e, true);\n\t\t\t\t\t\t} else if (!allowNativeTouchScrolling && !self.allowEventDefault) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tif (e.preventManipulation) {\n\t\t\t\t\t\t\t\te.preventManipulation();  //for some Microsoft browsers\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (e.changedTouches) { //touch events store the data slightly differently\n\t\t\t\t\t\t\te = touch = e.changedTouches[0];\n\t\t\t\t\t\t\ttouchID = e.identifier;\n\t\t\t\t\t\t} else if (e.pointerId) {\n\t\t\t\t\t\t\ttouchID = e.pointerId; //for some Microsoft browsers\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttouch = touchID = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_dragCount++;\n\t\t\t\t\t\t_addToRenderQueue(render); //causes the Draggable to render on each \"tick\" of TweenLite.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)\n\t\t\t\t\t\tstartPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove\n\t\t\t\t\t\tstartPointerX = self.pointerX = e.pageX;\n\t\t\t\t\t\t_dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\t\t\t\t\t\tif (allowNativeTouchScrolling || self.autoScroll) {\n\t\t\t\t\t\t\t_recordMaxScrolls(target.parentNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) { //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.\n\t\t\t\t\t\t\t_placeholderDiv.style.width = target.parentNode.scrollWidth + \"px\";\n\t\t\t\t\t\t\ttarget.parentNode.appendChild(_placeholderDiv);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecordStartPositions();\n\t\t\t\t\t\tif (self.tween) {\n\t\t\t\t\t\t\tself.tween.kill();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.isThrowing = false;\n\t\t\t\t\t\tTweenLite.killTweensOf(scrollProxy || target, true, killProps); //in case the user tries to drag it before the last tween is done.\n\t\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\t\tTweenLite.killTweensOf(target, true, {scrollTo:1}); //just in case the original target's scroll position is being tweened somewhere else.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.tween = self.lockedAxis = null;\n\t\t\t\t\t\tif (vars.zIndexBoost || (!rotationMode && !scrollProxy && vars.zIndexBoost !== false)) {\n\t\t\t\t\t\t\ttarget.style.zIndex = Draggable.zIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.isPressed = true;\n\t\t\t\t\t\thasDragCallback = !!(vars.onDrag || self._listeners.drag);\n\t\t\t\t\t\tif (!rotationMode && (vars.cursor !== false || vars.activeCursor)) {\n\t\t\t\t\t\t\ti = triggers.length;\n\t\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\t\t_setStyle(triggers[i], \"cursor\", vars.activeCursor || vars.cursor || \"move\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_dispatchEvent(self, \"press\", \"onPress\");\n\t\t\t\t\t},\n\n\t\t\t\t\t//called every time the mouse/touch moves\n\t\t\t\t\tonMove = function(e) {\n\t\t\t\t\t\tvar originalEvent = e,\n\t\t\t\t\t\t\ttouches, pointerX, pointerY, i, dx, dy;\n\t\t\t\t\t\tif (!enabled || _isMultiTouching || !self.isPressed || !e) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.pointerEvent = e;\n\t\t\t\t\t\ttouches = e.changedTouches;\n\t\t\t\t\t\tif (touches) { //touch events store the data slightly differently\n\t\t\t\t\t\t\te = touches[0];\n\t\t\t\t\t\t\tif (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n\t\t\t\t\t\t\t\ti = touches.length;\n\t\t\t\t\t\t\t\twhile (--i > -1 && (e = touches[i]).identifier !== touchID) {}\n\t\t\t\t\t\t\t\tif (i < 0) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (e.pointerId && touchID && e.pointerId !== touchID) { //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_isOldIE) {\n\t\t\t\t\t\t\te = _populateIEEvent(e, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) { //Android browsers force us to decide on the first \"touchmove\" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a \"touchcancel\" will be fired and then no \"touchmove\" or \"touchend\" will fire during the scrolling (no good).\n\t\t\t\t\t\t\t\tpointerX = e.pageX;\n\t\t\t\t\t\t\t\tpointerY = e.pageY;\n\t\t\t\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t\t\t\ti = pointerX * matrix[0] + pointerY * matrix[2] + matrix[4];\n\t\t\t\t\t\t\t\t\tpointerY = pointerX * matrix[1] + pointerY * matrix[3] + matrix[5];\n\t\t\t\t\t\t\t\t\tpointerX = i;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdx = Math.abs(pointerX - startPointerX);\n\t\t\t\t\t\t\t\tdy = Math.abs(pointerY - startPointerY);\n\t\t\t\t\t\t\t\tif ((dx !== dy && (dx > minimumMovement || dy > minimumMovement)) || (_isAndroid && allowNativeTouchScrolling === touchDragAxis)) {\n\t\t\t\t\t\t\t\t\ttouchDragAxis = (dx > dy && allowX) ? \"x\" : \"y\";\n\t\t\t\t\t\t\t\t\tif (self.vars.lockAxisOnTouchScroll !== false) {\n\t\t\t\t\t\t\t\t\t\tself.lockedAxis = (touchDragAxis === \"x\") ? \"y\" : \"x\";\n\t\t\t\t\t\t\t\t\t\tif (typeof(self.vars.onLockAxis) === \"function\") {\n\t\t\t\t\t\t\t\t\t\t\tself.vars.onLockAxis.call(self, originalEvent);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n\t\t\t\t\t\t\t\t\t\tonRelease(originalEvent);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!self.allowEventDefault && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling !== touchDragAxis)) && originalEvent.cancelable !== false) {\n\t\t\t\t\t\t\t\toriginalEvent.preventDefault();\n\t\t\t\t\t\t\t\tif (originalEvent.preventManipulation) { //for some Microsoft browsers\n\t\t\t\t\t\t\t\t\toriginalEvent.preventManipulation();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.autoScroll) {\n\t\t\t\t\t\t\tcheckAutoScrollBounds = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetPointerPosition(e.pageX, e.pageY);\n\t\t\t\t\t},\n\n\t\t\t\t\tsetPointerPosition = function(pointerX, pointerY) {\n\t\t\t\t\t\tvar dragTolerance = 1 - self.dragResistance,\n\t\t\t\t\t\t\tedgeTolerance = 1 - self.edgeResistance,\n\t\t\t\t\t\t\txChange, yChange, x, y, dif, temp;\n\n\t\t\t\t\t\tself.pointerX = pointerX;\n\t\t\t\t\t\tself.pointerY = pointerY;\n\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\ty = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;\n\t\t\t\t\t\t\tdif = self.y - y;\n\t\t\t\t\t\t\tif (dif > 180) {\n\t\t\t\t\t\t\t\tstartElementY -= 360;\n\t\t\t\t\t\t\t\tself.y = y;\n\t\t\t\t\t\t\t} else if (dif < -180) {\n\t\t\t\t\t\t\t\tstartElementY += 360;\n\t\t\t\t\t\t\t\tself.y = y;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {\n\t\t\t\t\t\t\t\tself.y = y;\n\t\t\t\t\t\t\t\tx = startElementX + (startElementY - y) * dragTolerance;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tx = startElementX;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t\t\ttemp = pointerX * matrix[0] + pointerY * matrix[2] + matrix[4];\n\t\t\t\t\t\t\t\tpointerY = pointerX * matrix[1] + pointerY * matrix[3] + matrix[5];\n\t\t\t\t\t\t\t\tpointerX = temp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tyChange = (pointerY - startPointerY);\n\t\t\t\t\t\t\txChange = (pointerX - startPointerX);\n\t\t\t\t\t\t\tif (yChange < minimumMovement && yChange > -minimumMovement) {\n\t\t\t\t\t\t\t\tyChange = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (xChange < minimumMovement && xChange > -minimumMovement) {\n\t\t\t\t\t\t\t\txChange = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {\n\t\t\t\t\t\t\t\ttemp = self.lockedAxis;\n\t\t\t\t\t\t\t\tif (!temp) {\n\t\t\t\t\t\t\t\t\tself.lockedAxis = temp = (allowX && Math.abs(xChange) > Math.abs(yChange)) ? \"y\" : allowY ? \"x\" : null;\n\t\t\t\t\t\t\t\t\tif (temp && typeof(self.vars.onLockAxis) === \"function\") {\n\t\t\t\t\t\t\t\t\t\tself.vars.onLockAxis.call(self, self.pointerEvent);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (temp === \"y\") {\n\t\t\t\t\t\t\t\t\tyChange = 0;\n\t\t\t\t\t\t\t\t} else if (temp === \"x\") {\n\t\t\t\t\t\t\t\t\txChange = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tx = startElementX + xChange * dragTolerance;\n\t\t\t\t\t\t\ty = startElementY + yChange * dragTolerance;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((snapX || snapY || snapXY) && (self.x !== x || (self.y !== y && !rotationMode))) {\n\t\t\t\t\t\t\tif (snapXY) {\n\t\t\t\t\t\t\t\t_temp1.x = x;\n\t\t\t\t\t\t\t\t_temp1.y = y;\n\t\t\t\t\t\t\t\ttemp = snapXY(_temp1);\n\t\t\t\t\t\t\t\tx = temp.x;\n\t\t\t\t\t\t\t\ty = temp.y;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (snapX) {\n\t\t\t\t\t\t\t\tx = snapX(x);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (snapY) {\n\t\t\t\t\t\t\t\ty = snapY(y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasBounds) {\n\t\t\t\t\t\t\tif (x > maxX) {\n\t\t\t\t\t\t\t\tx = maxX + (x - maxX) * edgeTolerance;\n\t\t\t\t\t\t\t} else if (x < minX) {\n\t\t\t\t\t\t\t\tx = minX + (x - minX) * edgeTolerance;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!rotationMode) {\n\t\t\t\t\t\t\t\tif (y > maxY) {\n\t\t\t\t\t\t\t\t\ty = maxY + (y - maxY) * edgeTolerance;\n\t\t\t\t\t\t\t\t} else if (y < minY) {\n\t\t\t\t\t\t\t\t\ty = minY + (y - minY) * edgeTolerance;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!rotationMode && !matrix) {\n\t\t\t\t\t\t\tx = Math.round(x); //helps work around an issue with some Win Touch devices\n\t\t\t\t\t\t\ty = Math.round(y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.x !== x || (self.y !== y && !rotationMode)) {\n\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\tself.endRotation = self.x = self.endX = x;\n\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\t\t\t\tself.y = self.endY = y;\n\t\t\t\t\t\t\t\t\tdirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a \"tick\" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\t\t\t\tself.x = self.endX = x;\n\t\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!self.isDragging && self.isPressed) {\n\t\t\t\t\t\t\t\tself.isDragging = true;\n\t\t\t\t\t\t\t\t_dispatchEvent(self, \"dragstart\", \"onDragStart\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t//called when the mouse/touch is released\n\t\t\t\t\tonRelease = function(e, force) {\n\t\t\t\t\t\tif (!enabled || !self.isPressed || (e && touchID != null && !force && ((e.pointerId && e.pointerId !== touchID) || (e.changedTouches && !_hasTouchID(e.changedTouches, touchID))))) {  //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.isPressed = false;\n\t\t\t\t\t\tvar originalEvent = e,\n\t\t\t\t\t\t\twasDragging = self.isDragging,\n\t\t\t\t\t\t\tisContextMenuRelease = (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2)),\n\t\t\t\t\t\t\tplaceholderDelayedCall = TweenLite.delayedCall(0.001, removePlaceholder),\n\t\t\t\t\t\t\ttouches, i, syntheticEvent, eventTarget, syntheticClick;\n\t\t\t\t\t\tif (touchEventTarget) {\n\t\t\t\t\t\t\t_removeListener(touchEventTarget, \"touchend\", onRelease);\n\t\t\t\t\t\t\t_removeListener(touchEventTarget, \"touchmove\", onMove);\n\t\t\t\t\t\t\t_removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\t\t\t\t\t\t\t_removeListener(_doc, \"touchstart\", _onMultiTouchDocument);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_removeListener(_doc, \"mousemove\", onMove);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_removeListener(_doc, \"mouseup\", onRelease);\n\t\t\t\t\t\tif (e && e.target) {\n\t\t\t\t\t\t\t_removeListener(e.target, \"mouseup\", onRelease);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdirty = false;\n\t\t\t\t\t\tif (isClicking && !isContextMenuRelease) {\n\t\t\t\t\t\t\tif (e) {\n\t\t\t\t\t\t\t\t_removeListener(e.target, \"change\", onRelease);\n\t\t\t\t\t\t\t\tself.pointerEvent = originalEvent;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_setSelectable(triggers, false);\n\t\t\t\t\t\t\t_dispatchEvent(self, \"release\", \"onRelease\");\n\t\t\t\t\t\t\t_dispatchEvent(self, \"click\", \"onClick\");\n\t\t\t\t\t\t\tisClicking = false;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_removeFromRenderQueue(render);\n\t\t\t\t\t\tif (!rotationMode) {\n\t\t\t\t\t\t\ti = triggers.length;\n\t\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\t\t_setStyle(triggers[i], \"cursor\", vars.cursor || (vars.cursor !== false ? \"move\" : null));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (wasDragging) {\n\t\t\t\t\t\t\tdragEndTime = _lastDragTime = _getTime();\n\t\t\t\t\t\t\tself.isDragging = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_dragCount--;\n\t\t\t\t\t\tif (e) {\n\t\t\t\t\t\t\tif (_isOldIE) {\n\t\t\t\t\t\t\t\te = _populateIEEvent(e, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttouches = e.changedTouches;\n\t\t\t\t\t\t\tif (touches) { //touch events store the data slightly differently\n\t\t\t\t\t\t\t\te = touches[0];\n\t\t\t\t\t\t\t\tif (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n\t\t\t\t\t\t\t\t\ti = touches.length;\n\t\t\t\t\t\t\t\t\twhile (--i > -1 && (e = touches[i]).identifier !== touchID) {}\n\t\t\t\t\t\t\t\t\tif (i < 0) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.pointerEvent = originalEvent;\n\t\t\t\t\t\t\tself.pointerX = e.pageX;\n\t\t\t\t\t\t\tself.pointerY = e.pageY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isContextMenuRelease && originalEvent) {\n\t\t\t\t\t\t\toriginalEvent.preventDefault();\n\t\t\t\t\t\t\tif (originalEvent.preventManipulation) {\n\t\t\t\t\t\t\t\toriginalEvent.preventManipulation();  //for some Microsoft browsers\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_dispatchEvent(self, \"release\", \"onRelease\");\n\t\t\t\t\t\t} else if (originalEvent && !wasDragging) {\n\t\t\t\t\t\t\tif (interrupted && (vars.snap || vars.bounds)) { //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)\n\t\t\t\t\t\t\t\tanimate(vars.throwProps);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_dispatchEvent(self, \"release\", \"onRelease\");\n\t\t\t\t\t\t\tif ((!_isAndroid || originalEvent.type !== \"touchmove\") && originalEvent.type.indexOf(\"cancel\") === -1) { //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a \"click\".\n\t\t\t\t\t\t\t\t_dispatchEvent(self, \"click\", \"onClick\");\n\t\t\t\t\t\t\t\tif (_getTime() - clickTime < 300) {\n\t\t\t\t\t\t\t\t\t_dispatchEvent(self, \"doubleclick\", \"onDoubleClick\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\teventTarget = originalEvent.target || originalEvent.srcElement || target; //old IE uses srcElement\n\t\t\t\t\t\t\t\tclickTime = _getTime();\n\t\t\t\t\t\t\t\tsyntheticClick = function () { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n\t\t\t\t\t\t\t\t\tif (clickTime !== clickDispatch && self.enabled() && !self.isPressed) {\n\t\t\t\t\t\t\t\t\t\tif (eventTarget.click) { //some browsers (like mobile Safari) don't properly trigger the click event\n\t\t\t\t\t\t\t\t\t\t\teventTarget.click();\n\t\t\t\t\t\t\t\t\t\t} else if (_doc.createEvent) {\n\t\t\t\t\t\t\t\t\t\t\tsyntheticEvent = _doc.createEvent(\"MouseEvents\");\n\t\t\t\t\t\t\t\t\t\t\tsyntheticEvent.initMouseEvent(\"click\", true, true, window, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);\n\t\t\t\t\t\t\t\t\t\t\teventTarget.dispatchEvent(syntheticEvent);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tif (!_isAndroid && !originalEvent.defaultPrevented) { //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.\n\t\t\t\t\t\t\t\t\tTweenLite.delayedCall(0.00001, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the \"click\" event with \"capture\" false which solved the video-click-to-play issue, but it would allow the \"click\" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click.\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanimate(vars.throwProps); //will skip if throwProps isn't defined or ThrowPropsPlugin isn't loaded.\n\t\t\t\t\t\t\tif (!_isOldIE && !self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling === touchDragAxis)) && originalEvent.cancelable !== false) {\n\t\t\t\t\t\t\t\toriginalEvent.preventDefault();\n\t\t\t\t\t\t\t\tif (originalEvent.preventManipulation) {\n\t\t\t\t\t\t\t\t\toriginalEvent.preventManipulation();  //for some Microsoft browsers\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_dispatchEvent(self, \"release\", \"onRelease\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isTweening()) {\n\t\t\t\t\t\t\tplaceholderDelayedCall.duration( self.tween.duration() ); //sync the timing so that the placeholder DIV gets\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (wasDragging) {\n\t\t\t\t\t\t\t_dispatchEvent(self, \"dragend\", \"onDragEnd\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\n\t\t\t\t\tupdateScroll = function(e) {\n\t\t\t\t\t\tif (e && self.isDragging && !scrollProxy) {\n\t\t\t\t\t\t\tvar parent = e.target || e.srcElement || target.parentNode,\n\t\t\t\t\t\t\t\tdeltaX = parent.scrollLeft - parent._gsScrollX,\n\t\t\t\t\t\t\t\tdeltaY = parent.scrollTop - parent._gsScrollY;\n\t\t\t\t\t\t\tif (deltaX || deltaY) {\n\t\t\t\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t\t\t\tstartPointerX -= deltaX * matrix[0] + deltaY * matrix[2];\n\t\t\t\t\t\t\t\t\tstartPointerY -= deltaY * matrix[3] + deltaX * matrix[1];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tstartPointerX -= deltaX;\n\t\t\t\t\t\t\t\t\tstartPointerY -= deltaY;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tparent._gsScrollX += deltaX;\n\t\t\t\t\t\t\t\tparent._gsScrollY += deltaY;\n\t\t\t\t\t\t\t\tsetPointerPosition(self.pointerX, self.pointerY);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tonClick = function(e) { //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.\n\t\t\t\t\t\tvar time = _getTime(),\n\t\t\t\t\t\t\trecentlyClicked = (time - clickTime < 40),\n\t\t\t\t\t\t\trecentlyDragged = (time - dragEndTime < 40),\n\t\t\t\t\t\t\talreadyDispatched = (recentlyClicked && clickDispatch === clickTime),\n\t\t\t\t\t\t\tisModern = !!e.preventDefault,\n\t\t\t\t\t\t\tdefaultPrevented = (self.pointerEvent && self.pointerEvent.defaultPrevented),\n\t\t\t\t\t\t\talreadyDispatchedTrusted = (recentlyClicked && trustedClickDispatch === clickTime),\n\t\t\t\t\t\t\ttrusted = e.isTrusted || (e.isTrusted == null && recentlyClicked && alreadyDispatched); //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic \"click\" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?\n\t\t\t\t\t\tif (isModern && (alreadyDispatched || (recentlyDragged && self.vars.suppressClickOnDrag !== false) )) {\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || (trusted !== alreadyDispatchedTrusted))) { //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)\n\t\t\t\t\t\t\tif (trusted && alreadyDispatched) {\n\t\t\t\t\t\t\t\ttrustedClickDispatch = clickTime;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tclickDispatch = clickTime;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.isPressed || recentlyDragged || recentlyClicked) {\n\t\t\t\t\t\t\tif (!isModern) {\n\t\t\t\t\t\t\t\te.returnValue = false;\n\t\t\t\t\t\t\t} else if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tif (e.preventManipulation) {\n\t\t\t\t\t\t\t\t\te.preventManipulation();  //for some Microsoft browsers\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tlocalizePoint = function(p) {\n\t\t\t\t\t\treturn matrix ? {x:p.x * matrix[0] + p.y * matrix[2] + matrix[4], y:p.x * matrix[1] + p.y * matrix[3] + matrix[5]} : {x:p.x, y:p.y};\n\t\t\t\t\t};\n\n\t\t\t\told = Draggable.get(this.target);\n\t\t\t\tif (old) {\n\t\t\t\t\told.kill(); // avoids duplicates (an element can only be controlled by one Draggable)\n\t\t\t\t}\n\n\t\t\t\t//give the user access to start/stop dragging...\n\t\t\t\tthis.startDrag = function(e, align) {\n\t\t\t\t\tvar r1, r2, p1, p2;\n\t\t\t\t\tonPress(e || self.pointerEvent, true);\n\t\t\t\t\t//if the pointer isn't on top of the element, adjust things accordingly\n\t\t\t\t\tif (align && !self.hitTest(e || self.pointerEvent)) {\n\t\t\t\t\t\tr1 = _parseRect(e || self.pointerEvent);\n\t\t\t\t\t\tr2 = _parseRect(target);\n\t\t\t\t\t\tp1 = localizePoint({x:r1.left + r1.width / 2, y:r1.top + r1.height / 2});\n\t\t\t\t\t\tp2 = localizePoint({x:r2.left + r2.width / 2, y:r2.top + r2.height / 2});\n\t\t\t\t\t\tstartPointerX -= p1.x - p2.x;\n\t\t\t\t\t\tstartPointerY -= p1.y - p2.y;\n\t\t\t\t\t}\n\t\t\t\t\tif (!self.isDragging) {\n\t\t\t\t\t\tself.isDragging = true;\n\t\t\t\t\t\t_dispatchEvent(self, \"dragstart\", \"onDragStart\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.drag = onMove;\n\t\t\t\tthis.endDrag = function(e) {\n\t\t\t\t\tonRelease(e || self.pointerEvent, true);\n\t\t\t\t};\n\t\t\t\tthis.timeSinceDrag = function() {\n\t\t\t\t\treturn self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;\n\t\t\t\t};\n\t\t\t\tthis.timeSinceClick = function() {\n\t\t\t\t\treturn (_getTime() - clickTime) / 1000;\n\t\t\t\t};\n\t\t\t\tthis.hitTest = function(target, threshold) {\n\t\t\t\t\treturn Draggable.hitTest(self.target, target, threshold);\n\t\t\t\t};\n\n\t\t\t\tthis.getDirection = function(from, diagonalThreshold) { //from can be \"start\" (default), \"velocity\", or an element\n\t\t\t\t\tvar mode = (from === \"velocity\" && ThrowPropsPlugin) ? from : (typeof(from) === \"object\" && !rotationMode) ? \"element\" : \"start\",\n\t\t\t\t\t\txChange, yChange, ratio, direction, r1, r2;\n\t\t\t\t\tif (mode === \"element\") {\n\t\t\t\t\t\tr1 = _parseRect(self.target);\n\t\t\t\t\t\tr2 = _parseRect(from);\n\t\t\t\t\t}\n\t\t\t\t\txChange = (mode === \"start\") ? self.x - startElementX : (mode === \"velocity\") ? ThrowPropsPlugin.getVelocity(this.target, xProp) : (r1.left + r1.width / 2) - (r2.left + r2.width / 2);\n\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\treturn xChange < 0 ? \"counter-clockwise\" : \"clockwise\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiagonalThreshold = diagonalThreshold || 2;\n\t\t\t\t\t\tyChange = (mode === \"start\") ? self.y - startElementY : (mode === \"velocity\") ? ThrowPropsPlugin.getVelocity(this.target, yProp) : (r1.top + r1.height / 2) - (r2.top + r2.height / 2);\n\t\t\t\t\t\tratio = Math.abs(xChange / yChange);\n\t\t\t\t\t\tdirection = (ratio < 1 / diagonalThreshold) ? \"\" : (xChange < 0) ? \"left\" : \"right\";\n\t\t\t\t\t\tif (ratio < diagonalThreshold) {\n\t\t\t\t\t\t\tif (direction !== \"\") {\n\t\t\t\t\t\t\t\tdirection += \"-\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdirection += (yChange < 0) ? \"up\" : \"down\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn direction;\n\t\t\t\t};\n\n\n\t\t\t\tthis.applyBounds = function(newBounds) {\n\t\t\t\t\tvar x, y, forceZeroVelocity, e, parent, isRoot;\n\t\t\t\t\tif (newBounds && vars.bounds !== newBounds) {\n\t\t\t\t\t\tvars.bounds = newBounds;\n\t\t\t\t\t\treturn self.update(true);\n\t\t\t\t\t}\n\t\t\t\t\tsyncXY(true);\n\t\t\t\t\tcalculateBounds();\n\t\t\t\t\tif (hasBounds) {\n\t\t\t\t\t\tx = self.x;\n\t\t\t\t\t\ty = self.y;\n\t\t\t\t\t\tif (x > maxX) {\n\t\t\t\t\t\t\tx = maxX;\n\t\t\t\t\t\t} else if (x < minX) {\n\t\t\t\t\t\t\tx = minX;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (y > maxY) {\n\t\t\t\t\t\t\ty = maxY;\n\t\t\t\t\t\t} else if (y < minY) {\n\t\t\t\t\t\t\ty = minY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.x !== x || self.y !== y) {\n\t\t\t\t\t\t\tforceZeroVelocity = true;\n\t\t\t\t\t\t\tself.x = self.endX = x;\n\t\t\t\t\t\t\tif (rotationMode) {\n\t\t\t\t\t\t\t\tself.endRotation = x;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tself.y = self.endY = y;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\trender(true);\n\t\t\t\t\t\t\tif (self.autoScroll && !self.isDragging) {\n\t\t\t\t\t\t\t\t_recordMaxScrolls(target.parentNode);\n\t\t\t\t\t\t\t\te = target;\n\t\t\t\t\t\t\t\t_windowProxy.scrollTop = ((window.pageYOffset != null) ? window.pageYOffset : (_docElement.scrollTop != null) ? _docElement.scrollTop : _doc.body.scrollTop);\n\t\t\t\t\t\t\t\t_windowProxy.scrollLeft = ((window.pageXOffset != null) ? window.pageXOffset : (_docElement.scrollLeft != null) ? _docElement.scrollLeft : _doc.body.scrollLeft);\n\t\t\t\t\t\t\t\twhile (e && !isRoot) { //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.\n\t\t\t\t\t\t\t\t\tisRoot = _isRoot(e.parentNode);\n\t\t\t\t\t\t\t\t\tparent = isRoot ? _windowProxy : e.parentNode;\n\t\t\t\t\t\t\t\t\tif (allowY && parent.scrollTop > parent._gsMaxScrollY) {\n\t\t\t\t\t\t\t\t\t\tparent.scrollTop = parent._gsMaxScrollY;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (allowX && parent.scrollLeft > parent._gsMaxScrollX) {\n\t\t\t\t\t\t\t\t\t\tparent.scrollLeft = parent._gsMaxScrollX;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\te = parent;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {\n\t\t\t\t\t\t\tanimate(vars.throwProps, forceZeroVelocity);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn self;\n\t\t\t\t};\n\n\t\t\t\tthis.update = function(applyBounds, sticky, ignoreExternalChanges) {\n\t\t\t\t\tvar x = self.x,\n\t\t\t\t\t\ty = self.y;\n\t\t\t\t\tupdateMatrix(!sticky);\n\t\t\t\t\tif (applyBounds) {\n\t\t\t\t\t\tself.applyBounds();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (dirty && ignoreExternalChanges) {\n\t\t\t\t\t\t\trender(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsyncXY(true);\n\t\t\t\t\t}\n\t\t\t\t\tif (sticky) {\n\t\t\t\t\t\tsetPointerPosition(self.pointerX, self.pointerY);\n\t\t\t\t\t\tif (dirty) {\n\t\t\t\t\t\t\trender(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (self.isPressed && !sticky && ((allowX && Math.abs(x - self.x) > 0.01) || (allowY && (Math.abs(y - self.y) > 0.01 && !rotationMode)))) {\n\t\t\t\t\t\trecordStartPositions();\n\t\t\t\t\t}\n\t\t\t\t\tif (self.autoScroll) {\n\t\t\t\t\t\t_recordMaxScrolls(target.parentNode);\n\t\t\t\t\t\tcheckAutoScrollBounds = self.isDragging;\n\t\t\t\t\t\trender(true);\n\t\t\t\t\t}\n\t\t\t\t\tif (self.autoScroll) { //in case reparenting occurred.\n\t\t\t\t\t\t_removeScrollListener(target, updateScroll);\n\t\t\t\t\t\t_addScrollListener(target, updateScroll);\n\t\t\t\t\t}\n\t\t\t\t\treturn self;\n\t\t\t\t};\n\n\t\t\t\tthis.enable = function(type) {\n\t\t\t\t\tvar id, i, trigger;\n\t\t\t\t\tif (type !== \"soft\") {\n\t\t\t\t\t\ti = triggers.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\ttrigger = triggers[i];\n\t\t\t\t\t\t\t_addListener(trigger, \"mousedown\", onPress);\n\t\t\t\t\t\t\t_addListener(trigger, \"touchstart\", onPress);\n\t\t\t\t\t\t\t_addListener(trigger, \"click\", onClick, true); //note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.\n\t\t\t\t\t\t\tif (!rotationMode && vars.cursor !== false) {\n\t\t\t\t\t\t\t\t_setStyle(trigger, \"cursor\", vars.cursor || \"move\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_setStyle(trigger, \"touchCallout\", \"none\");\n\t\t\t\t\t\t\t_setStyle(trigger, \"touchAction\", (allowX === allowY) ? \"none\" : allowX ? \"pan-y\" : \"pan-x\");\n\t\t\t\t\t\t\tif (_isSVG(trigger)) { // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.\n\t\t\t\t\t\t\t\t_setStyle(trigger.ownerSVGElement || trigger, \"touchAction\", (allowX === allowY) ? \"none\" : allowX ? \"pan-y\" : \"pan-x\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!this.vars.allowContextMenu) {\n\t\t\t\t\t\t\t\t_addListener(trigger, \"contextmenu\", onContextMenu);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_setSelectable(triggers, false);\n\t\t\t\t\t}\n\t\t\t\t\t_addScrollListener(target, updateScroll);\n\t\t\t\t\tenabled = true;\n\t\t\t\t\tif (ThrowPropsPlugin && type !== \"soft\") {\n\t\t\t\t\t\tThrowPropsPlugin.track(scrollProxy || target, (xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\"));\n\t\t\t\t\t}\n\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\tscrollProxy.enable();\n\t\t\t\t\t}\n\t\t\t\t\ttarget._gsDragID = id = \"d\" + (_lookupCount++);\n\t\t\t\t\t_lookup[id] = this;\n\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\tscrollProxy.element._gsDragID = id;\n\t\t\t\t\t}\n\t\t\t\t\tTweenLite.set(target, {x:\"+=0\", overwrite:false, data:\"_draggable\"}); //simply ensures that there's a _gsTransform on the element.\n\t\t\t\t\tapplyObj = {\n\t\t\t\t\t\tt:target,\n\t\t\t\t\t\tdata:_isOldIE ? cssVars : target._gsTransform,\n\t\t\t\t\t\ttween:{},\n\t\t\t\t\t\tsetRatio:(_isOldIE ? function() { TweenLite.set(target, tempVars); } : CSSPlugin._internals.setTransformRatio || CSSPlugin._internals.set3DTransformRatio)\n\t\t\t\t\t};\n\t\t\t\t\trecordStartPositions();\n\t\t\t\t\tself.update(true);\n\t\t\t\t\treturn self;\n\t\t\t\t};\n\n\t\t\t\tthis.disable = function(type) {\n\t\t\t\t\tvar dragging = self.isDragging,\n\t\t\t\t\t\ti, trigger;\n\t\t\t\t\tif (!rotationMode) {\n\t\t\t\t\t\ti = triggers.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\t_setStyle(triggers[i], \"cursor\", null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (type !== \"soft\") {\n\t\t\t\t\t\ti = triggers.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\ttrigger = triggers[i];\n\t\t\t\t\t\t\t_setStyle(trigger, \"touchCallout\", null);\n\t\t\t\t\t\t\t_setStyle(trigger, \"touchAction\", null);\n\t\t\t\t\t\t\t_removeListener(trigger, \"mousedown\", onPress);\n\t\t\t\t\t\t\t_removeListener(trigger, \"touchstart\", onPress);\n\t\t\t\t\t\t\t_removeListener(trigger, \"click\", onClick);\n\t\t\t\t\t\t\t_removeListener(trigger, \"contextmenu\", onContextMenu);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_setSelectable(triggers, true);\n\t\t\t\t\t\tif (touchEventTarget) {\n\t\t\t\t\t\t\t_removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\t\t\t\t\t\t\t_removeListener(touchEventTarget, \"touchend\", onRelease);\n\t\t\t\t\t\t\t_removeListener(touchEventTarget, \"touchmove\", onMove);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_removeListener(_doc, \"mouseup\", onRelease);\n\t\t\t\t\t\t_removeListener(_doc, \"mousemove\", onMove);\n\t\t\t\t\t}\n\t\t\t\t\t_removeScrollListener(target, updateScroll);\n\t\t\t\t\tenabled = false;\n\t\t\t\t\tif (ThrowPropsPlugin && type !== \"soft\") {\n\t\t\t\t\t\tThrowPropsPlugin.untrack(scrollProxy || target, (xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\"));\n\t\t\t\t\t}\n\t\t\t\t\tif (scrollProxy) {\n\t\t\t\t\t\tscrollProxy.disable();\n\t\t\t\t\t}\n\t\t\t\t\t_removeFromRenderQueue(render);\n\t\t\t\t\tself.isDragging = self.isPressed = isClicking = false;\n\t\t\t\t\tif (dragging) {\n\t\t\t\t\t\t_dispatchEvent(self, \"dragend\", \"onDragEnd\");\n\t\t\t\t\t}\n\t\t\t\t\treturn self;\n\t\t\t\t};\n\n\t\t\t\tthis.enabled = function(value, type) {\n\t\t\t\t\treturn arguments.length ? (value ? self.enable(type) : self.disable(type)) : enabled;\n\t\t\t\t};\n\n\t\t\t\tthis.kill = function() {\n\t\t\t\t\tself.isThrowing = false;\n\t\t\t\t\tTweenLite.killTweensOf(scrollProxy || target, true, killProps);\n\t\t\t\t\tself.disable();\n\t\t\t\t\tTweenLite.set(triggers, {clearProps:\"userSelect\"});\n\t\t\t\t\tdelete _lookup[target._gsDragID];\n\t\t\t\t\treturn self;\n\t\t\t\t};\n\n\t\t\t\tif (type.indexOf(\"scroll\") !== -1) {\n\t\t\t\t\tscrollProxy = this.scrollProxy = new ScrollProxy(target, _extend({onKill:function() { //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the \"mouseup\" properly when users drag the scrollbar of an element, so this works around that issue.\n\t\t\t\t\t\tif (self.isPressed) {\n\t\t\t\t\t\t\tonRelease(null);\n\t\t\t\t\t\t}}}, vars));\n\t\t\t\t\t//a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to \"hidden\" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)\n\t\t\t\t\ttarget.style.overflowY = (allowY && !_isTouchDevice) ? \"auto\" : \"hidden\";\n\t\t\t\t\ttarget.style.overflowX = (allowX && !_isTouchDevice) ? \"auto\" : \"hidden\";\n\t\t\t\t\ttarget = scrollProxy.content;\n\t\t\t\t}\n\n\t\t\t\tif (vars.force3D !== false) {\n\t\t\t\t\tTweenLite.set(target, {force3D:true}); //improve performance by forcing a GPU layer when possible\n\t\t\t\t}\n\t\t\t\tif (rotationMode) {\n\t\t\t\t\tkillProps.rotation = 1;\n\t\t\t\t} else {\n\t\t\t\t\tif (allowX) {\n\t\t\t\t\t\tkillProps[xProp] = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (allowY) {\n\t\t\t\t\t\tkillProps[yProp] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (rotationMode) {\n\t\t\t\t\ttempVars = _tempVarsRotation;\n\t\t\t\t\tcssVars = tempVars.css;\n\t\t\t\t\ttempVars.overwrite = false;\n\t\t\t\t} else if (xyMode) {\n\t\t\t\t\ttempVars = (allowX && allowY) ? _tempVarsXY : allowX ? _tempVarsX : _tempVarsY;\n\t\t\t\t\tcssVars = tempVars.css;\n\t\t\t\t\ttempVars.overwrite = false;\n\t\t\t\t}\n\n\t\t\t\tthis.enable();\n\t\t\t},\n\t\t\tp = Draggable.prototype = new EventDispatcher();\n\n\t\tp.constructor = Draggable;\n\t\tp.pointerX = p.pointerY = p.startX = p.startY = p.deltaX = p.deltaY = 0;\n\t\tp.isDragging = p.isPressed = false;\n\t\tDraggable.version = \"0.17.1\";\n\t\tDraggable.zIndex = 1000;\n\n\t\t_addListener(_doc, \"touchcancel\", function() {\n\t\t\t//some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document. Very strange indeed.\n\t\t});\n\t\t_addListener(_doc, \"contextmenu\", function(e) {\n\t\t\tvar p;\n\t\t\tfor (p in _lookup) {\n\t\t\t\tif (_lookup[p].isPressed) {\n\t\t\t\t\t_lookup[p].endDrag();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tDraggable.create = function(targets, vars) {\n\t\t\tif (typeof(targets) === \"string\") {\n\t\t\t\ttargets = TweenLite.selector(targets);\n\t\t\t}\n\t\t\tvar a = (!targets || targets.length === 0) ? [] : _isArrayLike(targets) ? _flattenArray(targets) : [targets],\n\t\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[i] = new Draggable(a[i], vars);\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tDraggable.get = function(target) {\n\t\t\treturn _lookup[(_unwrapElement(target) || {})._gsDragID];\n\t\t};\n\n\t\tDraggable.timeSinceDrag = function() {\n\t\t\treturn (_getTime() - _lastDragTime) / 1000;\n\t\t};\n\n\t\tvar _tempRect = {}, //reuse to reduce garbage collection tasks\n\t\t\t_oldIERect = function(e) { //IE8 doesn't support getBoundingClientRect(), so we use this as a backup.\n\t\t\t\tvar top = 0,\n\t\t\t\t\tleft = 0,\n\t\t\t\t\twidth, height;\n\t\t\t\te = _unwrapElement(e);\n\t\t\t\twidth = e.offsetWidth;\n\t\t\t\theight = e.offsetHeight;\n\t\t\t\twhile(e) {\n\t\t\t\t\ttop += e.offsetTop;\n\t\t\t\t\tleft += e.offsetLeft;\n\t\t\t\t\te = e.offsetParent;\n\t\t\t\t}\n\t\t\t\treturn {top: top, left: left, width: width, height: height};\n\t\t\t},\n\t\t\t_parseRect = function(e, undefined) { //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties\n\t\t\t\tif (e === window) {\n\t\t\t\t\t_tempRect.left = _tempRect.top = 0;\n\t\t\t\t\t_tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _doc.body.clientWidth || 0;\n\t\t\t\t\t_tempRect.height = _tempRect.bottom = ((e.innerHeight || 0) - 20 < _docElement.clientHeight) ? _docElement.clientHeight : e.innerHeight || _doc.body.clientHeight || 0;\n\t\t\t\t\treturn _tempRect;\n\t\t\t\t}\n\t\t\t\tvar r = (e.pageX !== undefined) ? {left:e.pageX - _getDocScrollLeft(), top:e.pageY - _getDocScrollTop(), right:e.pageX - _getDocScrollLeft() + 1, bottom:e.pageY - _getDocScrollTop() + 1} : (!e.nodeType && e.left !== undefined && e.top !== undefined) ? e : _isOldIE ? _oldIERect(e) : _unwrapElement(e).getBoundingClientRect();\n\t\t\t\tif (r.right === undefined && r.width !== undefined) {\n\t\t\t\t\tr.right = r.left + r.width;\n\t\t\t\t\tr.bottom = r.top + r.height;\n\t\t\t\t} else if (r.width === undefined) { //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.\n\t\t\t\t\tr = {width: r.right - r.left, height: r.bottom - r.top, right: r.right, left: r.left, bottom: r.bottom, top: r.top};\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t};\n\n\t\tDraggable.hitTest = function(obj1, obj2, threshold) {\n\t\t\tif (obj1 === obj2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar r1 = _parseRect(obj1),\n\t\t\t\tr2 = _parseRect(obj2),\n\t\t\t\tisOutside = (r2.left > r1.right || r2.right < r1.left || r2.top > r1.bottom || r2.bottom < r1.top),\n\t\t\t\toverlap, area, isRatio;\n\t\t\tif (isOutside || !threshold) {\n\t\t\t\treturn !isOutside;\n\t\t\t}\n\t\t\tisRatio = ((threshold + \"\").indexOf(\"%\") !== -1);\n\t\t\tthreshold = parseFloat(threshold) || 0;\n\t\t\toverlap = {left:Math.max(r1.left, r2.left), top:Math.max(r1.top, r2.top)};\n\t\t\toverlap.width = Math.min(r1.right, r2.right) - overlap.left;\n\t\t\toverlap.height = Math.min(r1.bottom, r2.bottom) - overlap.top;\n\t\t\tif (overlap.width < 0 || overlap.height < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (isRatio) {\n\t\t\t\tthreshold *= 0.01;\n\t\t\t\tarea = overlap.width * overlap.height;\n\t\t\t\treturn (area >= r1.width * r1.height * threshold || area >= r2.width * r2.height * threshold);\n\t\t\t}\n\t\t\treturn (overlap.width > threshold && overlap.height > threshold);\n\t\t};\n\n\t\t_placeholderDiv.style.cssText = \"visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;\";\n\n\t\treturn Draggable;\n\n\t}, true);\n\nexport var Draggable = globals.Draggable;\nexport { Draggable as default };","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n","module.exports = false;\n","'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","module.exports = \"13.4.9\";\n","define([\"../core/Tone\", \"../component/PanVol\", \"../component/Solo\", \"../core/AudioNode\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Channel provides a channel strip interface with \n\t *  volume, pan, solo and mute controls. \n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Decibels} volume The output volume.\n\t *  @param {AudioRange} pan the initial pan\n\t *  @example\n\t * //pan the incoming signal left and drop the volume\n\t * var channel = new Tone.Channel(-0.25, -12);\n\t */\n\tTone.Channel = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"volume\", \"pan\"], Tone.PanVol);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The soloing interface\n\t\t *  @type {Tone.Solo}\n\t\t *  @private\n\t\t */\n\t\tthis._solo = this.input = new Tone.Solo(options.solo);\n\n\t\t/**\n\t\t *  The panning and volume node\n\t\t *  @type {Tone.PanVol}\n\t\t *  @private\n\t\t */\n\t\tthis._panVol = this.output = new Tone.PanVol({\n\t\t\t\"pan\" : options.pan, \n\t\t\t\"volume\" : options.volume,\n\t\t\t\"mute\" : options.mute\n\t\t});\n\n\t\t/**\n\t\t *  The L/R panning control.\n\t\t *  @type {AudioRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.pan = this._panVol.pan;\n\n\t\t/**\n\t\t *  The volume control in decibels.\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\tthis._readOnly([\"pan\", \"volume\"]);\n\t};\n\n\tTone.extend(Tone.Channel, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @type  {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.Channel.defaults = {\n\t\t\"pan\" : 0,\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false,\n\t\t\"solo\" : false\n\t};\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other\n\t * Tone.Channels and Tone.Solos. \n\t * @memberOf Tone.Channel#\n\t * @name solo\n\t * @type {Boolean}\n\t */\n\tObject.defineProperty(Tone.Channel.prototype, \"solo\", {\n\t\tget : function(){\n\t\t\treturn this._solo.solo;\n\t\t},\n\t\tset : function(solo){\n\t\t\tthis._solo.solo = solo;\n\t\t}\n\t});\n\n\t/**\n\t *  If the current instance is muted, i.e. another instance is soloed,\n\t *  or the channel is muted\n\t *  @memberOf Tone.Channel#\n\t *  @type {Boolean}\n\t *  @name muted\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Channel.prototype, \"muted\", {\n\t\tget : function(){\n\t\t\treturn this._solo.muted || this.mute;\n\t\t}\n\t});\n\n\t/**\n\t * Mute/unmute the volume\n\t * @memberOf Tone.Channel#\n\t * @name mute\n\t * @type {Boolean}\n\t */\n\tObject.defineProperty(Tone.Channel.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._panVol.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._panVol.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Channel} this\n\t */\n\tTone.Channel.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"pan\", \"volume\"]);\n\t\tthis._panVol.dispose();\n\t\tthis._panVol = null;\n\t\tthis.pan = null;\n\t\tthis.volume = null;\n\t\tthis._solo.dispose();\n\t\tthis._solo = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Channel;\n});\n","define([\"../core/Tone\", \"../component/MultibandSplit\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t *         well as the low and high crossover frequencies.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *\n\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t *  @example\n\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t */\n\tTone.EQ3 = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"low\", \"mid\", \"high\"], Tone.EQ3);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  the output node\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.output = new Tone.Gain();\n\n\t\t/**\n\t\t *  the multiband split\n\t\t *  @type {Tone.MultibandSplit}\n\t\t *  @private\n\t\t */\n\t\tthis._multibandSplit = this.input = new Tone.MultibandSplit({\n\t\t\t\"lowFrequency\" : options.lowFrequency,\n\t\t\t\"highFrequency\" : options.highFrequency\n\t\t});\n\n\t\t/**\n\t\t *  The gain for the lower signals\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\n\t\t/**\n\t\t *  The gain for the mid signals\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\n\t\t/**\n\t\t * The gain in decibels of the high part\n\t\t * @type {Tone.Gain}\n\t\t * @private\n\t\t */\n\t\tthis._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\n\t\t/**\n\t\t * The gain in decibels of the low part\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t */\n\t\tthis.low = this._lowGain.gain;\n\n\t\t/**\n\t\t * The gain in decibels of the mid part\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t */\n\t\tthis.mid = this._midGain.gain;\n\n\t\t/**\n\t\t * The gain in decibels of the high part\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t */\n\t\tthis.high = this._highGain.gain;\n\n\t\t/**\n\t\t *  The Q value for all of the filters.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t\tthis.Q = this._multibandSplit.Q;\n\n\t\t/**\n\t\t *  The low/mid crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\n\t\t/**\n\t\t *  The mid/high crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.highFrequency = this._multibandSplit.highFrequency;\n\n\t\t//the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\t\tthis._readOnly([\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t};\n\n\tTone.extend(Tone.EQ3, Tone.AudioNode);\n\n\t/**\n\t *  the default values\n\t */\n\tTone.EQ3.defaults = {\n\t\t\"low\" : 0,\n\t\t\"mid\" : 0,\n\t\t\"high\" : 0,\n\t\t\"lowFrequency\" : 400,\n\t\t\"highFrequency\" : 2500\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.EQ3} this\n\t */\n\tTone.EQ3.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis._multibandSplit = null;\n\t\tthis.lowFrequency = null;\n\t\tthis.highFrequency = null;\n\t\tthis._lowGain.dispose();\n\t\tthis._lowGain = null;\n\t\tthis._midGain.dispose();\n\t\tthis._midGain = null;\n\t\tthis._highGain.dispose();\n\t\tthis._highGain = null;\n\t\tthis.low = null;\n\t\tthis.mid = null;\n\t\tthis.high = null;\n\t\tthis.Q = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.EQ3;\n});\n","define([\"../core/Tone\", \"../component/Analyser\", \"../core/AudioNode\"], function(Tone){\n\n\t/**\n\t *  @class  Get the current waveform data of the connected audio source.\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t *                       two in the range 32 to 32768.\n\t */\n\tTone.FFT = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"size\"], Tone.FFT);\n\t\toptions.type = Tone.Analyser.Type.FFT;\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The analyser node.\n\t\t *  @private\n\t\t *  @type {Tone.Analyser}\n\t\t */\n\t\tthis._analyser = this.input = this.output = new Tone.Analyser(options);\n\t};\n\n\tTone.extend(Tone.FFT, Tone.AudioNode);\n\n\t/**\n\t *  The default values.\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.FFT.defaults = {\n\t\t\"size\" : 1024\n\t};\n\n\t/**\n\t *  Gets the waveform of the audio source. Returns the waveform data\n\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t *  @returns {TypedArray}\n\t */\n\tTone.FFT.prototype.getValue = function(){\n\t\treturn this._analyser.getValue();\n\t};\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t *  @memberOf Tone.FFT#\n\t *  @type {Number}\n\t *  @name size\n\t */\n\tObject.defineProperty(Tone.FFT.prototype, \"size\", {\n\t\tget : function(){\n\t\t\treturn this._analyser.size;\n\t\t},\n\t\tset : function(size){\n\t\t\tthis._analyser.size = size;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.FFT}  this\n\t */\n\tTone.FFT.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._analyser.dispose();\n\t\tthis._analyser = null;\n\t};\n\n\treturn Tone.FFT;\n});\n","define([\"../core/Tone\", \"../component/Follower\", \"../signal/GreaterThan\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Gate only passes a signal through when the incoming\n\t *          signal exceeds a specified threshold. To do this, Gate uses\n\t *          a Tone.Follower to follow the amplitude of the incoming signal.\n\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open.\n\t *  @param {Time=} smoothing The follower's smoothing time\n\t *  @example\n\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t * var mic = new Tone.UserMedia().connect(gate);\n\t * //the gate will only pass through the incoming\n\t * //signal when it's louder than -30db\n\t */\n\tTone.Gate = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"threshold\", \"smoothing\"], Tone.Gate);\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(1, 1);\n\n\t\t/**\n\t\t *  @type {Tone.Follower}\n\t\t *  @private\n\t\t */\n\t\tthis._follower = new Tone.Follower(options.smoothing);\n\n\t\t/**\n\t\t *  @type {Tone.GreaterThan}\n\t\t *  @private\n\t\t */\n\t\tthis._gt = new Tone.GreaterThan(Tone.dbToGain(options.threshold));\n\n\t\t//the connections\n\t\tthis.input.connect(this.output);\n\t\t//the control signal\n\t\tthis.input.chain(this._follower, this._gt, this.output.gain);\n\t};\n\n\tTone.extend(Tone.Gate, Tone.AudioNode);\n\n\t/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.Gate.defaults = {\n\t\t\"smoothing\" : 0.1,\n\t\t\"threshold\" : -40\n\t};\n\n\t/**\n\t * The threshold of the gate in decibels\n\t * @memberOf Tone.Gate#\n\t * @type {Decibels}\n\t * @name threshold\n\t */\n\tObject.defineProperty(Tone.Gate.prototype, \"threshold\", {\n\t\tget : function(){\n\t\t\treturn Tone.gainToDb(this._gt.value);\n\t\t},\n\t\tset : function(thresh){\n\t\t\tthis._gt.value = Tone.dbToGain(thresh);\n\t\t}\n\t});\n\n\t/**\n\t * The attack/decay speed of the gate\n\t * @memberOf Tone.Gate#\n\t * @type {Time}\n\t * @name smoothing\n\t */\n\tObject.defineProperty(Tone.Gate.prototype, \"smoothing\", {\n\t\tget : function(){\n\t\t\treturn this._follower.smoothing;\n\t\t},\n\t\tset : function(smoothingTime){\n\t\t\tthis._follower.smoothing = smoothingTime;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Gate} this\n\t */\n\tTone.Gate.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._follower.dispose();\n\t\tthis._gt.dispose();\n\t\tthis._follower = null;\n\t\tthis._gt = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Gate;\n});\n","define([\"../core/Tone\", \"../component/Compressor\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Limiter will limit the loudness of an incoming signal.\n\t *         It is composed of a Tone.Compressor with a fast attack\n\t *         and release. Limiters are commonly used to safeguard against\n\t *         signal clipping. Unlike a compressor, limiters do not provide\n\t *         smooth gain reduction and almost completely prevent\n\t *         additional gain above the threshold.\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {number} threshold The theshold above which the limiting is applied.\n\t *  @example\n\t *  var limiter = new Tone.Limiter(-6);\n\t */\n\tTone.Limiter = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"threshold\"], Tone.Limiter);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  the compressor\n\t\t *  @private\n\t\t *  @type {Tone.Compressor}\n\t\t */\n\t\tthis._compressor = this.input = this.output = new Tone.Compressor({\n\t\t\t\"attack\" : 0.001,\n\t\t\t\"decay\" : 0.001,\n\t\t\t\"threshold\" : options.threshold\n\t\t});\n\n\t\t/**\n\t\t * The threshold of of the limiter\n\t\t * @type {Decibel}\n\t\t * @signal\n\t\t */\n\t\tthis.threshold = this._compressor.threshold;\n\n\t\tthis._readOnly(\"threshold\");\n\t};\n\n\tTone.extend(Tone.Limiter, Tone.AudioNode);\n\n\t/**\n\t *  The default value\n\t *  @type {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.Limiter.defaults = {\n\t\t\"threshold\" : -12\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Limiter} this\n\t */\n\tTone.Limiter.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._compressor.dispose();\n\t\tthis._compressor = null;\n\t\tthis._writable(\"threshold\");\n\t\tthis.threshold = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Limiter;\n});\n","define([\"../core/Tone\", \"../component/Analyser\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t *          of an input signal. It can also get the raw\n\t *          value of the input signal.\n\t *\n\t *  @constructor\n\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t *  @extends {Tone.AudioNode}\n\t *  @example\n\t * var meter = new Tone.Meter();\n\t * var mic = new Tone.UserMedia().open();\n\t * //connect mic to the meter\n\t * mic.connect(meter);\n\t * //the current level of the mic input in decibels\n\t * var level = meter.getLevel();\n\t */\n\tTone.Meter = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"smoothing\"], Tone.Meter);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t * A value from 0 -> 1 where 0 represents no time averaging with the last analysis frame.\n\t\t * @type {Number}\n\t\t */\n\t\tthis.smoothing = options.smoothing;\n\n\t\t/**\n\t\t * The previous frame's value\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._rms = 0;\n\n\t\t/**\n\t\t *  The analyser node which computes the levels.\n\t\t *  @private\n\t\t *  @type  {Tone.Analyser}\n\t\t */\n\t\tthis.input = this.output = this._analyser = new Tone.Analyser(\"waveform\", 256);\n\t};\n\n\tTone.extend(Tone.Meter, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @type {Object}\n\t *  @static\n\t *  @const\n\t */\n\tTone.Meter.defaults = {\n\t\t\"smoothing\" : 0.8,\n\t};\n\n\t/**\n\t *  Get the current decibel value of the incoming signal\n\t *  @returns {Decibels}\n\t */\n\tTone.Meter.prototype.getLevel = function(){\n\t\tvar values = this._analyser.getValue();\n\t\tvar totalSquared = 0;\n\t\tfor (var i = 0; i < values.length; i++){\n\t\t\tvar value = values[i];\n\t\t\ttotalSquared += value * value;\n\t\t}\n\t\tvar rms = Math.sqrt(totalSquared / values.length);\n\n\t\t//the rms can only fall at the rate of the smoothing\n\t\t//but can jump up instantly\n\t\tthis._rms = Math.max(rms, this._rms * this.smoothing);\n\n\t\treturn Tone.gainToDb(this._rms);\n\t};\n\n\t/**\n\t *  Get the signal value of the incoming signal\n\t *  @returns {Number}\n\t */\n\tTone.Meter.prototype.getValue = function(){\n\t\tvar value = this._analyser.getValue();\n\t\treturn value[0];\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Meter} this\n\t */\n\tTone.Meter.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._analyser.dispose();\n\t\tthis._analyser = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Meter;\n});\n","define([\"../core/Tone\", \"../component/MidSideSplit\", \"../component/MidSideMerge\",\n\t\"../component/Compressor\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t *         and side signal components. See Tone.MidSideSplit.\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Object} options The options that are passed to the mid and side\n\t *                          compressors.\n\t *  @constructor\n\t */\n\tTone.MidSideCompressor = function(options){\n\n\t\tTone.AudioNode.call(this);\n\t\toptions = Tone.defaultArg(options, Tone.MidSideCompressor.defaults);\n\n\t\t/**\n\t\t *  the mid/side split\n\t\t *  @type  {Tone.MidSideSplit}\n\t\t *  @private\n\t\t */\n\t\tthis._midSideSplit = this.input = new Tone.MidSideSplit();\n\n\t\t/**\n\t\t *  the mid/side recombination\n\t\t *  @type  {Tone.MidSideMerge}\n\t\t *  @private\n\t\t */\n\t\tthis._midSideMerge = this.output = new Tone.MidSideMerge();\n\n\t\t/**\n\t\t *  The compressor applied to the mid signal\n\t\t *  @type  {Tone.Compressor}\n\t\t */\n\t\tthis.mid = new Tone.Compressor(options.mid);\n\n\t\t/**\n\t\t *  The compressor applied to the side signal\n\t\t *  @type  {Tone.Compressor}\n\t\t */\n\t\tthis.side = new Tone.Compressor(options.side);\n\n\t\tthis._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t\tthis._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t\tthis._readOnly([\"mid\", \"side\"]);\n\t};\n\n\tTone.extend(Tone.MidSideCompressor, Tone.AudioNode);\n\n\t/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.MidSideCompressor.defaults = {\n\t\t\"mid\" : {\n\t\t\t\"ratio\" : 3,\n\t\t\t\"threshold\" : -24,\n\t\t\t\"release\" : 0.03,\n\t\t\t\"attack\" : 0.02,\n\t\t\t\"knee\" : 16\n\t\t},\n\t\t\"side\" : {\n\t\t\t\"ratio\" : 6,\n\t\t\t\"threshold\" : -30,\n\t\t\t\"release\" : 0.25,\n\t\t\t\"attack\" : 0.03,\n\t\t\t\"knee\" : 10\n\t\t}\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.MidSideCompressor} this\n\t */\n\tTone.MidSideCompressor.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable([\"mid\", \"side\"]);\n\t\tthis.mid.dispose();\n\t\tthis.mid = null;\n\t\tthis.side.dispose();\n\t\tthis.side = null;\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideSplit = null;\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSideMerge = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MidSideCompressor;\n});\n","define([\"../core/Tone\", \"../component/Merge\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t *         where both left and right channels have the same value. This can be useful\n\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t */\n\tTone.Mono = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(1, 0);\n\n\t\t/**\n\t\t *  merge the signal\n\t\t *  @type {Tone.Merge}\n\t\t *  @private\n\t\t */\n\t\tthis._merge = this.output = new Tone.Merge();\n\n\t\tthis.input.connect(this._merge, 0, 0);\n\t\tthis.input.connect(this._merge, 0, 1);\n\t};\n\n\tTone.extend(Tone.Mono, Tone.AudioNode);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Mono} this\n\t */\n\tTone.Mono.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._merge.dispose();\n\t\tthis._merge = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Mono;\n});\n","define([\"../core/Tone\", \"../component/MultibandSplit\", \"../component/Compressor\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Object} options The low/mid/high compressor settings.\n\t *  @example\n\t *  var multiband = new Tone.MultibandCompressor({\n\t *  \t\"lowFrequency\" : 200,\n\t *  \t\"highFrequency\" : 1300\n\t *  \t\"low\" : {\n\t *  \t\t\"threshold\" : -12\n\t *  \t}\n\t *  })\n\t */\n\tTone.MultibandCompressor = function(options){\n\n\t\tTone.AudioNode.call(this);\n\t\toptions = Tone.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\n\t\t/**\n\t\t *  split the incoming signal into high/mid/low\n\t\t *  @type {Tone.MultibandSplit}\n\t\t *  @private\n\t\t */\n\t\tthis._splitter = this.input = new Tone.MultibandSplit({\n\t\t\t\"lowFrequency\" : options.lowFrequency,\n\t\t\t\"highFrequency\" : options.highFrequency\n\t\t});\n\n\t\t/**\n\t\t *  low/mid crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.lowFrequency = this._splitter.lowFrequency;\n\n\t\t/**\n\t\t *  mid/high crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.highFrequency = this._splitter.highFrequency;\n\n\t\t/**\n\t\t *  the output\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis.output = new Tone.Gain();\n\n\t\t/**\n\t\t *  The compressor applied to the low frequencies.\n\t\t *  @type {Tone.Compressor}\n\t\t */\n\t\tthis.low = new Tone.Compressor(options.low);\n\n\t\t/**\n\t\t *  The compressor applied to the mid frequencies.\n\t\t *  @type {Tone.Compressor}\n\t\t */\n\t\tthis.mid = new Tone.Compressor(options.mid);\n\n\t\t/**\n\t\t *  The compressor applied to the high frequencies.\n\t\t *  @type {Tone.Compressor}\n\t\t */\n\t\tthis.high = new Tone.Compressor(options.high);\n\n\t\t//connect the compressor\n\t\tthis._splitter.low.chain(this.low, this.output);\n\t\tthis._splitter.mid.chain(this.mid, this.output);\n\t\tthis._splitter.high.chain(this.high, this.output);\n\n\t\tthis._readOnly([\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t};\n\n\tTone.extend(Tone.MultibandCompressor, Tone.AudioNode);\n\n\t/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.MultibandCompressor.defaults = {\n\t\t\"low\" : Tone.Compressor.defaults,\n\t\t\"mid\" : Tone.Compressor.defaults,\n\t\t\"high\" : Tone.Compressor.defaults,\n\t\t\"lowFrequency\" : 250,\n\t\t\"highFrequency\" : 2000\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.MultibandCompressor} this\n\t */\n\tTone.MultibandCompressor.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._splitter.dispose();\n\t\tthis._writable([\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis._splitter = null;\n\t\tthis.low = null;\n\t\tthis.mid = null;\n\t\tthis.high = null;\n\t\tthis.lowFrequency = null;\n\t\tthis.highFrequency = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MultibandCompressor;\n});\n","define([\"../core/Tone\", \"../component/CrossFade\", \"../component/Merge\", \"../component/Split\",\n\t\"../signal/Signal\", \"../signal/AudioToGain\", \"../signal/Zero\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Number} positionX The initial x position.\n\t *  @param {Number} positionY The initial y position.\n\t *  @param {Number} positionZ The initial z position.\n\t */\n\tTone.Panner3D = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"positionX\", \"positionY\", \"positionZ\"], Tone.Panner3D);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The panner node\n\t\t *  @type {PannerNode}\n\t\t *  @private\n\t\t */\n\t\tthis._panner = this.input = this.output = this.context.createPanner();\n\t\t//set some values\n\t\tthis._panner.panningModel = options.panningModel;\n\t\tthis._panner.maxDistance = options.maxDistance;\n\t\tthis._panner.distanceModel = options.distanceModel;\n\t\tthis._panner.coneOuterGain = options.coneOuterGain;\n\t\tthis._panner.coneOuterAngle = options.coneOuterAngle;\n\t\tthis._panner.coneInnerAngle = options.coneInnerAngle;\n\t\tthis._panner.refDistance = options.refDistance;\n\t\tthis._panner.rolloffFactor = options.rolloffFactor;\n\n\t\t/**\n\t\t *  Holds the current orientation\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._orientation = [options.orientationX, options.orientationY, options.orientationZ];\n\n\t\t/**\n\t\t *  Holds the current position\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._position = [options.positionX, options.positionY, options.positionZ];\n\n\t\t// set the default position/orientation\n\t\tthis.orientationX = options.orientationX;\n\t\tthis.orientationY = options.orientationY;\n\t\tthis.orientationZ = options.orientationZ;\n\t\tthis.positionX = options.positionX;\n\t\tthis.positionY = options.positionY;\n\t\tthis.positionZ = options.positionZ;\n\t};\n\n\tTone.extend(Tone.Panner3D, Tone.AudioNode);\n\n\t/**\n\t *  Defaults according to the specification\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Panner3D.defaults = {\n\t\t\"positionX\" : 0,\n\t\t\"positionY\" : 0,\n\t\t\"positionZ\" : 0,\n\t\t\"orientationX\" : 0,\n\t\t\"orientationY\" : 0,\n\t\t\"orientationZ\" : 0,\n\t\t\"panningModel\" : \"equalpower\",\n\t\t\"maxDistance\" : 10000,\n\t\t\"distanceModel\" : \"inverse\",\n\t\t\"coneOuterGain\" : 0,\n\t\t\"coneOuterAngle\" : 360,\n\t\t\"coneInnerAngle\" : 360,\n\t\t\"refDistance\" : 1,\n\t\t\"rolloffFactor\" : 1\n\t};\n\n\t/**\n\t * The ramp time which is applied to the setTargetAtTime\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.Panner3D.prototype._rampTimeConstant = 0.01;\n\n\t/**\n\t *  Sets the position of the source in 3d space.\n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @return {Tone.Panner3D} this\n\t */\n\tTone.Panner3D.prototype.setPosition = function(x, y, z){\n\t\tif (this._panner.positionX){\n\t\t\tvar now = this.now();\n\t\t\tthis._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t\tthis._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t\tthis._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t} else {\n\t\t\tthis._panner.setPosition(x, y, z);\n\t\t}\n\t\tthis._position = Array.prototype.slice.call(arguments);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sets the orientation of the source in 3d space.\n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @return {Tone.Panner3D} this\n\t */\n\tTone.Panner3D.prototype.setOrientation = function(x, y, z){\n\t\tif (this._panner.orientationX){\n\t\t\tvar now = this.now();\n\t\t\tthis._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t\tthis._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t\tthis._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t} else {\n\t\t\tthis._panner.setOrientation(x, y, z);\n\t\t}\n\t\tthis._orientation = Array.prototype.slice.call(arguments);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The x position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name positionX\n\t */\n\tObject.defineProperty(Tone.Panner3D.prototype, \"positionX\", {\n\t\tset : function(pos){\n\t\t\tthis._position[0] = pos;\n\t\t\tthis.setPosition.apply(this, this._position);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._position[0];\n\t\t}\n\t});\n\n\t/**\n\t *  The y position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name positionY\n\t */\n\tObject.defineProperty(Tone.Panner3D.prototype, \"positionY\", {\n\t\tset : function(pos){\n\t\t\tthis._position[1] = pos;\n\t\t\tthis.setPosition.apply(this, this._position);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._position[1];\n\t\t}\n\t});\n\n\t/**\n\t *  The z position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name positionZ\n\t */\n\tObject.defineProperty(Tone.Panner3D.prototype, \"positionZ\", {\n\t\tset : function(pos){\n\t\t\tthis._position[2] = pos;\n\t\t\tthis.setPosition.apply(this, this._position);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._position[2];\n\t\t}\n\t});\n\n\t/**\n\t *  The x orientation of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name orientationX\n\t */\n\tObject.defineProperty(Tone.Panner3D.prototype, \"orientationX\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[0] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[0];\n\t\t}\n\t});\n\n\t/**\n\t *  The y orientation of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name orientationY\n\t */\n\tObject.defineProperty(Tone.Panner3D.prototype, \"orientationY\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[1] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[1];\n\t\t}\n\t});\n\n\t/**\n\t *  The z orientation of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name orientationZ\n\t */\n\tObject.defineProperty(Tone.Panner3D.prototype, \"orientationZ\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[2] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[2];\n\t\t}\n\t});\n\n\t/**\n\t *  Proxy a property on the panner to an exposed public propery\n\t *  @param  {String}  prop\n\t *  @private\n\t */\n\tTone.Panner3D._aliasProperty = function(prop){\n\t\tObject.defineProperty(Tone.Panner3D.prototype, prop, {\n\t\t\tset : function(val){\n\t\t\t\tthis._panner[prop] = val;\n\t\t\t},\n\t\t\tget : function(){\n\t\t\t\treturn this._panner[prop];\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t *  @type {String}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name panningModel\n\t */\n\tTone.Panner3D._aliasProperty(\"panningModel\");\n\n\t/**\n\t *  A reference distance for reducing volume as source move further from the listener\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name refDistance\n\t */\n\tTone.Panner3D._aliasProperty(\"refDistance\");\n\n\t/**\n\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name rolloffFactor\n\t */\n\tTone.Panner3D._aliasProperty(\"rolloffFactor\");\n\n\t/**\n\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t *  @type {String}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name distanceModel\n\t */\n\tTone.Panner3D._aliasProperty(\"distanceModel\");\n\n\t/**\n\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t *  @type {Degrees}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name coneInnerAngle\n\t */\n\tTone.Panner3D._aliasProperty(\"coneInnerAngle\");\n\n\t/**\n\t *  The angle, in degrees, outside of which the volume will be reduced\n\t *  to a constant value of coneOuterGain\n\t *  @type {Degrees}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name coneOuterAngle\n\t */\n\tTone.Panner3D._aliasProperty(\"coneOuterAngle\");\n\n\t/**\n\t *  The gain outside of the coneOuterAngle\n\t *  @type {Gain}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name coneOuterGain\n\t */\n\tTone.Panner3D._aliasProperty(\"coneOuterGain\");\n\n\t/**\n\t *  The maximum distance between source and listener,\n\t *  after which the volume will not be reduced any further.\n\t *  @type {Positive}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name maxDistance\n\t */\n\tTone.Panner3D._aliasProperty(\"maxDistance\");\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Panner3D} this\n\t */\n\tTone.Panner3D.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._panner.disconnect();\n\t\tthis._panner = null;\n\t\tthis._orientation = null;\n\t\tthis._position = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Panner3D;\n});\n","define([\"../core/Tone\", \"../component/Analyser\", \"../core/AudioNode\"], function(Tone){\n\n\t/**\n\t *  @class  Get the current waveform data of the connected audio source.\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t *                       two in the range 32 to 32768.\n\t */\n\tTone.Waveform = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"size\"], Tone.Waveform);\n\t\toptions.type = Tone.Analyser.Type.Waveform;\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The analyser node.\n\t\t *  @private\n\t\t *  @type {Tone.Analyser}\n\t\t */\n\t\tthis._analyser = this.input = this.output = new Tone.Analyser(options);\n\t};\n\n\tTone.extend(Tone.Waveform, Tone.AudioNode);\n\n\t/**\n\t *  The default values.\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.Waveform.defaults = {\n\t\t\"size\" : 1024\n\t};\n\n\t/**\n\t *  Gets the waveform of the audio source. Returns the waveform data\n\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t *  @returns {TypedArray}\n\t */\n\tTone.Waveform.prototype.getValue = function(){\n\t\treturn this._analyser.getValue();\n\t};\n\n\t/**\n\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t *  @memberOf Tone.Waveform#\n\t *  @type {Number}\n\t *  @name size\n\t */\n\tObject.defineProperty(Tone.Waveform.prototype, \"size\", {\n\t\tget : function(){\n\t\t\treturn this._analyser.size;\n\t\t},\n\t\tset : function(size){\n\t\t\tthis._analyser.size = size;\n\t\t}\n\t});\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Waveform}  this\n\t */\n\tTone.Waveform.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._analyser.dispose();\n\t\tthis._analyser = null;\n\t};\n\n\treturn Tone.Waveform;\n});\n","define([\"../core/Tone\", \"../type/Type\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t *         on the \"index\" property. Passing in an array or object literal\n\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t *         assumed to be numbers. \n\t *  @example\n\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t * interp.index = 0.75;\n\t * interp.value; //returns 1.5\n\t *\n\t *  @example\n\t * var interp = new Tone.CtrlInterpolate([\n\t * \t[2, 4, 5],\n\t * \t[9, 3, 2],\n\t * ]);\n\t * @param {Array} values The array of values to interpolate over\n\t * @param {Positive} index The initial interpolation index.\n\t * @extends {Tone}\n\t */\n\tTone.CtrlInterpolate = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"values\", \"index\"], Tone.CtrlInterpolate);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The values to interpolate between\n\t\t *  @type  {Array}\n\t\t */\n\t\tthis.values = options.values;\n\n\t\t/**\n\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t *  would interpolate equally between the value at index 1\n\t\t *  and the value at index 2. \n\t\t *  @example\n\t\t * interp.index = 0; \n\t\t * interp.value; //returns the value at 0\n\t\t * interp.index = 0.5;\n\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t *  @type  {Positive}\n\t\t */\n\t\tthis.index = options.index;\n\t};\n\n\tTone.extend(Tone.CtrlInterpolate);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.CtrlInterpolate.defaults = {\n\t\t\"index\" : 0,\n\t\t\"values\" : []\n\t};\n\n\t/**\n\t *  The current interpolated value based on the index\n\t *  @readOnly\n\t *  @memberOf Tone.CtrlInterpolate#\n\t *  @type {*}\n\t *  @name value\n\t */\n\tObject.defineProperty(Tone.CtrlInterpolate.prototype, \"value\", {\n\t\tget : function(){\n\t\t\tvar index = this.index;\n\t\t\tindex = Math.min(index, this.values.length - 1);\n\t\t\tvar lowerPosition = Math.floor(index);\n\t\t\tvar lower = this.values[lowerPosition];\n\t\t\tvar upper = this.values[Math.ceil(index)];\n\t\t\treturn this._interpolate(index - lowerPosition, lower, upper);\n\t\t}\n\t});\n\n\t/**\n\t *  Internal interpolation routine\n\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t *  @param  {*}  lower \n\t *  @param  {*}  upper \n\t *  @return  {*}  The interpolated value\n\t *  @private\n\t */\n\tTone.CtrlInterpolate.prototype._interpolate = function(index, lower, upper){\n\t\tif (Tone.isArray(lower)){\n\t\t\tvar retArray = [];\n\t\t\tfor (var i = 0; i < lower.length; i++){\n\t\t\t\tretArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t\t\t}\n\t\t\treturn retArray;\n\t\t} else if (Tone.isObject(lower)){\n\t\t\tvar retObj = {};\n\t\t\tfor (var attr in lower){\n\t\t\t\tretObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t\t\t}\n\t\t\treturn retObj;\n\t\t} else {\n\t\t\tlower = this._toNumber(lower);\n\t\t\tupper = this._toNumber(upper);\n\t\t\treturn (1 - index) * lower + index * upper;\n\t\t}\n\t};\n\n\t/**\n\t *  Convert from the given type into a number\n\t *  @param  {Number|String}  value\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.CtrlInterpolate.prototype._toNumber = function(val){\n\t\tif (Tone.isNumber(val)){\n\t\t\treturn val;\n\t\t} else {\n\t\t\t//otherwise assume that it's Time...\n\t\t\treturn this.toSeconds(val);\n\t\t}\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.CtrlInterpolate}  this\n\t */\n\tTone.CtrlInterpolate.prototype.dispose = function(){\n\t\tthis.values = null;\n\t};\n\n\treturn Tone.CtrlInterpolate;\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t *         state choice is an array, the next state is chosen randomly with\n\t *         even probability for all of the choices. For a weighted probability\n\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t *         The probabilities will be normalized and then chosen. If no next options\n\t *         are given for the current state, the state will stay there. \n\t *  @extends {Tone}\n\t *  @example\n\t * var chain = new Tone.CtrlMarkov({\n\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t * \t\"middle\" : \"end\"\n\t * });\n\t * chain.value = \"beginning\";\n\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t *\n\t *  @example\n\t * var chain = new Tone.CtrlMarkov({\n\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t * \t\"middle\" : \"end\"\n\t * });\n\t * chain.value = \"beginning\";\n\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t *  @param {Object} values An object with the state names as the keys\n\t *                         and the next state(s) as the values. \n\t */\n\tTone.CtrlMarkov = function(values, initial){\n\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The Markov values with states as the keys\n\t\t *  and next state(s) as the values. \n\t\t *  @type {Object}\n\t\t */\n\t\tthis.values = Tone.defaultArg(values, {});\n\t\t\n\t\t/**\n\t\t *  The current state of the Markov values. The next\n\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t *  is invoked.\n\t\t *  @type {String}\n\t\t */\n\t\tthis.value = Tone.defaultArg(initial, Object.keys(this.values)[0]);\n\t};\n\n\tTone.extend(Tone.CtrlMarkov);\n\n\t/**\n\t *  Returns the next state of the Markov values. \n\t *  @return  {String}\n\t */\n\tTone.CtrlMarkov.prototype.next = function(){\n\t\tif (this.values.hasOwnProperty(this.value)){\n\t\t\tvar next = this.values[this.value];\n\t\t\tif (Tone.isArray(next)){\n\t\t\t\tvar distribution = this._getProbDistribution(next);\n\t\t\t\tvar rand = Math.random();\n\t\t\t\tvar total = 0;\n\t\t\t\tfor (var i = 0; i < distribution.length; i++){\n\t\t\t\t\tvar dist = distribution[i];\n\t\t\t\t\tif (rand > total && rand < total + dist){\n\t\t\t\t\t\tvar chosen = next[i];\n\t\t\t\t\t\tif (Tone.isObject(chosen)){\n\t\t\t\t\t\t\tthis.value = chosen.value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.value = chosen;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttotal += dist;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.value = next;\n\t\t\t}\n\t\t} \n\t\treturn this.value;\n\t};\n\n\t/**\n\t *  Choose randomly from an array weighted options in the form \n\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t *  @param  {Array}  options \n\t *  @return  {Array}  The randomly selected choice\n\t *  @private\n\t */\n\tTone.CtrlMarkov.prototype._getProbDistribution = function(options){\n\t\tvar distribution = [];\n\t\tvar total = 0;\n\t\tvar needsNormalizing = false;\n\t\tfor (var i = 0; i < options.length; i++){\n\t\t\tvar option = options[i];\n\t\t\tif (Tone.isObject(option)){\n\t\t\t\tneedsNormalizing = true;\n\t\t\t\tdistribution[i] = option.probability;\n\t\t\t} else {\n\t\t\t\tdistribution[i] = 1 / options.length;\n\t\t\t}\n\t\t\ttotal += distribution[i];\n\t\t}\n\t\tif (needsNormalizing){\n\t\t\t//normalize the values\n\t\t\tfor (var j = 0; j < distribution.length; j++){\n\t\t\t\tdistribution[j] = distribution[j] / total;\n\t\t\t}\n\t\t}\n\t\treturn distribution;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.CtrlMarkov}  this\n\t */\n\tTone.CtrlMarkov.prototype.dispose = function(){\n\t\tthis.values = null;\n\t};\n\n\treturn Tone.CtrlMarkov;\n});\n","define([\"../core/Tone\", \"../type/Type\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Choose a random value.\n\t *  @extends {Tone}\n\t *  @example\n\t * var randomWalk = new Tone.CtrlRandom({\n\t * \t\"min\" : 0,\n\t * \t\"max\" : 10,\n\t * \t\"integer\" : true\n\t * });\n\t * randomWalk.eval();\n\t *\n\t *  @param {Number|Time=} min The minimum return value.\n\t *  @param {Number|Time=} max The maximum return value.\n\t */\n\tTone.CtrlRandom = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"min\", \"max\"], Tone.CtrlRandom);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The minimum return value\n\t\t *  @type  {Number|Time}\n\t\t */\n\t\tthis.min = options.min;\n\n\t\t/**\n\t\t *  The maximum return value\n\t\t *  @type  {Number|Time}\n\t\t */\n\t\tthis.max = options.max;\n\n\t\t/**\n\t\t *  If the return value should be an integer\n\t\t *  @type  {Boolean}\n\t\t */\n\t\tthis.integer = options.integer;\n\t};\n\n\tTone.extend(Tone.CtrlRandom);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.CtrlRandom.defaults = {\n\t\t\"min\" : 0,\n\t\t\"max\" : 1,\n\t\t\"integer\" : false\n\t};\n\n\t/**\n\t *  Return a random value between min and max. \n\t *  @readOnly\n\t *  @memberOf Tone.CtrlRandom#\n\t *  @type {*}\n\t *  @name value\n\t */\n\tObject.defineProperty(Tone.CtrlRandom.prototype, \"value\", {\n\t\tget : function(){\n\t\t\tvar min = this.toSeconds(this.min);\n\t\t\tvar max = this.toSeconds(this.max);\n\t\t\tvar rand = Math.random(); \n\t\t\tvar val = rand * min + (1 - rand) * max;\n\t\t\tif (this.integer){\n\t\t\t\tval = Math.floor(val);\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t});\n\n\treturn Tone.CtrlRandom;\n});\n","define([\"../core/Tone\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  buses are another way of routing audio\n\t *\n\t *  augments Tone.prototype to include send and receive\n\t */\n\n\t/**\n\t *  All of the routes\n\t *\n\t *  @type {Object}\n\t *  @static\n\t *  @private\n\t */\n\tvar Buses = {};\n\n\t/**\n\t *  Send this signal to the channel name.\n\t *  @param  {String} channelName A named channel to send the signal to.\n\t *  @param  {Decibels} amount The amount of the source to send to the bus.\n\t *  @return {GainNode} The gain node which connects this node to the desired channel.\n\t *                     Can be used to adjust the levels of the send.\n\t *  @example\n\t * source.send(\"reverb\", -12);\n\t */\n\tTone.prototype.send = function(channelName, amount){\n\t\tif (!Buses.hasOwnProperty(channelName)){\n\t\t\tBuses[channelName] = this.context.createGain();\n\t\t}\n\t\tamount = Tone.defaultArg(amount, 0);\n\t\tvar sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(Buses[channelName]);\n\t\treturn sendKnob;\n\t};\n\n\t/**\n\t *  Receive the input from the desired channelName to the input\n\t *\n\t *  @param  {String} channelName A named channel to send the signal to.\n\t *  @param  {Number=} channelNumber The channel to connect to\n\t *  @returns {Tone} this\n\t *  @example\n\t * reverbEffect.receive(\"reverb\");\n\t */\n\tTone.prototype.receive = function(channelName, inputNum){\n\t\tif (!Buses.hasOwnProperty(channelName)){\n\t\t\tBuses[channelName] = this.context.createGain();\n\t\t}\n\t\tBuses[channelName].connect(this, 0, inputNum);\n\t\treturn this;\n\t};\n\n\t//remove all the send/receives when a new audio context is passed in\n\tTone.Context.on(\"init\", function(context){\n\t\tif (context.buses){\n\t\t\tBuses = context.buses;\n\t\t} else {\n\t\t\tBuses = {};\n\t\t\tcontext.buses = Buses;\n\t\t}\n\t});\n\n\treturn Tone;\n});\n","define([\"../core/Tone\", \"../core/Timeline\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t *         always happen _before_ the scheduled time and are not synchronized\n\t *         to the animation frame so they are not good for triggering tightly\n\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t *         \n\t *  @singleton\n\t *  @extends {Tone}\n\t *  @example\n\t * Tone.Transport.schedule(function(time){\n\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t * \tTone.Draw.schedule(function(){\n\t * \t\t//do drawing or DOM manipulation here\n\t * \t}, time)\n\t * }, \"+0.5\")\n\t */\n\tTone.Draw = function(){\n\n\t\tTone.call(this);\n\t\t\n\t\t/**\n\t\t *  All of the events.\n\t\t *  @type  {Tone.Timeline}\n\t\t *  @private\n\t\t */\n\t\tthis._events = new Tone.Timeline();\n\n\t\t/**\n\t\t *  The duration after which events are not invoked.\n\t\t *  @type  {Number}\n\t\t *  @default 0.25\n\t\t */\n\t\tthis.expiration = 0.25;\n\n\t\t/**\n\t\t *  The amount of time before the scheduled time \n\t\t *  that the callback can be invoked. Default is\n\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t *  @type  {Number}\n\t\t *  @default 0.008\n\t\t */\n\t\tthis.anticipation = 0.008;\n\n\t\t/**\n\t\t *  The draw loop\n\t\t *  @type  {Function}\n\t\t *  @private\n\t\t */\n\t\tthis._boundDrawLoop = this._drawLoop.bind(this);\n\t};\n\n\tTone.extend(Tone.Draw);\n\n\t/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t *                              to invoke the callback.\n\t *  @return  {Tone.Draw}    this\n\t */\n\tTone.Draw.prototype.schedule = function(callback, time){\n\t\tthis._events.add({\n\t\t\tcallback : callback,\n\t\t\ttime : this.toSeconds(time)\n\t\t});\n\t\t//start the draw loop on the first event\n\t\tif (this._events.length === 1){\n\t\t\trequestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  {Time=}  after  Time after which scheduled events will \n\t *                          be removed from the scheduling timeline.\n\t *  @return  {Tone.Draw}  this\n\t */\n\tTone.Draw.prototype.cancel = function(after){\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The draw loop\n\t *  @private\n\t */\n\tTone.Draw.prototype._drawLoop = function(){\n\t\tvar now = Tone.context.currentTime;\n\t\twhile (this._events.length && this._events.peek().time - this.anticipation <= now){\n\t\t\tvar event = this._events.shift();\n\t\t\tif (now - event.time <= this.expiration){\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0){\n\t\t\trequestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t};\n\n\t//make a singleton\n\tTone.Draw = new Tone.Draw();\n\n\treturn Tone.Draw;\n});\n","define([\"../core/Tone\", \"../component/CrossFade\", \"../component/Merge\", \"../component/Split\",\n\t\"../signal/Signal\", \"../signal/AudioToGain\", \"../signal/Zero\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space\n\t *          using a right-handed cartesian coordinate system.\n\t *          The units used in the coordinate system are not defined;\n\t *          these coordinates are independent/invariant of any particular\n\t *          units such as meters or feet. Tone.Panner3D objects have an forward\n\t *          vector representing the direction the sound is projecting. Additionally,\n\t *          they have a sound cone representing how directional the sound is.\n\t *          For example, the sound could be omnidirectional, in which case it would\n\t *          be heard anywhere regardless of its forward, or it can be more directional\n\t *          and heard only if it is facing the listener. Tone.Listener objects\n\t *          (representing a person's ears) have an forward and up vector\n\t *          representing in which direction the person is facing. Because both the\n\t *          source stream and the listener can be moving, they both have a velocity\n\t *          vector representing both the speed and direction of movement. Taken together,\n\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t *          <br><br>\n\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @singleton\n\t */\n\tTone.Listener = function(){\n\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  Holds the current forward orientation\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._orientation = [0, 0, 0, 0, 0, 0];\n\n\t\t/**\n\t\t *  Holds the current position\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._position = [0, 0, 0];\n\n\t\tTone.getContext(function(){\n\t\t\t// set the default position/forward\n\t\t\tthis.set(ListenerConstructor.defaults);\n\n\t\t\t//listener is a singleton so it adds itself to the context\n\t\t\tthis.context.listener = this;\n\t\t}.bind(this));\n\n\t};\n\n\tTone.extend(Tone.Listener);\n\n\t/**\n\t *  Defaults according to the specification\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Listener.defaults = {\n\t\t\"positionX\" : 0,\n\t\t\"positionY\" : 0,\n\t\t\"positionZ\" : 0,\n\t\t\"forwardX\" : 0,\n\t\t\"forwardY\" : 0,\n\t\t\"forwardZ\" : 1,\n\t\t\"upX\" : 0,\n\t\t\"upY\" : 1,\n\t\t\"upZ\" : 0\n\t};\n\n\t/**\n\t * Is an instanceof Tone.Listener\n\t * @type {Boolean}\n\t */\n\tTone.Listener.prototype.isListener = true;\n\n\t/**\n\t * The ramp time which is applied to the setTargetAtTime\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.Listener.prototype._rampTimeConstant = 0.01;\n\n\t/**\n\t *  Sets the position of the listener in 3d space.\n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @return {Tone.Listener} this\n\t */\n\tTone.Listener.prototype.setPosition = function(x, y, z){\n\t\tif (this.context.rawContext.listener.positionX){\n\t\t\tvar now = this.now();\n\t\t\tthis.context.rawContext.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t\tthis.context.rawContext.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t\tthis.context.rawContext.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t} else {\n\t\t\tthis.context.rawContext.listener.setPosition(x, y, z);\n\t\t}\n\t\tthis._position = Array.prototype.slice.call(arguments);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sets the orientation of the listener using two vectors, the forward\n\t *  vector (which direction the listener is facing) and the up vector\n\t *  (which the up direction of the listener). An up vector\n\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction.\n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @param  {Number}  upX\n\t *  @param  {Number}  upY\n\t *  @param  {Number}  upZ\n\t *  @return {Tone.Listener} this\n\t */\n\tTone.Listener.prototype.setOrientation = function(x, y, z, upX, upY, upZ){\n\t\tif (this.context.rawContext.listener.forwardX){\n\t\t\tvar now = this.now();\n\t\t\tthis.context.rawContext.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t\t\tthis.context.rawContext.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t\t\tthis.context.rawContext.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t\t\tthis.context.rawContext.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t\t\tthis.context.rawContext.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t\t\tthis.context.rawContext.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t\t} else {\n\t\t\tthis.context.rawContext.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t\t}\n\t\tthis._orientation = Array.prototype.slice.call(arguments);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The x position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name positionX\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"positionX\", {\n\t\tset : function(pos){\n\t\t\tthis._position[0] = pos;\n\t\t\tthis.setPosition.apply(this, this._position);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._position[0];\n\t\t}\n\t});\n\n\t/**\n\t *  The y position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name positionY\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"positionY\", {\n\t\tset : function(pos){\n\t\t\tthis._position[1] = pos;\n\t\t\tthis.setPosition.apply(this, this._position);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._position[1];\n\t\t}\n\t});\n\n\t/**\n\t *  The z position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name positionZ\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"positionZ\", {\n\t\tset : function(pos){\n\t\t\tthis._position[2] = pos;\n\t\t\tthis.setPosition.apply(this, this._position);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._position[2];\n\t\t}\n\t});\n\n\t/**\n\t *  The x coordinate of the listeners front direction. i.e.\n\t *  which way they are facing.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name forwardX\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"forwardX\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[0] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[0];\n\t\t}\n\t});\n\n\t/**\n\t *  The y coordinate of the listeners front direction. i.e.\n\t *  which way they are facing.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name forwardY\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"forwardY\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[1] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[1];\n\t\t}\n\t});\n\n\t/**\n\t *  The z coordinate of the listeners front direction. i.e.\n\t *  which way they are facing.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name forwardZ\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"forwardZ\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[2] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[2];\n\t\t}\n\t});\n\n\t/**\n\t *  The x coordinate of the listener's up direction. i.e.\n\t *  the direction the listener is standing in.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name upX\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"upX\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[3] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[3];\n\t\t}\n\t});\n\n\t/**\n\t *  The y coordinate of the listener's up direction. i.e.\n\t *  the direction the listener is standing in.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name upY\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"upY\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[4] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[4];\n\t\t}\n\t});\n\n\t/**\n\t *  The z coordinate of the listener's up direction. i.e.\n\t *  the direction the listener is standing in.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name upZ\n\t */\n\tObject.defineProperty(Tone.Listener.prototype, \"upZ\", {\n\t\tset : function(pos){\n\t\t\tthis._orientation[5] = pos;\n\t\t\tthis.setOrientation.apply(this, this._orientation);\n\t\t},\n\t\tget : function(){\n\t\t\treturn this._orientation[5];\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Listener} this\n\t */\n\tTone.Listener.prototype.dispose = function(){\n\t\tthis._orientation = null;\n\t\tthis._position = null;\n\t\treturn this;\n\t};\n\n\t//SINGLETON SETUP\n\tvar ListenerConstructor = Tone.Listener;\n\tTone.Listener = new ListenerConstructor();\n\n\tTone.Context.on(\"init\", function(context){\n\t\tif (context.listener && context.listener.isListener){\n\t\t\t//a single listener object\n\t\t\tTone.Listener = context.listener;\n\t\t} else {\n\t\t\t//make new Listener insides\n\t\t\tTone.Listener = new ListenerConstructor();\n\t\t}\n\t});\n\t//END SINGLETON SETUP\n\n\treturn Tone.Listener;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../component/LFO\", \"../component/Filter\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t *         and depth.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t *  @example\n\t * //create an autofilter and start it's LFO\n\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t * //route an oscillator through the filter and start it\n\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t */\n\tTone.AutoFilter = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"baseFrequency\", \"octaves\"], Tone.AutoFilter);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  the lfo which drives the filter cutoff\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfo = new Tone.LFO({\n\t\t\t\"frequency\" : options.frequency,\n\t\t\t\"amplitude\" : options.depth,\n\t\t});\n\n\t\t/**\n\t\t * The range of the filter modulating between the min and max frequency. \n\t\t * 0 = no modulation. 1 = full modulation.\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t */\n\t\tthis.depth = this._lfo.amplitude;\n\n\t\t/**\n\t\t * How fast the filter modulates between min and max. \n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\t/**\n\t\t *  The filter node\n\t\t *  @type {Tone.Filter}\n\t\t */\n\t\tthis.filter = new Tone.Filter(options.filter);\n\n\t\t/**\n\t\t *  The octaves placeholder\n\t\t *  @type {Positive}\n\t\t *  @private\n\t\t */\n\t\tthis._octaves = 0;\n\n\t\t//connections\n\t\tthis.connectEffect(this.filter);\n\t\tthis._lfo.connect(this.filter.frequency);\n\t\tthis.type = options.type;\n\t\tthis._readOnly([\"frequency\", \"depth\"]);\n\t\tthis.octaves = options.octaves;\n\t\tthis.baseFrequency = options.baseFrequency;\n\t};\n\n\t//extend Effect\n\tTone.extend(Tone.AutoFilter, Tone.Effect);\n\n\t/**\n\t *  defaults\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.AutoFilter.defaults = {\n\t\t\"frequency\" : 1,\n\t\t\"type\" : \"sine\",\n\t\t\"depth\" : 1,\n\t\t\"baseFrequency\" : 200,\n\t\t\"octaves\" : 2.6,\n\t\t\"filter\" : {\n\t\t\t\"type\" : \"lowpass\",\n\t\t\t\"rolloff\" : -12,\n\t\t\t\"Q\" : 1,\n\t\t}\n\t};\n\t\n\t/**\n\t * Start the effect.\n\t * @param {Time} [time=now] When the LFO will start. \n\t * @returns {Tone.AutoFilter} this\n\t */\n\tTone.AutoFilter.prototype.start = function(time){\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stop the effect.\n\t * @param {Time} [time=now] When the LFO will stop. \n\t * @returns {Tone.AutoFilter} this\n\t */\n\tTone.AutoFilter.prototype.stop = function(time){\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sync the filter to the transport.\n\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t *                               Transport has started. \n\t * @returns {Tone.AutoFilter} this\n\t */\n\tTone.AutoFilter.prototype.sync = function(delay){\n\t\tthis._lfo.sync(delay);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Unsync the filter from the transport.\n\t * @returns {Tone.AutoFilter} this\n\t */\n\tTone.AutoFilter.prototype.unsync = function(){\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t};\n\n\t/**\n\t * Type of oscillator attached to the AutoFilter. \n\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t * @memberOf Tone.AutoFilter#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.AutoFilter.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._lfo.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._lfo.type = type;\n\t\t}\n\t});\n\n\t/**\n\t * The minimum value of the filter's cutoff frequency.\n\t * @memberOf Tone.AutoFilter#\n\t * @type {Frequency}\n\t * @name baseFrequency\n\t */\n\tObject.defineProperty(Tone.AutoFilter.prototype, \"baseFrequency\", {\n\t\tget : function(){\n\t\t\treturn this._lfo.min;\n\t\t},\n\t\tset : function(freq){\n\t\t\tthis._lfo.min = this.toFrequency(freq);\n\t\t\t//and set the max\n\t\t\tthis.octaves = this._octaves;\n\t\t}\n\t});\n\n\t/**\n\t * The maximum value of the filter's cutoff frequency. \n\t * @memberOf Tone.AutoFilter#\n\t * @type {Positive}\n\t * @name octaves\n\t */\n\tObject.defineProperty(Tone.AutoFilter.prototype, \"octaves\", {\n\t\tget : function(){\n\t\t\treturn this._octaves;\n\t\t},\n\t\tset : function(oct){\n\t\t\tthis._octaves = oct;\n\t\t\tthis._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up. \n\t *  @returns {Tone.AutoFilter} this\n\t */\n\tTone.AutoFilter.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._lfo.dispose();\n\t\tthis._lfo = null;\n\t\tthis.filter.dispose();\n\t\tthis.filter = null;\n\t\tthis._writable([\"frequency\", \"depth\"]);\n\t\tthis.frequency = null;\n\t\tthis.depth = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AutoFilter;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../component/LFO\", \"../component/Panner\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t *  @example\n\t * //create an autopanner and start it's LFO\n\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t * //route an oscillator through the panner and start it\n\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t */\n\tTone.AutoPanner = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\"], Tone.AutoPanner);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  the lfo which drives the panning\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfo = new Tone.LFO({\n\t\t\t\"frequency\" : options.frequency,\n\t\t\t\"amplitude\" : options.depth,\n\t\t\t\"min\" : -1,\n\t\t\t\"max\" : 1,\n\t\t});\n\n\t\t/**\n\t\t * The amount of panning between left and right. \n\t\t * 0 = always center. 1 = full range between left and right. \n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t */\n\t\tthis.depth = this._lfo.amplitude;\n\n\t\t/**\n\t\t *  the panner node which does the panning\n\t\t *  @type {Tone.Panner}\n\t\t *  @private\n\t\t */\n\t\tthis._panner = new Tone.Panner();\n\n\t\t/**\n\t\t * How fast the panner modulates between left and right. \n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\t//connections\n\t\tthis.connectEffect(this._panner);\n\t\tthis._lfo.connect(this._panner.pan);\n\t\tthis.type = options.type;\n\t\tthis._readOnly([\"depth\", \"frequency\"]);\n\t};\n\n\t//extend Effect\n\tTone.extend(Tone.AutoPanner, Tone.Effect);\n\n\t/**\n\t *  defaults\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.AutoPanner.defaults = {\n\t\t\"frequency\" : 1,\n\t\t\"type\" : \"sine\",\n\t\t\"depth\" : 1\n\t};\n\t\n\t/**\n\t * Start the effect.\n\t * @param {Time} [time=now] When the LFO will start. \n\t * @returns {Tone.AutoPanner} this\n\t */\n\tTone.AutoPanner.prototype.start = function(time){\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stop the effect.\n\t * @param {Time} [time=now] When the LFO will stop. \n\t * @returns {Tone.AutoPanner} this\n\t */\n\tTone.AutoPanner.prototype.stop = function(time){\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sync the panner to the transport.\n\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t *                               Transport has started. \n\t * @returns {Tone.AutoPanner} this\n\t */\n\tTone.AutoPanner.prototype.sync = function(delay){\n\t\tthis._lfo.sync(delay);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Unsync the panner from the transport\n\t * @returns {Tone.AutoPanner} this\n\t */\n\tTone.AutoPanner.prototype.unsync = function(){\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t};\n\n\t/**\n\t * Type of oscillator attached to the AutoFilter. \n\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t * @memberOf Tone.AutoFilter#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.AutoPanner.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._lfo.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._lfo.type = type;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.AutoPanner} this\n\t */\n\tTone.AutoPanner.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._lfo.dispose();\n\t\tthis._lfo = null;\n\t\tthis._panner.dispose();\n\t\tthis._panner = null;\n\t\tthis._writable([\"depth\", \"frequency\"]);\n\t\tthis.frequency = null;\n\t\tthis.depth = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AutoPanner;\n});\n","define([\"../core/Tone\", \"../component/Follower\", \"../signal/ScaleExp\",\n\t\"../effect/Effect\", \"../component/Filter\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t *          The frequency of the filter is adjusted proportionally to the\n\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set\n\t *                                            to at the low point of the wah\n\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t *                                the filter will sweep to when fully open\n\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for\n\t *                                   the incoming signal. Normal range of -40 to 0.\n\t *  @example\n\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t * //initialize the synth and connect to autowah\n\t * var synth = new Synth.connect(autoWah);\n\t * //Q value influences the effect of the wah - default is 2\n\t * autoWah.Q.value = 6;\n\t * //more audible on higher notes\n\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t */\n\tTone.AutoWah = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"], Tone.AutoWah);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  The envelope follower. Set the attack/release\n\t\t *  timing to adjust how the envelope is followed.\n\t\t *  @type {Tone.Follower}\n\t\t *  @private\n\t\t */\n\t\tthis.follower = new Tone.Follower(options.follower);\n\n\t\t/**\n\t\t *  scales the follower value to the frequency domain\n\t\t *  @type {Tone}\n\t\t *  @private\n\t\t */\n\t\tthis._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\n\t\t/**\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._baseFrequency = options.baseFrequency;\n\n\t\t/**\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._octaves = options.octaves;\n\n\t\t/**\n\t\t *  the input gain to adjust the sensitivity\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._inputBoost = new Tone.Gain();\n\n\t\t/**\n\t\t *  @type {BiquadFilterNode}\n\t\t *  @private\n\t\t */\n\t\tthis._bandpass = new Tone.Filter({\n\t\t\t\"rolloff\" : -48,\n\t\t\t\"frequency\" : 0,\n\t\t\t\"Q\" : options.Q,\n\t\t});\n\n\t\t/**\n\t\t *  @type {Tone.Filter}\n\t\t *  @private\n\t\t */\n\t\tthis._peaking = new Tone.Filter(0, \"peaking\");\n\t\tthis._peaking.gain.value = options.gain;\n\n\t\t/**\n\t\t * The gain of the filter.\n\t\t * @type {Number}\n\t\t * @signal\n\t\t */\n\t\tthis.gain = this._peaking.gain;\n\n\t\t/**\n\t\t * The quality of the filter.\n\t\t * @type {Positive}\n\t\t * @signal\n\t\t */\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t//the control signal path\n\t\tthis.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t//the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t//set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\tthis._readOnly([\"gain\", \"Q\"]);\n\t};\n\n\tTone.extend(Tone.AutoWah, Tone.Effect);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.AutoWah.defaults = {\n\t\t\"baseFrequency\" : 100,\n\t\t\"octaves\" : 6,\n\t\t\"sensitivity\" : 0,\n\t\t\"Q\" : 2,\n\t\t\"gain\" : 2,\n\t\t\"follower\" : {\n\t\t\t\"attack\" : 0.3,\n\t\t\t\"release\" : 0.5\n\t\t}\n\t};\n\n\t/**\n\t * The number of octaves that the filter will sweep above the\n\t * baseFrequency.\n\t * @memberOf Tone.AutoWah#\n\t * @type {Number}\n\t * @name octaves\n\t */\n\tObject.defineProperty(Tone.AutoWah.prototype, \"octaves\", {\n\t\tget : function(){\n\t\t\treturn this._octaves;\n\t\t},\n\t\tset : function(octaves){\n\t\t\tthis._octaves = octaves;\n\t\t\tthis._setSweepRange();\n\t\t}\n\t});\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t * @memberOf Tone.AutoWah#\n\t * @type {Frequency}\n\t * @name baseFrequency\n\t */\n\tObject.defineProperty(Tone.AutoWah.prototype, \"baseFrequency\", {\n\t\tget : function(){\n\t\t\treturn this._baseFrequency;\n\t\t},\n\t\tset : function(baseFreq){\n\t\t\tthis._baseFrequency = baseFreq;\n\t\t\tthis._setSweepRange();\n\t\t}\n\t});\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t * @memberOf Tone.AutoWah#\n\t * @type {Decibels}\n\t * @name sensitivity\n\t */\n\tObject.defineProperty(Tone.AutoWah.prototype, \"sensitivity\", {\n\t\tget : function(){\n\t\t\treturn Tone.gainToDb(1 / this._inputBoost.gain.value);\n\t\t},\n\t\tset : function(sensitivy){\n\t\t\tthis._inputBoost.gain.value = 1 / Tone.dbToGain(sensitivy);\n\t\t}\n\t});\n\n\t/**\n\t *  sets the sweep range of the scaler\n\t *  @private\n\t */\n\tTone.AutoWah.prototype._setSweepRange = function(){\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.AutoWah} this\n\t */\n\tTone.AutoWah.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis.follower.dispose();\n\t\tthis.follower = null;\n\t\tthis._sweepRange.dispose();\n\t\tthis._sweepRange = null;\n\t\tthis._bandpass.dispose();\n\t\tthis._bandpass = null;\n\t\tthis._peaking.dispose();\n\t\tthis._peaking = null;\n\t\tthis._inputBoost.dispose();\n\t\tthis._inputBoost = null;\n\t\tthis._writable([\"gain\", \"Q\"]);\n\t\tthis.gain = null;\n\t\tthis.Q = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AutoWah;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../signal/Subtract\", \"../signal/Modulo\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth.\n\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t *                       of 1 to 8.\n\t *  @example\n\t * //initialize crusher and route a synth through it\n\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t */\n\tTone.BitCrusher = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"bits\"], Tone.BitCrusher);\n\t\tTone.Effect.call(this, options);\n\n\t\tvar invStepSize = 1 / Math.pow(2, options.bits - 1);\n\n\t\t/**\n\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t *  @type {Tone.Subtract}\n\t\t *  @private\n\t\t */\n\t\tthis._subtract = new Tone.Subtract();\n\n\t\t/**\n\t\t *  The mod function\n\t\t *  @type  {Tone.Modulo}\n\t\t *  @private\n\t\t */\n\t\tthis._modulo = new Tone.Modulo(invStepSize);\n\n\t\t/**\n\t\t *  keeps track of the bits\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._bits = options.bits;\n\n\t\t//connect it up\n\t\tthis.effectSend.fan(this._subtract, this._modulo);\n\t\tthis._modulo.connect(this._subtract, 0, 1);\n\t\tthis._subtract.connect(this.effectReturn);\n\t};\n\n\tTone.extend(Tone.BitCrusher, Tone.Effect);\n\n\t/**\n\t *  the default values\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.BitCrusher.defaults = {\n\t\t\"bits\" : 4\n\t};\n\n\t/**\n\t * The bit depth of the effect. Nominal range of 1-8.\n\t * @memberOf Tone.BitCrusher#\n\t * @type {number}\n\t * @name bits\n\t */\n\tObject.defineProperty(Tone.BitCrusher.prototype, \"bits\", {\n\t\tget : function(){\n\t\t\treturn this._bits;\n\t\t},\n\t\tset : function(bits){\n\t\t\tthis._bits = bits;\n\t\t\tvar invStepSize = 1 / Math.pow(2, bits - 1);\n\t\t\tthis._modulo.value = invStepSize;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.BitCrusher} this\n\t */\n\tTone.BitCrusher.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._subtract.dispose();\n\t\tthis._subtract = null;\n\t\tthis._modulo.dispose();\n\t\tthis._modulo = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.BitCrusher;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../signal/WaveShaper\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t *         for making different types of distortion sounds.\n\t *         Note that odd orders sound very different from even ones, \n\t *         and order = 1 is no change. \n\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t *  @example\n\t * //create a new cheby\n\t * var cheby = new Tone.Chebyshev(50);\n\t * //create a monosynth connected to our cheby\n\t * synth = new Tone.MonoSynth().connect(cheby);\n\t */\n\tTone.Chebyshev = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"order\"], Tone.Chebyshev);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  @type {WaveShaperNode}\n\t\t *  @private\n\t\t */\n\t\tthis._shaper = new Tone.WaveShaper(4096);\n\n\t\t/**\n\t\t * holds onto the order of the filter\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis._order = options.order;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.order = options.order;\n\t\tthis.oversample = options.oversample;\n\t};\n\n\tTone.extend(Tone.Chebyshev, Tone.Effect);\n\n\t/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Chebyshev.defaults = {\n\t\t\"order\" : 1,\n\t\t\"oversample\" : \"none\"\n\t};\n\n\t/**\n\t *  get the coefficient for that degree\n\t *  @param {number} x the x value\n\t *  @param   {number} degree \n\t *  @param {Object} memo memoize the computed value. \n\t *                       this speeds up computation greatly. \n\t *  @return  {number}       the coefficient \n\t *  @private\n\t */\n\tTone.Chebyshev.prototype._getCoefficient = function(x, degree, memo){\n\t\tif (memo.hasOwnProperty(degree)){\n\t\t\treturn memo[degree];\n\t\t} else if (degree === 0){\n\t\t\tmemo[degree] = 0;\n\t\t} else if (degree === 1){\n\t\t\tmemo[degree] = x;\n\t\t} else {\n\t\t\tmemo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t\t}\n\t\treturn memo[degree];\n\t};\n\n\t/**\n\t * The order of the Chebyshev polynomial which creates\n\t * the equation which is applied to the incoming \n\t * signal through a Tone.WaveShaper. The equations\n\t * are in the form:<br>\n\t * order 2: 2x^2 + 1<br>\n\t * order 3: 4x^3 + 3x <br>\n\t * @memberOf Tone.Chebyshev#\n\t * @type {Positive}\n\t * @name order\n\t */\n\tObject.defineProperty(Tone.Chebyshev.prototype, \"order\", {\n\t\tget : function(){\n\t\t\treturn this._order;\n\t\t},\n\t\tset : function(order){\n\t\t\tthis._order = order;\n\t\t\tvar curve = new Array(4096);\n\t\t\tvar len = curve.length;\n\t\t\tfor (var i = 0; i < len; ++i){\n\t\t\t\tvar x = i * 2 / len - 1;\n\t\t\t\tif (x === 0){\n\t\t\t\t\t//should output 0 when input is 0\n\t\t\t\t\tcurve[i] = 0;\n\t\t\t\t} else {\n\t\t\t\t\tcurve[i] = this._getCoefficient(x, order, {});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._shaper.curve = curve;\n\t\t} \n\t});\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t * @memberOf Tone.Chebyshev#\n\t * @type {string}\n\t * @name oversample\n\t */\n\tObject.defineProperty(Tone.Chebyshev.prototype, \"oversample\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.oversample;\n\t\t},\n\t\tset : function(oversampling){\n\t\t\tthis._shaper.oversample = oversampling;\n\t\t} \n\t});\n\n\t/**\n\t *  Clean up. \n\t *  @returns {Tone.Chebyshev} this\n\t */\n\tTone.Chebyshev.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._shaper.dispose();\n\t\tthis._shaper = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Chebyshev;\n});\n","define([\"../core/Tone\", \"../component/LFO\", \"../effect/StereoEffect\", \"../core/Delay\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Chorus is a stereo chorus effect composed of\n\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel.\n\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t *\n\t *\t@constructor\n\t *\t@extends {Tone.StereoEffect}\n\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms.\n\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t *\t@example\n\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t */\n\tTone.Chorus = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"delayTime\", \"depth\"], Tone.Chorus);\n\t\tTone.StereoEffect.call(this, options);\n\n\t\t/**\n\t\t *  the depth of the chorus\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._depth = options.depth;\n\n\t\t/**\n\t\t *  the delayTime\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._delayTime = options.delayTime / 1000;\n\n\t\t/**\n\t\t *  the lfo which controls the delayTime\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoL = new Tone.LFO({\n\t\t\t\"frequency\" : options.frequency,\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : 1,\n\t\t});\n\n\t\t/**\n\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoR = new Tone.LFO({\n\t\t\t\"frequency\" : options.frequency,\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : 1,\n\t\t\t\"phase\" : 180\n\t\t});\n\n\t\t/**\n\t\t *  delay for left\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._delayNodeL = new Tone.Delay();\n\n\t\t/**\n\t\t *  delay for right\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._delayNodeR = new Tone.Delay();\n\n\t\t/**\n\t\t * The frequency of the LFO which modulates the delayTime.\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */\n\t\tthis.frequency = this._lfoL.frequency;\n\n\t\t//connections\n\t\tthis.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t\tthis.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t\t//and pass through to make the detune apparent\n\t\tthis.effectSendL.connect(this.effectReturnL);\n\t\tthis.effectSendR.connect(this.effectReturnR);\n\t\t//lfo setup\n\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t//start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\t//have one LFO frequency control the other\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t//set the initial values\n\t\tthis.depth = this._depth;\n\t\tthis.frequency.value = options.frequency;\n\t\tthis.type = options.type;\n\t\tthis._readOnly([\"frequency\"]);\n\t\tthis.spread = options.spread;\n\t};\n\n\tTone.extend(Tone.Chorus, Tone.StereoEffect);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.Chorus.defaults = {\n\t\t\"frequency\" : 1.5,\n\t\t\"delayTime\" : 3.5,\n\t\t\"depth\" : 0.7,\n\t\t\"type\" : \"sine\",\n\t\t\"spread\" : 180\n\t};\n\n\t/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t * @memberOf Tone.Chorus#\n\t * @type {NormalRange}\n\t * @name depth\n\t */\n\tObject.defineProperty(Tone.Chorus.prototype, \"depth\", {\n\t\tget : function(){\n\t\t\treturn this._depth;\n\t\t},\n\t\tset : function(depth){\n\t\t\tthis._depth = depth;\n\t\t\tvar deviation = this._delayTime * depth;\n\t\t\tthis._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\t\tthis._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\t\tthis._lfoR.max = this._delayTime + deviation;\n\t\t}\n\t});\n\n\t/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms.\n\t * @memberOf Tone.Chorus#\n\t * @type {Milliseconds}\n\t * @name delayTime\n\t */\n\tObject.defineProperty(Tone.Chorus.prototype, \"delayTime\", {\n\t\tget : function(){\n\t\t\treturn this._delayTime * 1000;\n\t\t},\n\t\tset : function(delayTime){\n\t\t\tthis._delayTime = delayTime / 1000;\n\t\t\tthis.depth = this._depth;\n\t\t}\n\t});\n\n\t/**\n\t * The oscillator type of the LFO.\n\t * @memberOf Tone.Chorus#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.Chorus.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._lfoL.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._lfoL.type = type;\n\t\t\tthis._lfoR.type = type;\n\t\t}\n\t});\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t * @memberOf Tone.Chorus#\n\t * @type {Degrees}\n\t * @name spread\n\t */\n\tObject.defineProperty(Tone.Chorus.prototype, \"spread\", {\n\t\tget : function(){\n\t\t\treturn this._lfoR.phase - this._lfoL.phase;\n\t\t},\n\t\tset : function(spread){\n\t\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\t\tthis._lfoR.phase = (spread/2) + 90;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Chorus} this\n\t */\n\tTone.Chorus.prototype.dispose = function(){\n\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoL = null;\n\t\tthis._lfoR.dispose();\n\t\tthis._lfoR = null;\n\t\tthis._delayNodeL.dispose();\n\t\tthis._delayNodeL = null;\n\t\tthis._delayNodeR.dispose();\n\t\tthis._delayNodeR = null;\n\t\tthis._writable(\"frequency\");\n\t\tthis.frequency = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Chorus;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../signal/WaveShaper\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t *  @example\n\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t * var fm = new Tone.SimpleFM().connect(dist);\n\t * //this sounds good on bass notes\n\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t */\n\tTone.Distortion = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"distortion\"], Tone.Distortion);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  @type {Tone.WaveShaper}\n\t\t *  @private\n\t\t */\n\t\tthis._shaper = new Tone.WaveShaper(4096);\n\n\t\t/**\n\t\t * holds the distortion amount\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis._distortion = options.distortion;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.distortion = options.distortion;\n\t\tthis.oversample = options.oversample;\n\t};\n\n\tTone.extend(Tone.Distortion, Tone.Effect);\n\n\t/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Distortion.defaults = {\n\t\t\"distortion\" : 0.4,\n\t\t\"oversample\" : \"none\"\n\t};\n\n\t/**\n\t * The amount of distortion.\n\t * @memberOf Tone.Distortion#\n\t * @type {NormalRange}\n\t * @name distortion\n\t */\n\tObject.defineProperty(Tone.Distortion.prototype, \"distortion\", {\n\t\tget : function(){\n\t\t\treturn this._distortion;\n\t\t},\n\t\tset : function(amount){\n\t\t\tthis._distortion = amount;\n\t\t\tvar k = amount * 100;\n\t\t\tvar deg = Math.PI / 180;\n\t\t\tthis._shaper.setMap(function(x){\n\t\t\t\tif (Math.abs(x) < 0.001){\n\t\t\t\t\t//should output 0 when input is 0\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t\t\t\t}\n\t\t\t});\n\t\t} \n\t});\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t * @memberOf Tone.Distortion#\n\t * @type {string}\n\t * @name oversample\n\t */\n\tObject.defineProperty(Tone.Distortion.prototype, \"oversample\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.oversample;\n\t\t},\n\t\tset : function(oversampling){\n\t\t\tthis._shaper.oversample = oversampling;\n\t\t} \n\t});\n\n\t/**\n\t *  Clean up. \n\t *  @returns {Tone.Distortion} this\n\t */\n\tTone.Distortion.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._shaper.dispose();\n\t\tthis._shaper = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Distortion;\n});\n","define([\"../core/Tone\", \"../effect/FeedbackEffect\", \"../signal/Signal\", \"../core/Delay\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t *          signal is fed back into the delay.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.FeedbackEffect}\n\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal.\n\t *  @param {NormalRange=} feedback The amount of the effected signal which\n\t *                            is fed back through the delay.\n\t *  @example\n\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t * var tom = new Tone.DrumSynth({\n\t * \t\"octaves\" : 4,\n\t * \t\"pitchDecay\" : 0.1\n\t * }).connect(feedbackDelay);\n\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t */\n\tTone.FeedbackDelay = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"delayTime\", \"feedback\"], Tone.FeedbackDelay);\n\t\tTone.FeedbackEffect.call(this, options);\n\n\t\t/**\n\t\t *  the delay node\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._delayNode = new Tone.Delay(options.delayTime, options.maxDelay);\n\n\t\t/**\n\t\t *  The delayTime of the DelayNode.\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\tthis._readOnly([\"delayTime\"]);\n\t};\n\n\tTone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\n\t/**\n\t *  The default values.\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.FeedbackDelay.defaults = {\n\t\t\"delayTime\" : 0.25,\n\t\t\"maxDelay\" : 1\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.FeedbackDelay} this\n\t */\n\tTone.FeedbackDelay.prototype.dispose = function(){\n\t\tTone.FeedbackEffect.prototype.dispose.call(this);\n\t\tthis._delayNode.dispose();\n\t\tthis._delayNode = null;\n\t\tthis._writable([\"delayTime\"]);\n\t\tthis.delayTime = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.FeedbackDelay;\n});\n","define([\"../core/Tone\", \"../component/LowpassCombFilter\", \"../effect/StereoEffect\",\n\t\"../signal/Signal\", \"../component/Split\", \"../component/Merge\", \"../signal/ScaleExp\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  an array of comb filter delay values from Freeverb implementation\n\t *  @static\n\t *  @private\n\t *  @type {Array}\n\t */\n\tvar combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n\t/**\n\t *  an array of allpass filter frequency values from Freeverb implementation\n\t *  @private\n\t *  @static\n\t *  @type {Array}\n\t */\n\tvar allpassFilterFrequencies = [225, 556, 441, 341];\n\n\t/**\n\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.\n\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part\n\t *                                 of the reverb.\n\t *  @example\n\t * var freeverb = new Tone.Freeverb().toMaster();\n\t * freeverb.dampening.value = 1000;\n\t * //routing synth through the reverb\n\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t */\n\tTone.Freeverb = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"roomSize\", \"dampening\"], Tone.Freeverb);\n\t\tTone.StereoEffect.call(this, options);\n\n\t\t/**\n\t\t *  The roomSize value between. A larger roomSize\n\t\t *  will result in a longer decay.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  The amount of dampening of the reverberant signal.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  the comb filters\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._combFilters = [];\n\n\t\t/**\n\t\t *  the allpass filters on the left\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._allpassFiltersL = [];\n\n\t\t/**\n\t\t *  the allpass filters on the right\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._allpassFiltersR = [];\n\n\t\t//make the allpass filters on the right\n\t\tfor (var l = 0; l < allpassFilterFrequencies.length; l++){\n\t\t\tvar allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = allpassFilterFrequencies[l];\n\t\t\tthis._allpassFiltersL.push(allpassL);\n\t\t}\n\n\t\t//make the allpass filters on the left\n\t\tfor (var r = 0; r < allpassFilterFrequencies.length; r++){\n\t\t\tvar allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = allpassFilterFrequencies[r];\n\t\t\tthis._allpassFiltersR.push(allpassR);\n\t\t}\n\n\t\t//make the comb filters\n\t\tfor (var c = 0; c < combFilterTunings.length; c++){\n\t\t\tvar lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t\t\tif (c < combFilterTunings.length / 2){\n\t\t\t\tthis.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t\t\t} else {\n\t\t\t\tthis.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\tthis.dampening.connect(lfpf.dampening);\n\t\t\tthis._combFilters.push(lfpf);\n\t\t}\n\n\t\t//chain the allpass filters togetehr\n\t\tTone.connectSeries.apply(Tone, this._allpassFiltersL);\n\t\tTone.connectSeries.apply(Tone, this._allpassFiltersR);\n\t\tthis._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t\tthis._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t\tthis._readOnly([\"roomSize\", \"dampening\"]);\n\t};\n\n\tTone.extend(Tone.Freeverb, Tone.StereoEffect);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.Freeverb.defaults = {\n\t\t\"roomSize\" : 0.7,\n\t\t\"dampening\" : 3000\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Freeverb} this\n\t */\n\tTone.Freeverb.prototype.dispose = function(){\n\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\tfor (var al = 0; al < this._allpassFiltersL.length; al++){\n\t\t\tthis._allpassFiltersL[al].disconnect();\n\t\t\tthis._allpassFiltersL[al] = null;\n\t\t}\n\t\tthis._allpassFiltersL = null;\n\t\tfor (var ar = 0; ar < this._allpassFiltersR.length; ar++){\n\t\t\tthis._allpassFiltersR[ar].disconnect();\n\t\t\tthis._allpassFiltersR[ar] = null;\n\t\t}\n\t\tthis._allpassFiltersR = null;\n\t\tfor (var cf = 0; cf < this._combFilters.length; cf++){\n\t\t\tthis._combFilters[cf].dispose();\n\t\t\tthis._combFilters[cf] = null;\n\t\t}\n\t\tthis._combFilters = null;\n\t\tthis._writable([\"roomSize\", \"dampening\"]);\n\t\tthis.roomSize.dispose();\n\t\tthis.roomSize = null;\n\t\tthis.dampening.dispose();\n\t\tthis.dampening = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Freeverb;\n});\n","define([\"../core/Tone\", \"../component/FeedbackCombFilter\", \"../effect/StereoEffect\", \"../signal/Scale\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  an array of the comb filter delay time values\n\t *  @private\n\t *  @static\n\t *  @type {Array}\n\t */\n\tvar combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n\t/**\n\t *  the resonances of each of the comb filters\n\t *  @private\n\t *  @static\n\t *  @type {Array}\n\t */\n\tvar combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n\t/**\n\t *  the allpass filter frequencies\n\t *  @private\n\t *  @static\n\t *  @type {Array}\n\t */\n\tvar allpassFilterFreqs = [347, 113, 37];\n\n\t/**\n\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t *         tuned by John Chowning in 1970.\n\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter.\n\t *\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t *  @example\n\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t * var delay = new Tone.FeedbackDelay(0.5);\n\t * //connecting the synth to reverb through delay\n\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t */\n\tTone.JCReverb = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"roomSize\"], Tone.JCReverb);\n\t\tTone.StereoEffect.call(this, options);\n\n\t\t/**\n\t\t *  room size control values between [0,1]\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  scale the room size\n\t\t *  @type {Tone.Scale}\n\t\t *  @private\n\t\t */\n\t\tthis._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\n\t\t/**\n\t\t *  a series of allpass filters\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._allpassFilters = [];\n\n\t\t/**\n\t\t *  parallel feedback comb filters\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._feedbackCombFilters = [];\n\n\t\t//make the allpass filters\n\t\tfor (var af = 0; af < allpassFilterFreqs.length; af++){\n\t\t\tvar allpass = this.context.createBiquadFilter();\n\t\t\tallpass.type = \"allpass\";\n\t\t\tallpass.frequency.value = allpassFilterFreqs[af];\n\t\t\tthis._allpassFilters.push(allpass);\n\t\t}\n\n\t\t//and the comb filters\n\t\tfor (var cf = 0; cf < combFilterDelayTimes.length; cf++){\n\t\t\tvar fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\tfbcf.resonance.value = combFilterResonances[cf];\n\t\t\tthis._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t\t\tif (cf < combFilterDelayTimes.length / 2){\n\t\t\t\tfbcf.connect(this.effectReturnL);\n\t\t\t} else {\n\t\t\t\tfbcf.connect(this.effectReturnR);\n\t\t\t}\n\t\t\tthis._feedbackCombFilters.push(fbcf);\n\t\t}\n\n\t\t//chain the allpass filters together\n\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\tTone.connectSeries.apply(Tone, this._allpassFilters);\n\t\tthis.effectSendL.connect(this._allpassFilters[0]);\n\t\tthis.effectSendR.connect(this._allpassFilters[0]);\n\t\tthis._readOnly([\"roomSize\"]);\n\t};\n\n\tTone.extend(Tone.JCReverb, Tone.StereoEffect);\n\n\t/**\n\t *  the default values\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.JCReverb.defaults = {\n\t\t\"roomSize\" : 0.5\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.JCReverb} this\n\t */\n\tTone.JCReverb.prototype.dispose = function(){\n\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\tfor (var apf = 0; apf < this._allpassFilters.length; apf++){\n\t\t\tthis._allpassFilters[apf].disconnect();\n\t\t\tthis._allpassFilters[apf] = null;\n\t\t}\n\t\tthis._allpassFilters = null;\n\t\tfor (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++){\n\t\t\tthis._feedbackCombFilters[fbcf].dispose();\n\t\t\tthis._feedbackCombFilters[fbcf] = null;\n\t\t}\n\t\tthis._feedbackCombFilters = null;\n\t\tthis._writable([\"roomSize\"]);\n\t\tthis.roomSize.dispose();\n\t\tthis.roomSize = null;\n\t\tthis._scaleRoomSize.dispose();\n\t\tthis._scaleRoomSize = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.JCReverb;\n});\n","define([\"../core/Tone\", \"../component/LFO\", \"../component/Filter\", \"../effect/StereoEffect\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t *         of different frequency components of an incoming signal. Read more on\n\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t *\n\t *\t@extends {Tone.StereoEffect}\n\t *\t@constructor\n\t *\t@param {Frequency|Object} [frequency] The speed of the phasing.\n\t *\t@param {number} [octaves] The octaves of the effect.\n\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters.\n\t *\t@example\n\t * var phaser = new Tone.Phaser({\n\t * \t\"frequency\" : 15,\n\t * \t\"octaves\" : 5,\n\t * \t\"baseFrequency\" : 1000\n\t * }).toMaster();\n\t * var synth = new Tone.FMSynth().connect(phaser);\n\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t */\n\tTone.Phaser = function(){\n\n\t\t//set the defaults\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"octaves\", \"baseFrequency\"], Tone.Phaser);\n\t\tTone.StereoEffect.call(this, options);\n\n\t\t/**\n\t\t *  the lfo which controls the frequency on the left side\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\n\t\t/**\n\t\t *  the lfo which controls the frequency on the right side\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t\tthis._lfoR.phase = 180;\n\n\t\t/**\n\t\t *  the base modulation frequency\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._baseFrequency = options.baseFrequency;\n\n\t\t/**\n\t\t *  the octaves of the phasing\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._octaves = options.octaves;\n\n\t\t/**\n\t\t *  The quality factor of the filters\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t\tthis.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\n\t\t/**\n\t\t *  the array of filters for the left side\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\n\t\t/**\n\t\t *  the array of filters for the left side\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\n\t\t/**\n\t\t * the frequency of the effect\n\t\t * @type {Tone.Signal}\n\t\t */\n\t\tthis.frequency = this._lfoL.frequency;\n\t\tthis.frequency.value = options.frequency;\n\n\t\t//connect them up\n\t\tthis.effectSendL.connect(this._filtersL[0]);\n\t\tthis.effectSendR.connect(this._filtersR[0]);\n\t\tthis._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t\tthis._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t\t//control the frequency with one LFO\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t//set the options\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\t//start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\tthis._readOnly([\"frequency\", \"Q\"]);\n\t};\n\n\tTone.extend(Tone.Phaser, Tone.StereoEffect);\n\n\t/**\n\t *  defaults\n\t *  @static\n\t *  @type {object}\n\t */\n\tTone.Phaser.defaults = {\n\t\t\"frequency\" : 0.5,\n\t\t\"octaves\" : 3,\n\t\t\"stages\" : 10,\n\t\t\"Q\" : 10,\n\t\t\"baseFrequency\" : 350,\n\t};\n\n\t/**\n\t *  @param {number} stages\n\t *  @returns {Array} the number of filters all connected together\n\t *  @private\n\t */\n\tTone.Phaser.prototype._makeFilters = function(stages, connectToFreq, Q){\n\t\tvar filters = new Array(stages);\n\t\t//make all the filters\n\t\tfor (var i = 0; i < stages; i++){\n\t\t\tvar filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = \"allpass\";\n\t\t\tQ.connect(filter.Q);\n\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\tfilters[i] = filter;\n\t\t}\n\t\tTone.connectSeries.apply(Tone, filters);\n\t\treturn filters;\n\t};\n\n\t/**\n\t * The number of octaves the phase goes above\n\t * the baseFrequency\n\t * @memberOf Tone.Phaser#\n\t * @type {Positive}\n\t * @name octaves\n\t */\n\tObject.defineProperty(Tone.Phaser.prototype, \"octaves\", {\n\t\tget : function(){\n\t\t\treturn this._octaves;\n\t\t},\n\t\tset : function(octaves){\n\t\t\tthis._octaves = octaves;\n\t\t\tvar max = this._baseFrequency * Math.pow(2, octaves);\n\t\t\tthis._lfoL.max = max;\n\t\t\tthis._lfoR.max = max;\n\t\t}\n\t});\n\n\t/**\n\t * The the base frequency of the filters.\n\t * @memberOf Tone.Phaser#\n\t * @type {number}\n\t * @name baseFrequency\n\t */\n\tObject.defineProperty(Tone.Phaser.prototype, \"baseFrequency\", {\n\t\tget : function(){\n\t\t\treturn this._baseFrequency;\n\t\t},\n\t\tset : function(freq){\n\t\t\tthis._baseFrequency = freq;\n\t\t\tthis._lfoL.min = freq;\n\t\t\tthis._lfoR.min = freq;\n\t\t\tthis.octaves = this._octaves;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Phaser} this\n\t */\n\tTone.Phaser.prototype.dispose = function(){\n\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\tthis._writable([\"frequency\", \"Q\"]);\n\t\tthis.Q.dispose();\n\t\tthis.Q = null;\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoL = null;\n\t\tthis._lfoR.dispose();\n\t\tthis._lfoR = null;\n\t\tfor (var i = 0; i < this._filtersL.length; i++){\n\t\t\tthis._filtersL[i].disconnect();\n\t\t\tthis._filtersL[i] = null;\n\t\t}\n\t\tthis._filtersL = null;\n\t\tfor (var j = 0; j < this._filtersR.length; j++){\n\t\t\tthis._filtersR[j].disconnect();\n\t\t\tthis._filtersR[j] = null;\n\t\t}\n\t\tthis._filtersR = null;\n\t\tthis.frequency = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Phaser;\n});\n","define([\"../core/Tone\", \"../effect/StereoXFeedbackEffect\", \"../signal/Signal\", \"../core/Delay\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t *          first in one channel and next in the opposite channel. In a stereo\n\t *          system these are the right and left channels.\n\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n\t *          with independent delay values. Each delay is routed to one channel\n\t *          (left or right), and the channel triggered second will always\n\t *          trigger at the same interval after the first.\n\t *\n\t * \t@constructor\n\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t *  @param {NormalRange=} feedback The amount of the effected signal which\n\t *                                 is fed back through the delay.\n\t *  @example\n\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t */\n\tTone.PingPongDelay = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"delayTime\", \"feedback\"], Tone.PingPongDelay);\n\t\tTone.StereoXFeedbackEffect.call(this, options);\n\n\t\t/**\n\t\t *  the delay node on the left side\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\n\t\t/**\n\t\t *  the delay node on the right side\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\n\t\t/**\n\t\t *  the predelay on the right side\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\n\t\t/**\n\t\t *  the delay time signal\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\n\t\t//connect it up\n\t\tthis.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t\tthis.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t\tthis.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t//rearranged the feedback to be after the rightPreDelay\n\t\tthis._feedbackLR.disconnect();\n\t\tthis._feedbackLR.connect(this._rightDelay);\n\t\tthis._readOnly([\"delayTime\"]);\n\t};\n\n\tTone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.PingPongDelay.defaults = {\n\t\t\"delayTime\" : 0.25,\n\t\t\"maxDelayTime\" : 1\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.PingPongDelay} this\n\t */\n\tTone.PingPongDelay.prototype.dispose = function(){\n\t\tTone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t\tthis._leftDelay.dispose();\n\t\tthis._leftDelay = null;\n\t\tthis._rightDelay.dispose();\n\t\tthis._rightDelay = null;\n\t\tthis._rightPreDelay.dispose();\n\t\tthis._rightPreDelay = null;\n\t\tthis._writable([\"delayTime\"]);\n\t\tthis.delayTime.dispose();\n\t\tthis.delayTime = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.PingPongDelay;\n});\n","define([\"../core/Tone\", \"../component/LFO\", \"../component/CrossFade\",\n\t\"../signal/Signal\", \"../effect/FeedbackEffect\", \"../core/Delay\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal.\n\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t *         of a DelayNode using a sawtooth wave.\n\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t *\n\t *  @extends {Tone.FeedbackEffect}\n\t *  @param {Interval=} pitch The interval to transpose the incoming signal by.\n\t */\n\tTone.PitchShift = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"pitch\"], Tone.PitchShift);\n\t\tTone.FeedbackEffect.call(this, options);\n\n\t\t/**\n\t\t *  The pitch signal\n\t\t *  @type  {Tone.Signal}\n\t\t *  @private\n\t\t */\n\t\tthis._frequency = new Tone.Signal(0);\n\n\t\t/**\n\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t *  the sawtooth wave.\n\t\t *  @type  {DelayNode}\n\t\t *  @private\n\t\t */\n\t\tthis._delayA = new Tone.Delay(0, 1);\n\n\t\t/**\n\t\t *  The first LFO.\n\t\t *  @type  {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoA = new Tone.LFO({\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : 0.1,\n\t\t\t\"type\" : \"sawtooth\"\n\t\t}).connect(this._delayA.delayTime);\n\n\t\t/**\n\t\t *  The second DelayNode\n\t\t *  @type  {DelayNode}\n\t\t *  @private\n\t\t */\n\t\tthis._delayB = new Tone.Delay(0, 1);\n\n\t\t/**\n\t\t *  The first LFO.\n\t\t *  @type  {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoB = new Tone.LFO({\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : 0.1,\n\t\t\t\"type\" : \"sawtooth\",\n\t\t\t\"phase\" : 180\n\t\t}).connect(this._delayB.delayTime);\n\n\t\t/**\n\t\t *  Crossfade quickly between the two delay lines\n\t\t *  to cover up the jump in the sawtooth wave\n\t\t *  @type  {Tone.CrossFade}\n\t\t *  @private\n\t\t */\n\t\tthis._crossFade = new Tone.CrossFade();\n\n\t\t/**\n\t\t *  LFO which alternates between the two\n\t\t *  delay lines to cover up the disparity in the\n\t\t *  sawtooth wave.\n\t\t *  @type  {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._crossFadeLFO = new Tone.LFO({\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : 1,\n\t\t\t\"type\" : \"triangle\",\n\t\t\t\"phase\" : 90\n\t\t}).connect(this._crossFade.fade);\n\n\t\t/**\n\t\t *  The delay node\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._feedbackDelay = new Tone.Delay(options.delayTime);\n\n\t\t/**\n\t\t *  The amount of delay on the input signal\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */\n\t\tthis.delayTime = this._feedbackDelay.delayTime;\n\t\tthis._readOnly(\"delayTime\");\n\n\t\t/**\n\t\t *  Hold the current pitch\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._pitch = options.pitch;\n\n\t\t/**\n\t\t *  Hold the current windowSize\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._windowSize = options.windowSize;\n\n\t\t//connect the two delay lines up\n\t\tthis._delayA.connect(this._crossFade.a);\n\t\tthis._delayB.connect(this._crossFade.b);\n\t\t//connect the frequency\n\t\tthis._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t//route the input\n\t\tthis.effectSend.fan(this._delayA, this._delayB);\n\t\tthis._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t//start the LFOs at the same time\n\t\tvar now = this.now();\n\t\tthis._lfoA.start(now);\n\t\tthis._lfoB.start(now);\n\t\tthis._crossFadeLFO.start(now);\n\t\t//set the initial value\n\t\tthis.windowSize = this._windowSize;\n\t};\n\n\tTone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\n\t/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.PitchShift.defaults = {\n\t\t\"pitch\" : 0,\n\t\t\"windowSize\" : 0.1,\n\t\t\"delayTime\" : 0,\n\t\t\"feedback\" : 0\n\t};\n\n\t/**\n\t * Repitch the incoming signal by some interval (measured\n\t * in semi-tones).\n\t * @memberOf Tone.PitchShift#\n\t * @type {Interval}\n\t * @name pitch\n\t * @example\n\t * pitchShift.pitch = -12; //down one octave\n\t * pitchShift.pitch = 7; //up a fifth\n\t */\n\tObject.defineProperty(Tone.PitchShift.prototype, \"pitch\", {\n\t\tget : function(){\n\t\t\treturn this._pitch;\n\t\t},\n\t\tset : function(interval){\n\t\t\tthis._pitch = interval;\n\t\t\tvar factor = 0;\n\t\t\tif (interval < 0){\n\t\t\t\tthis._lfoA.min = 0;\n\t\t\t\tthis._lfoA.max = this._windowSize;\n\t\t\t\tthis._lfoB.min = 0;\n\t\t\t\tthis._lfoB.max = this._windowSize;\n\t\t\t\tfactor = Tone.intervalToFrequencyRatio(interval - 1) + 1;\n\t\t\t} else {\n\t\t\t\tthis._lfoA.min = this._windowSize;\n\t\t\t\tthis._lfoA.max = 0;\n\t\t\t\tthis._lfoB.min = this._windowSize;\n\t\t\t\tthis._lfoB.max = 0;\n\t\t\t\tfactor = Tone.intervalToFrequencyRatio(interval) - 1;\n\t\t\t}\n\t\t\tthis._frequency.value = factor * (1.2 / this._windowSize);\n\t\t}\n\t});\n\n\t/**\n\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t * A nominal range of 0.03 to 0.1 is recommended.\n\t * @memberOf Tone.PitchShift#\n\t * @type {Time}\n\t * @name windowSize\n\t * @example\n\t * pitchShift.windowSize = 0.1;\n\t */\n\tObject.defineProperty(Tone.PitchShift.prototype, \"windowSize\", {\n\t\tget : function(){\n\t\t\treturn this._windowSize;\n\t\t},\n\t\tset : function(size){\n\t\t\tthis._windowSize = this.toSeconds(size);\n\t\t\tthis.pitch = this._pitch;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.PitchShift}  this\n\t */\n\tTone.PitchShift.prototype.dispose = function(){\n\t\tTone.FeedbackEffect.prototype.dispose.call(this);\n\t\tthis._frequency.dispose();\n\t\tthis._frequency = null;\n\t\tthis._delayA.disconnect();\n\t\tthis._delayA = null;\n\t\tthis._delayB.disconnect();\n\t\tthis._delayB = null;\n\t\tthis._lfoA.dispose();\n\t\tthis._lfoA = null;\n\t\tthis._lfoB.dispose();\n\t\tthis._lfoB = null;\n\t\tthis._crossFade.dispose();\n\t\tthis._crossFade = null;\n\t\tthis._crossFadeLFO.dispose();\n\t\tthis._crossFadeLFO = null;\n\t\tthis._writable(\"delayTime\");\n\t\tthis._feedbackDelay.dispose();\n\t\tthis._feedbackDelay = null;\n\t\tthis.delayTime = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.PitchShift;\n});\n","define([\"../core/Tone\", \"../core/Offline\", \"../component/Filter\", \"../component/Merge\",\n\t\"../source/Noise\", \"../core/Gain\", \"../effect/Convolver\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Simple convolution created with decaying noise.\n\t *  \t\tGenerates an Impulse Response Buffer\n\t * \t\t\twith Tone.Offline then feeds the IR into ConvolverNode.\n\t * \t\t\tNote: the Reverb will not make any sound until [generate](#generate)\n\t * \t\t\thas been invoked and resolved.\n\t *\n\t * \t\t\tInspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n\t * \t\t\tCopyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n\t *\n\t *  @extends {Tone.Convolver}\n\t *  @param {Time=} decay The amount of time it will reverberate for.\n\t */\n\tTone.Reverb = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"decay\"], Tone.Reverb);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  Convolver node\n\t\t *  @type {ConvolverNode}\n\t\t *  @private\n\t\t */\n\t\tthis._convolver = this.context.createConvolver();\n\n\t\t/**\n\t\t * The duration of the reverb\n\t\t * @type {Time}\n\t\t */\n\t\tthis.decay = options.decay;\n\n\t\t/**\n\t\t * The amount of time before the reverb is fully\n\t\t * ramped in.\n\t\t * @type {Time}\n\t\t */\n\t\tthis.preDelay = options.preDelay;\n\n\t\tthis.connectEffect(this._convolver);\n\t};\n\n\tTone.extend(Tone.Reverb, Tone.Effect);\n\n\t/**\n\t * The defaults\n\t * @type {Object}\n\t * @static\n\t */\n\tTone.Reverb.defaults = {\n\t\t\"decay\" : 1.5,\n\t\t\"preDelay\" : 0.01,\n\t};\n\n\t/**\n\t * Generate the Impulse Response. Returns a promise while the IR is being\n\t * generated.\n\t * @return {Promise<Tone.Reverb>} Promise which returns this object.\n\t */\n\tTone.Reverb.prototype.generate = function(){\n\t\treturn Tone.Offline(function(){\n\t\t\t//create a noise burst which decays over the duration\n\t\t\tvar noiseL = new Tone.Noise();\n\t\t\tvar noiseR = new Tone.Noise();\n\t\t\tvar merge = new Tone.Merge();\n\t\t\tnoiseL.connect(merge.left);\n\t\t\tnoiseR.connect(merge.right);\n\t\t\tvar gainNode = new Tone.Gain().toMaster();\n\t\t\tmerge.connect(gainNode);\n\t\t\tnoiseL.start(0);\n\t\t\tnoiseR.start(0);\n\t\t\t//short fade in\n\t\t\tgainNode.gain.setValueAtTime(0, 0);\n\t\t\tgainNode.gain.linearRampToValueAtTime(1, this.preDelay);\n\t\t\t//decay\n\t\t\tgainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay - this.preDelay);\n\t\t}.bind(this), this.decay).then(function(buffer){\n\t\t\tthis._convolver.buffer = buffer.get();\n\t\t\treturn this;\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Reverb}  this\n\t */\n\tTone.Reverb.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._convolver.disconnect();\n\t\tthis._convolver = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Reverb;\n});\n","define([\"../core/Tone\", \"../effect/StereoEffect\", \"../effect/FeedbackEffect\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Base class for stereo feedback effects where the effectReturn\n\t *         is fed back into the same channel.\n\t *\n\t *\t@constructor\n\t *\t@extends {Tone.StereoEffect}\n\t */\n\tTone.StereoFeedbackEffect = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"feedback\"], Tone.FeedbackEffect);\n\t\tTone.StereoEffect.call(this, options);\n\n\t\t/**\n\t\t *  controls the amount of feedback\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\n\t\t/**\n\t\t *  the left side feeback\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._feedbackL = new Tone.Gain();\n\n\t\t/**\n\t\t *  the right side feeback\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._feedbackR = new Tone.Gain();\n\n\t\t//connect it up\n\t\tthis.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t\tthis.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\tthis._readOnly([\"feedback\"]);\n\t};\n\n\tTone.extend(Tone.StereoFeedbackEffect, Tone.StereoEffect);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.StereoFeedbackEffect} this\n\t */\n\tTone.StereoFeedbackEffect.prototype.dispose = function(){\n\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\tthis._writable([\"feedback\"]);\n\t\tthis.feedback.dispose();\n\t\tthis.feedback = null;\n\t\tthis._feedbackL.dispose();\n\t\tthis._feedbackL = null;\n\t\tthis._feedbackR.dispose();\n\t\tthis._feedbackR = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.StereoFeedbackEffect;\n});\n","define([\"../core/Tone\", \"../effect/MidSideEffect\", \"../signal/Signal\",\n\t\"../signal/Multiply\", \"../signal/Subtract\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Applies a width factor to the mid/side seperation.\n\t *         0 is all mid and 1 is all side.\n\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t *         <br><br>\n\t *         <code>\n\t *         Mid *= 2*(1-width)<br>\n\t *         Side *= 2*width\n\t *         </code>\n\t *\n\t *  @extends {Tone.MidSideEffect}\n\t *  @constructor\n\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */\n\tTone.StereoWidener = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"width\"], Tone.StereoWidener);\n\t\tTone.MidSideEffect.call(this, options);\n\n\t\t/**\n\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t\tthis._readOnly([\"width\"]);\n\n\t\t/**\n\t\t * Two times the (1-width) for the mid channel\n\t\t * @type {Tone.Multiply}\n\t\t * @private\n\t\t */\n\t\tthis._twoTimesWidthMid = new Tone.Multiply(2);\n\n\t\t/**\n\t\t * Two times the width for the side channel\n\t\t * @type {Tone.Multiply}\n\t\t * @private\n\t\t */\n\t\tthis._twoTimesWidthSide = new Tone.Multiply(2);\n\n\t\t/**\n\t\t *  Mid multiplier\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._midMult = new Tone.Multiply();\n\t\tthis._twoTimesWidthMid.connect(this._midMult, 0, 1);\n\t\tthis.midSend.chain(this._midMult, this.midReturn);\n\n\t\t/**\n\t\t * 1 - width\n\t\t * @type {Tone.Subtract}\n\t\t * @private\n\t\t */\n\t\tthis._oneMinusWidth = new Tone.Subtract();\n\t\tthis._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t\tthis.context.getConstant(1).connect(this._oneMinusWidth, 0, 0);\n\t\tthis.width.connect(this._oneMinusWidth, 0, 1);\n\n\t\t/**\n\t\t *  Side multiplier\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._sideMult = new Tone.Multiply();\n\t\tthis.width.connect(this._twoTimesWidthSide);\n\t\tthis._twoTimesWidthSide.connect(this._sideMult, 0, 1);\n\t\tthis.sideSend.chain(this._sideMult, this.sideReturn);\n\t};\n\n\tTone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\n\t/**\n\t *  the default values\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.StereoWidener.defaults = {\n\t\t\"width\" : 0.5\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.StereoWidener} this\n\t */\n\tTone.StereoWidener.prototype.dispose = function(){\n\t\tTone.MidSideEffect.prototype.dispose.call(this);\n\t\tthis._writable([\"width\"]);\n\t\tthis.width.dispose();\n\t\tthis.width = null;\n\t\tthis._midMult.dispose();\n\t\tthis._midMult = null;\n\t\tthis._sideMult.dispose();\n\t\tthis._sideMult = null;\n\t\tthis._twoTimesWidthMid.dispose();\n\t\tthis._twoTimesWidthMid = null;\n\t\tthis._twoTimesWidthSide.dispose();\n\t\tthis._twoTimesWidthSide = null;\n\t\tthis._oneMinusWidth.dispose();\n\t\tthis._oneMinusWidth = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.StereoWidener;\n});\n","define([\"../core/Tone\", \"../component/LFO\", \"../effect/StereoEffect\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t *         The type, frequency, and depth of the LFO is controllable.\n\t *\n\t *  @extends {Tone.StereoEffect}\n\t *  @constructor\n\t *  @param {Frequency} [frequency] The rate of the effect.\n\t *  @param {NormalRange} [depth] The depth of the effect.\n\t *  @example\n\t * //create a tremolo and start it's LFO\n\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t * //route an oscillator through the tremolo and start it\n\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t */\n\tTone.Tremolo = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"depth\"], Tone.Tremolo);\n\t\tTone.StereoEffect.call(this, options);\n\n\t\t/**\n\t\t *  The tremelo LFO in the left channel\n\t\t *  @type  {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoL = new Tone.LFO({\n\t\t\t\"phase\" : options.spread,\n\t\t\t\"min\" : 1,\n\t\t\t\"max\" : 0,\n\t\t});\n\n\t\t/**\n\t\t *  The tremelo LFO in the left channel\n\t\t *  @type  {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfoR = new Tone.LFO({\n\t\t\t\"phase\" : options.spread,\n\t\t\t\"min\" : 1,\n\t\t\t\"max\" : 0,\n\t\t});\n\n\t\t/**\n\t\t *  Where the gain is multiplied\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._amplitudeL = new Tone.Gain();\n\n\t\t/**\n\t\t *  Where the gain is multiplied\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._amplitudeR = new Tone.Gain();\n\n\t\t/**\n\t\t *  The frequency of the tremolo.\n\t\t *  @type  {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t *  modulate fully between 0 and 1.\n\t\t *  @type  {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\n\t\tthis._readOnly([\"frequency\", \"depth\"]);\n\t\tthis.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t\tthis.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t\tthis._lfoL.connect(this._amplitudeL.gain);\n\t\tthis._lfoR.connect(this._amplitudeR.gain);\n\t\tthis.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\tthis.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\tthis.type = options.type;\n\t\tthis.spread = options.spread;\n\t};\n\n\tTone.extend(Tone.Tremolo, Tone.StereoEffect);\n\n\t/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Tremolo.defaults = {\n\t\t\"frequency\" : 10,\n\t\t\"type\" : \"sine\",\n\t\t\"depth\" : 0.5,\n\t\t\"spread\" : 180,\n\t};\n\n\t/**\n\t * Start the tremolo.\n\t * @param {Time} [time=now] When the tremolo begins.\n\t * @returns {Tone.Tremolo} this\n\t */\n\tTone.Tremolo.prototype.start = function(time){\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stop the tremolo.\n\t * @param {Time} [time=now] When the tremolo stops.\n\t * @returns {Tone.Tremolo} this\n\t */\n\tTone.Tremolo.prototype.stop = function(time){\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sync the effect to the transport.\n\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t *                              Transport has started.\n\t * @returns {Tone.AutoFilter} this\n\t */\n\tTone.Tremolo.prototype.sync = function(delay){\n\t\tthis._lfoL.sync(delay);\n\t\tthis._lfoR.sync(delay);\n\t\tTone.Transport.syncSignal(this.frequency);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Unsync the filter from the transport\n\t * @returns {Tone.Tremolo} this\n\t */\n\tTone.Tremolo.prototype.unsync = function(){\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\tTone.Transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t};\n\n\t/**\n\t * The Tremolo's oscillator type.\n\t * @memberOf Tone.Tremolo#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.Tremolo.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._lfoL.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._lfoL.type = type;\n\t\t\tthis._lfoR.type = type;\n\t\t}\n\t});\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t * @memberOf Tone.Tremolo#\n\t * @type {Degrees}\n\t * @name spread\n\t */\n\tObject.defineProperty(Tone.Tremolo.prototype, \"spread\", {\n\t\tget : function(){\n\t\t\treturn this._lfoR.phase - this._lfoL.phase; //180\n\t\t},\n\t\tset : function(spread){\n\t\t\tthis._lfoL.phase = 90 - (spread/2);\n\t\t\tthis._lfoR.phase = (spread/2) + 90;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Tremolo} this\n\t */\n\tTone.Tremolo.prototype.dispose = function(){\n\t\tTone.StereoEffect.prototype.dispose.call(this);\n\t\tthis._writable([\"frequency\", \"depth\"]);\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoL = null;\n\t\tthis._lfoR.dispose();\n\t\tthis._lfoR = null;\n\t\tthis._amplitudeL.dispose();\n\t\tthis._amplitudeL = null;\n\t\tthis._amplitudeR.dispose();\n\t\tthis._amplitudeR = null;\n\t\tthis.frequency = null;\n\t\tthis.depth = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Tremolo;\n});\n","define([\"../core/Tone\", \"../effect/Effect\", \"../core/Delay\", \"../component/LFO\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t *         and fall. \n\t *  @extends {Tone.Effect}\n\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t */\n\tTone.Vibrato = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"frequency\", \"depth\"], Tone.Vibrato);\n\t\tTone.Effect.call(this, options);\n\n\t\t/**\n\t\t *  The delay node used for the vibrato effect\n\t\t *  @type {Tone.Delay}\n\t\t *  @private\n\t\t */\n\t\tthis._delayNode = new Tone.Delay(0, options.maxDelay);\n\n\t\t/**\n\t\t *  The LFO used to control the vibrato\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._lfo = new Tone.LFO({\n\t\t\t\"type\" : options.type,\n\t\t\t\"min\" : 0,\n\t\t\t\"max\" : options.maxDelay, \n\t\t\t\"frequency\" : options.frequency,\n\t\t\t\"phase\" : -90 //offse the phase so the resting position is in the center\n\t\t}).start().connect(this._delayNode.delayTime);\n\n\t\t/**\n\t\t *  The frequency of the vibrato\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\t/**\n\t\t *  The depth of the vibrato. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.depth = this._lfo.amplitude;\n\n\t\tthis.depth.value = options.depth;\n\t\tthis._readOnly([\"frequency\", \"depth\"]);\n\t\tthis.effectSend.chain(this._delayNode, this.effectReturn);\n\t};\n\n\tTone.extend(Tone.Vibrato, Tone.Effect);\n\n\t/**\n\t *  The defaults\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Vibrato.defaults = {\n\t\t\"maxDelay\" : 0.005,\n\t\t\"frequency\" : 5,\n\t\t\"depth\" : 0.1,\n\t\t\"type\" : \"sine\"\n\t};\n\n\t/**\n\t * Type of oscillator attached to the Vibrato.\n\t * @memberOf Tone.Vibrato#\n\t * @type {string}\n\t * @name type\n\t */\n\tObject.defineProperty(Tone.Vibrato.prototype, \"type\", {\n\t\tget : function(){\n\t\t\treturn this._lfo.type;\n\t\t},\n\t\tset : function(type){\n\t\t\tthis._lfo.type = type;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Vibrato} this\n\t */\n\tTone.Vibrato.prototype.dispose = function(){\n\t\tTone.Effect.prototype.dispose.call(this);\n\t\tthis._delayNode.dispose();\n\t\tthis._delayNode = null;\n\t\tthis._lfo.dispose();\n\t\tthis._lfo = null;\n\t\tthis._writable([\"frequency\", \"depth\"]);\n\t\tthis.frequency = null;\n\t\tthis.depth = null;\n\t};\n\n\treturn Tone.Vibrato;\n});\n","define([\"../core/Tone\", \"../event/Loop\", \"../control/CtrlPattern\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Pattern arpeggiates between the given notes\n\t *         in a number of patterns. See Tone.CtrlPattern for\n\t *         a full list of patterns.\n\t *  @example\n\t * var pattern = new Tone.Pattern(function(time, note){\n\t *   //the order of the notes passed in depends on the pattern\n\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t *  @extends {Tone.Loop}\n\t *  @param {Function} callback The callback to invoke with the\n\t *                             event.\n\t *  @param {Array} values The values to arpeggiate over.\n\t */\n\tTone.Pattern = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"callback\", \"values\", \"pattern\"], Tone.Pattern);\n\t\tTone.Loop.call(this, options);\n\n\t\t/**\n\t\t *  The pattern manager\n\t\t *  @type {Tone.CtrlPattern}\n\t\t *  @private\n\t\t */\n\t\tthis._pattern = new Tone.CtrlPattern({\n\t\t\t\"values\" : options.values, \n\t\t\t\"type\" : options.pattern,\n\t\t\t\"index\" : options.index\n\t\t});\n\t};\n\n\tTone.extend(Tone.Pattern, Tone.Loop);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Pattern.defaults = {\n\t\t\"pattern\" : Tone.CtrlPattern.Type.Up,\n\t\t\"callback\" : Tone.noOp,\n\t\t\"values\" : [],\n\t};\n\n\t/**\n\t *  Internal function called when the notes should be called\n\t *  @param  {Number}  time  The time the event occurs\n\t *  @private\n\t */\n\tTone.Pattern.prototype._tick = function(time){\n\t\tthis.callback(time, this._pattern.value);\n\t\tthis._pattern.next();\n\t};\n\n\t/**\n\t *  The current index in the values array.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {Positive}\n\t *  @name index\n\t */\n\tObject.defineProperty(Tone.Pattern.prototype, \"index\", {\n\t\tget : function(){\n\t\t\treturn this._pattern.index;\n\t\t},\n\t\tset : function(i){\n\t\t\tthis._pattern.index = i;\n\t\t}\n\t});\n\n\t/**\n\t *  The array of events.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {Array}\n\t *  @name values\n\t */\n\tObject.defineProperty(Tone.Pattern.prototype, \"values\", {\n\t\tget : function(){\n\t\t\treturn this._pattern.values;\n\t\t},\n\t\tset : function(vals){\n\t\t\tthis._pattern.values = vals;\n\t\t}\n\t});\n\n\t/**\n\t *  The current value of the pattern.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {*}\n\t *  @name value\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Pattern.prototype, \"value\", {\n\t\tget : function(){\n\t\t\treturn this._pattern.value;\n\t\t}\n\t});\n\n\t/**\n\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {String}\n\t *  @name pattern\n\t */\n\tObject.defineProperty(Tone.Pattern.prototype, \"pattern\", {\n\t\tget : function(){\n\t\t\treturn this._pattern.type;\n\t\t},\n\t\tset : function(pattern){\n\t\t\tthis._pattern.type = pattern;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Pattern}  this\n\t */\n\tTone.Pattern.prototype.dispose = function(){\n\t\tTone.Loop.prototype.dispose.call(this);\n\t\tthis._pattern.dispose();\n\t\tthis._pattern = null;\n\t};\n\n\treturn Tone.Pattern;\n});\n","define([\"../core/Tone\", \"../event/Part\", \"../core/Transport\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A sequence is an alternate notation of a part. Instead\n\t *         of passing in an array of [time, event] pairs, pass\n\t *         in an array of events which will be spaced at the\n\t *         given subdivision. Sub-arrays will subdivide that beat\n\t *         by the number of items are in the array.\n\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t *  @param  {Function}  callback  The callback to invoke with every note\n\t *  @param  {Array}    events  The sequence\n\t *  @param  {Time} subdivision  The subdivision between which events are placed.\n\t *  @extends {Tone.Part}\n\t *  @example\n\t * var seq = new Tone.Sequence(function(time, note){\n\t * \tconsole.log(note);\n\t * //straight quater notes\n\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t *  @example\n\t * var seq = new Tone.Sequence(function(time, note){\n\t * \tconsole.log(note);\n\t * //subdivisions are given as subarrays\n\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t */\n\tTone.Sequence = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"callback\", \"events\", \"subdivision\"], Tone.Sequence);\n\n\t\t//remove the events\n\t\tvar events = options.events;\n\t\tdelete options.events;\n\n\t\tTone.Part.call(this, options);\n\n\t\t/**\n\t\t *  The subdivison of each note\n\t\t *  @type  {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\t//if no time was passed in, the loop end is the end of the cycle\n\t\tif (Tone.isUndef(options.loopEnd) && Tone.isDefined(events)){\n\t\t\tthis._loopEnd = (events.length * this._subdivision);\n\t\t}\n\t\t//defaults to looping\n\t\tthis._loop = true;\n\n\t\t//add all of the events\n\t\tif (Tone.isDefined(events)){\n\t\t\tfor (var i = 0; i < events.length; i++){\n\t\t\t\tthis.add(i, events[i]);\n\t\t\t}\n\t\t}\n\t};\n\n\tTone.extend(Tone.Sequence, Tone.Part);\n\n\t/**\n\t *  The default values.\n\t *  @type  {Object}\n\t */\n\tTone.Sequence.defaults = {\n\t\t\"subdivision\" : \"4n\",\n\t};\n\n\t/**\n\t *  The subdivision of the sequence. This can only be\n\t *  set in the constructor. The subdivision is the\n\t *  interval between successive steps.\n\t *  @type {Time}\n\t *  @memberOf Tone.Sequence#\n\t *  @name subdivision\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Sequence.prototype, \"subdivision\", {\n\t\tget : function(){\n\t\t\treturn Tone.Ticks(this._subdivision).toSeconds();\n\t\t}\n\t});\n\n\t/**\n\t *  Get/Set an index of the sequence. If the index contains a subarray,\n\t *  a Tone.Sequence representing that sub-array will be returned.\n\t *  @example\n\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t * sequence.at(0)// => returns \"E4\"\n\t * //set a value\n\t * sequence.at(0, \"G3\");\n\t * //get a nested sequence\n\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t * @param {Positive} index The index to get or set\n\t * @param {*} value Optionally pass in the value to set at the given index.\n\t */\n\tTone.Sequence.prototype.at = function(index, value){\n\t\t//if the value is an array,\n\t\tif (Tone.isArray(value)){\n\t\t\t//remove the current event at that index\n\t\t\tthis.remove(index);\n\t\t}\n\t\t//call the parent's method\n\t\treturn Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t};\n\n\t/**\n\t *  Add an event at an index, if there's already something\n\t *  at that index, overwrite it. If `value` is an array,\n\t *  it will be parsed as a subsequence.\n\t *  @param {Number} index The index to add the event to\n\t *  @param {*} value The value to add at that index\n\t *  @returns {Tone.Sequence} this\n\t */\n\tTone.Sequence.prototype.add = function(index, value){\n\t\tif (value === null){\n\t\t\treturn this;\n\t\t}\n\t\tif (Tone.isArray(value)){\n\t\t\t//make a subsequence and add that to the sequence\n\t\t\tvar subSubdivision = Math.round(this._subdivision / value.length);\n\t\t\tvalue = new Tone.Sequence(this._tick.bind(this), value, Tone.Ticks(subSubdivision));\n\t\t}\n\t\tTone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove a value from the sequence by index\n\t *  @param {Number} index The index of the event to remove\n\t *  @returns {Tone.Sequence} this\n\t */\n\tTone.Sequence.prototype.remove = function(index, value){\n\t\tTone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the time of the index given the Sequence's subdivision\n\t *  @param  {Number}  index\n\t *  @return  {Time}  The time of that index\n\t *  @private\n\t */\n\tTone.Sequence.prototype._indexTime = function(index){\n\t\tif (index instanceof Tone.TransportTime){\n\t\t\treturn index;\n\t\t} else {\n\t\t\treturn Tone.Ticks(index * this._subdivision + this.startOffset).toSeconds();\n\t\t}\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.Sequence} this\n\t */\n\tTone.Sequence.prototype.dispose = function(){\n\t\tTone.Part.prototype.dispose.call(this);\n\t\treturn this;\n\t};\n\n\treturn Tone.Sequence;\n});\n","define([\"../core/Tone\", \"../instrument/Synth\", \"../signal/Signal\", \"../signal/Multiply\",\n\t\"../instrument/Monophonic\", \"../signal/AudioToGain\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t *          the two signals) affects the timbre of the output signal greatly.\n\t *          Read more about Amplitude Modulation Synthesis on\n\t *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth\n\t *                            see defaults below\n\t *  @example\n\t * var synth = new Tone.AMSynth().toMaster();\n\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t */\n\tTone.AMSynth = function(options){\n\n\t\toptions = Tone.defaultArg(options, Tone.AMSynth.defaults);\n\t\tTone.Monophonic.call(this, options);\n\n\t\t/**\n\t\t *  The carrier voice.\n\t\t *  @type {Tone.Synth}\n\t\t *  @private\n\t\t */\n\t\tthis._carrier = new Tone.Synth();\n\t\tthis._carrier.volume.value = -10;\n\n\t\t/**\n\t\t *  The carrier's oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */\n\t\tthis.oscillator = this._carrier.oscillator.set(options.oscillator);\n\n\t\t/**\n\t\t *  The carrier's envelope\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */\n\t\tthis.envelope = this._carrier.envelope.set(options.envelope);\n\n\t\t/**\n\t\t *  The modulator voice.\n\t\t *  @type {Tone.Synth}\n\t\t *  @private\n\t\t */\n\t\tthis._modulator = new Tone.Synth();\n\t\tthis._modulator.volume.value = -10;\n\n\t\t/**\n\t\t *  The modulator's oscillator which is applied\n\t\t *  to the amplitude of the oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */\n\t\tthis.modulation = this._modulator.oscillator.set(options.modulation);\n\n\t\t/**\n\t\t *  The modulator's envelope\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */\n\t\tthis.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\n\t\t/**\n\t\t *  The frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The detune in cents\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\n\t\t/**\n\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch voice1 an octave below voice0\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */\n\t\tthis.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\tthis.harmonicity.units = Tone.Type.Positive;\n\n\t\t/**\n\t\t *  convert the -1,1 output to 0,1\n\t\t *  @type {Tone.AudioToGain}\n\t\t *  @private\n\t\t */\n\t\tthis._modulationScale = new Tone.AudioToGain();\n\n\t\t/**\n\t\t *  the node where the modulation happens\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._modulationNode = new Tone.Gain();\n\n\t\t//control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\t\tthis._readOnly([\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t};\n\n\tTone.extend(Tone.AMSynth, Tone.Monophonic);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.AMSynth.defaults = {\n\t\t\"harmonicity\" : 3,\n\t\t\"detune\" : 0,\n\t\t\"oscillator\" : {\n\t\t\t\"type\" : \"sine\"\n\t\t},\n\t\t\"envelope\" : {\n\t\t\t\"attack\" : 0.01,\n\t\t\t\"decay\" : 0.01,\n\t\t\t\"sustain\" : 1,\n\t\t\t\"release\" : 0.5\n\t\t},\n\t\t\"modulation\" : {\n\t\t\t\"type\" : \"square\"\n\t\t},\n\t\t\"modulationEnvelope\" : {\n\t\t\t\"attack\" : 0.5,\n\t\t\t\"decay\" : 0.0,\n\t\t\t\"sustain\" : 1,\n\t\t\t\"release\" : 0.5\n\t\t}\n\t};\n\n\t/**\n\t *  trigger the attack portion of the note\n\t *\n\t *  @param  {Time} [time=now] the time the note will occur\n\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t *  @private\n\t *  @returns {Tone.AMSynth} this\n\t */\n\tTone.AMSynth.prototype._triggerEnvelopeAttack = function(time, velocity){\n\t\t//the port glide\n\t\ttime = this.toSeconds(time);\n\t\t//the envelopes\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\tthis._modulator._triggerEnvelopeAttack(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  trigger the release portion of the note\n\t *\n\t *  @param  {Time} [time=now] the time the note will release\n\t *  @private\n\t *  @returns {Tone.AMSynth} this\n\t */\n\tTone.AMSynth.prototype._triggerEnvelopeRelease = function(time){\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.AMSynth} this\n\t */\n\tTone.AMSynth.prototype.dispose = function(){\n\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\tthis._writable([\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t\tthis._carrier.dispose();\n\t\tthis._carrier = null;\n\t\tthis._modulator.dispose();\n\t\tthis._modulator = null;\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\tthis.harmonicity.dispose();\n\t\tthis.harmonicity = null;\n\t\tthis._modulationScale.dispose();\n\t\tthis._modulationScale = null;\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationNode = null;\n\t\tthis.oscillator = null;\n\t\tthis.envelope = null;\n\t\tthis.modulationEnvelope = null;\n\t\tthis.modulation = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AMSynth;\n});\n","define([\"../core/Tone\", \"../instrument/MonoSynth\", \"../component/LFO\", \"../signal/Signal\",\n\t\"../signal/Multiply\", \"../instrument/Monophonic\", \"../core/Param\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.DuoSynth is a monophonic synth composed of two\n\t *          MonoSynths run in parallel with control over the\n\t *          frequency ratio between the two voices and vibrato effect.\n\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth\n\t *                          see defaults below\n\t *  @example\n\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t */\n\tTone.DuoSynth = function(options){\n\n\t\toptions = Tone.defaultArg(options, Tone.DuoSynth.defaults);\n\t\tTone.Monophonic.call(this, options);\n\n\t\t/**\n\t\t *  the first voice\n\t\t *  @type {Tone.MonoSynth}\n\t\t */\n\t\tthis.voice0 = new Tone.MonoSynth(options.voice0);\n\t\tthis.voice0.volume.value = -10;\n\n\t\t/**\n\t\t *  the second voice\n\t\t *  @type {Tone.MonoSynth}\n\t\t */\n\t\tthis.voice1 = new Tone.MonoSynth(options.voice1);\n\t\tthis.voice1.volume.value = -10;\n\n\t\t/**\n\t\t *  The vibrato LFO.\n\t\t *  @type {Tone.LFO}\n\t\t *  @private\n\t\t */\n\t\tthis._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t\tthis._vibrato.start();\n\n\t\t/**\n\t\t * the vibrato frequency\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\n\t\t/**\n\t\t *  the vibrato gain\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\n\t\t/**\n\t\t * The amount of vibrato\n\t\t * @type {Positive}\n\t\t * @signal\n\t\t */\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\t/**\n\t\t *  the frequency control\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch voice1 an octave below voice0\n\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t */\n\t\tthis.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\tthis.harmonicity.units = Tone.Type.Positive;\n\n\t\t//control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\t\tthis._readOnly([\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t};\n\n\tTone.extend(Tone.DuoSynth, Tone.Monophonic);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.DuoSynth.defaults = {\n\t\t\"vibratoAmount\" : 0.5,\n\t\t\"vibratoRate\" : 5,\n\t\t\"harmonicity\" : 1.5,\n\t\t\"voice0\" : {\n\t\t\t\"volume\" : -10,\n\t\t\t\"portamento\" : 0,\n\t\t\t\"oscillator\" : {\n\t\t\t\t\"type\" : \"sine\"\n\t\t\t},\n\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\"release\" : 0.5\n\t\t\t},\n\t\t\t\"envelope\" : {\n\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\"release\" : 0.5\n\t\t\t}\n\t\t},\n\t\t\"voice1\" : {\n\t\t\t\"volume\" : -10,\n\t\t\t\"portamento\" : 0,\n\t\t\t\"oscillator\" : {\n\t\t\t\t\"type\" : \"sine\"\n\t\t\t},\n\t\t\t\"filterEnvelope\" : {\n\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\"release\" : 0.5\n\t\t\t},\n\t\t\t\"envelope\" : {\n\t\t\t\t\"attack\" : 0.01,\n\t\t\t\t\"decay\" : 0.0,\n\t\t\t\t\"sustain\" : 1,\n\t\t\t\t\"release\" : 0.5\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  start the attack portion of the envelopes\n\t *\n\t *  @param {Time} [time=now] the time the attack should start\n\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t *  @returns {Tone.DuoSynth} this\n\t *  @private\n\t */\n\tTone.DuoSynth.prototype._triggerEnvelopeAttack = function(time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  start the release portion of the envelopes\n\t *\n\t *  @param {Time} [time=now] the time the release should start\n\t *  @returns {Tone.DuoSynth} this\n\t *  @private\n\t */\n\tTone.DuoSynth.prototype._triggerEnvelopeRelease = function(time){\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the level of the output at the given time. Measures\n\t *  the envelope(s) value at the time. \n\t *  @param {Time} time The time to query the envelope value\n\t *  @return {NormalRange} The output level between 0-1\n\t */\n\tTone.DuoSynth.prototype.getLevelAtTime = function(time){\n\t\treturn (this.voice0.getLevelAtTime(time) + this.voice1.getLevelAtTime(time))/2;\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.DuoSynth} this\n\t */\n\tTone.DuoSynth.prototype.dispose = function(){\n\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\tthis._writable([\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t\tthis.voice0.dispose();\n\t\tthis.voice0 = null;\n\t\tthis.voice1.dispose();\n\t\tthis.voice1 = null;\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis._vibratoGain.dispose();\n\t\tthis._vibratoGain = null;\n\t\tthis._vibrato = null;\n\t\tthis.harmonicity.dispose();\n\t\tthis.harmonicity = null;\n\t\tthis.vibratoAmount.dispose();\n\t\tthis.vibratoAmount = null;\n\t\tthis.vibratoRate = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.DuoSynth;\n});\n","define([\"../core/Tone\", \"../instrument/Synth\", \"../signal/Signal\", \"../signal/Multiply\",\n\t\"../instrument/Monophonic\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t *          the frequency of a second Tone.Synth. A lot of spectral content\n\t *          can be explored using the modulationIndex parameter. Read more about\n\t *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth\n\t *                          see defaults below\n\t *  @example\n\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\tTone.FMSynth = function(options){\n\n\t\toptions = Tone.defaultArg(options, Tone.FMSynth.defaults);\n\t\tTone.Monophonic.call(this, options);\n\n\t\t/**\n\t\t *  The carrier voice.\n\t\t *  @type {Tone.Synth}\n\t\t *  @private\n\t\t */\n\t\tthis._carrier = new Tone.Synth(options.carrier);\n\t\tthis._carrier.volume.value = -10;\n\n\t\t/**\n\t\t *  The carrier's oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */\n\t\tthis.oscillator = this._carrier.oscillator;\n\n\t\t/**\n\t\t *  The carrier's envelope\n\t\t *  @type {Tone.Oscillator}\n\t\t */\n\t\tthis.envelope = this._carrier.envelope.set(options.envelope);\n\n\t\t/**\n\t\t *  The modulator voice.\n\t\t *  @type {Tone.Synth}\n\t\t *  @private\n\t\t */\n\t\tthis._modulator = new Tone.Synth(options.modulator);\n\t\tthis._modulator.volume.value = -10;\n\n\t\t/**\n\t\t *  The modulator's oscillator which is applied\n\t\t *  to the amplitude of the oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */\n\t\tthis.modulation = this._modulator.oscillator.set(options.modulation);\n\n\t\t/**\n\t\t *  The modulator's envelope\n\t\t *  @type {Tone.Oscillator}\n\t\t */\n\t\tthis.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\n\t\t/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The detune in cents\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\n\t\t/**\n\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch voice1 an octave below voice0\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */\n\t\tthis.harmonicity = new Tone.Multiply(options.harmonicity);\n\t\tthis.harmonicity.units = Tone.Type.Positive;\n\n\t\t/**\n\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the\n\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t *  modulating signal (ma) -- as in ma/mf.\n\t\t *\t@type {Positive}\n\t\t *\t@signal\n\t\t */\n\t\tthis.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t\tthis.modulationIndex.units = Tone.Type.Positive;\n\n\t\t/**\n\t\t *  the node where the modulation happens\n\t\t *  @type {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis._modulationNode = new Tone.Gain(0);\n\n\t\t//control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis._readOnly([\"frequency\", \"harmonicity\", \"modulationIndex\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t};\n\n\tTone.extend(Tone.FMSynth, Tone.Monophonic);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.FMSynth.defaults = {\n\t\t\"harmonicity\" : 3,\n\t\t\"modulationIndex\" : 10,\n\t\t\"detune\" : 0,\n\t\t\"oscillator\" : {\n\t\t\t\"type\" : \"sine\"\n\t\t},\n\t\t\"envelope\" : {\n\t\t\t\"attack\" : 0.01,\n\t\t\t\"decay\" : 0.01,\n\t\t\t\"sustain\" : 1,\n\t\t\t\"release\" : 0.5\n\t\t},\n\t\t\"modulation\" : {\n\t\t\t\"type\" : \"square\"\n\t\t},\n\t\t\"modulationEnvelope\" : {\n\t\t\t\"attack\" : 0.5,\n\t\t\t\"decay\" : 0.0,\n\t\t\t\"sustain\" : 1,\n\t\t\t\"release\" : 0.5\n\t\t}\n\t};\n\n\t/**\n\t * \ttrigger the attack portion of the note\n\t *\n\t *  @param  {Time} [time=now] the time the note will occur\n\t *  @param {number} [velocity=1] the velocity of the note\n\t *  @returns {Tone.FMSynth} this\n\t *  @private\n\t */\n\tTone.FMSynth.prototype._triggerEnvelopeAttack = function(time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\t//the envelopes\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\tthis._modulator._triggerEnvelopeAttack(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  trigger the release portion of the note\n\t *\n\t *  @param  {Time} [time=now] the time the note will release\n\t *  @returns {Tone.FMSynth} this\n\t *  @private\n\t */\n\tTone.FMSynth.prototype._triggerEnvelopeRelease = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.FMSynth} this\n\t */\n\tTone.FMSynth.prototype.dispose = function(){\n\t\tTone.Monophonic.prototype.dispose.call(this);\n\t\tthis._writable([\"frequency\", \"harmonicity\", \"modulationIndex\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t\tthis._carrier.dispose();\n\t\tthis._carrier = null;\n\t\tthis._modulator.dispose();\n\t\tthis._modulator = null;\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\tthis.modulationIndex.dispose();\n\t\tthis.modulationIndex = null;\n\t\tthis.harmonicity.dispose();\n\t\tthis.harmonicity = null;\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationNode = null;\n\t\tthis.oscillator = null;\n\t\tthis.envelope = null;\n\t\tthis.modulationEnvelope = null;\n\t\tthis.modulation = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.FMSynth;\n});\n","define([\"../core/Tone\", \"../source/OmniOscillator\", \"../instrument/Instrument\",\n\t\"../component/AmplitudeEnvelope\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t *          quality of the sound comes from the frequency envelope applied\n\t *          during Tone.MembraneSynth.triggerAttack(note). The frequency envelope\n\t *          starts at <code>note * .octaves</code> and ramps to <code>note</code>\n\t *          over the duration of <code>.pitchDecay</code>.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] the options available for the synth\n\t *                          see defaults below\n\t *  @example\n\t * var synth = new Tone.MembraneSynth().toMaster();\n\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t */\n\tTone.MembraneSynth = function(options){\n\n\t\toptions = Tone.defaultArg(options, Tone.MembraneSynth.defaults);\n\t\tTone.Instrument.call(this, options);\n\n\t\t/**\n\t\t *  The oscillator.\n\t\t *  @type {Tone.OmniOscillator}\n\t\t */\n\t\tthis.oscillator = new Tone.OmniOscillator(options.oscillator);\n\n\t\t/**\n\t\t *  The amplitude envelope.\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */\n\t\tthis.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\n\t\t/**\n\t\t *  The number of octaves the pitch envelope ramps.\n\t\t *  @type {Positive}\n\t\t */\n\t\tthis.octaves = options.octaves;\n\n\t\t/**\n\t\t *  The amount of time the frequency envelope takes.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.pitchDecay = options.pitchDecay;\n\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\tthis._readOnly([\"oscillator\", \"envelope\"]);\n\t};\n\n\tTone.extend(Tone.MembraneSynth, Tone.Instrument);\n\n\t/**\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.MembraneSynth.defaults = {\n\t\t\"pitchDecay\" : 0.05,\n\t\t\"octaves\" : 10,\n\t\t\"oscillator\" : {\n\t\t\t\"type\" : \"sine\",\n\t\t},\n\t\t\"envelope\" : {\n\t\t\t\"attack\" : 0.001,\n\t\t\t\"decay\" : 0.4,\n\t\t\t\"sustain\" : 0.01,\n\t\t\t\"release\" : 1.4,\n\t\t\t\"attackCurve\" : \"exponential\"\n\t\t}\n\t};\n\n\t/**\n\t *  Trigger the note at the given time with the given velocity.\n\t *\n\t *  @param  {Frequency} note     the note\n\t *  @param  {Time} [time=now]     the time, if not given is now\n\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t *  @returns {Tone.MembraneSynth} this\n\t *  @example\n\t *  kick.triggerAttack(60);\n\t */\n\tTone.MembraneSynth.prototype.triggerAttack = function(note, time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tnote = this.toFrequency(note);\n\t\tvar maxNote = note * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, time);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\tif (this.envelope.sustain === 0){\n\t\t\tthis.oscillator.stop(time + this.envelope.attack + this.envelope.decay);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the release portion of the note.\n\t *\n\t *  @param  {Time} [time=now] the time the note will release\n\t *  @returns {Tone.MembraneSynth} this\n\t */\n\tTone.MembraneSynth.prototype.triggerRelease = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.envelope.release);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.MembraneSynth} this\n\t */\n\tTone.MembraneSynth.prototype.dispose = function(){\n\t\tTone.Instrument.prototype.dispose.call(this);\n\t\tthis._writable([\"oscillator\", \"envelope\"]);\n\t\tthis.oscillator.dispose();\n\t\tthis.oscillator = null;\n\t\tthis.envelope.dispose();\n\t\tthis.envelope = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.MembraneSynth;\n});\n","define([\"../core/Tone\", \"../instrument/Instrument\", \"../source/FMOscillator\", \"../component/Filter\",\n\t\"../component/FrequencyEnvelope\", \"../component/AmplitudeEnvelope\", \"../core/Gain\",\n\t\"../signal/Scale\", \"../signal/Multiply\"], function(Tone){\n\n\t/**\n\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t *  @private\n\t *  @static\n\t *  @type {Array}\n\t */\n\tvar inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n\t/**\n\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] The options availble for the synth\n\t *                             see defaults below\n\t */\n\tTone.MetalSynth = function(options){\n\n\t\toptions = Tone.defaultArg(options, Tone.MetalSynth.defaults);\n\t\tTone.Instrument.call(this, options);\n\n\t\t/**\n\t\t *  The frequency of the cymbal\n\t\t *  @type  {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The array of FMOscillators\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._oscillators = [];\n\n\t\t/**\n\t\t *  The frequency multipliers\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._freqMultipliers = [];\n\n\t\t/**\n\t\t *  The amplitude for the body\n\t\t *  @type {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._amplitue = new Tone.Gain(0).connect(this.output);\n\n\t\t/**\n\t\t *  highpass the output\n\t\t *  @type {Tone.Filter}\n\t\t *  @private\n\t\t */\n\t\tthis._highpass = new Tone.Filter({\n\t\t\t\"type\" : \"highpass\",\n\t\t\t\"Q\" : -3.0102999566398125\n\t\t}).connect(this._amplitue);\n\n\t\t/**\n\t\t *  The number of octaves the highpass\n\t\t *  filter frequency ramps\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._octaves = options.octaves;\n\n\t\t/**\n\t\t *  Scale the body envelope\n\t\t *  for the bandpass\n\t\t *  @type {Tone.Scale}\n\t\t *  @private\n\t\t */\n\t\tthis._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\n\t\t/**\n\t\t *  The envelope which is connected both to the\n\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t *  @type  {Tone.Envelope}\n\t\t */\n\t\tthis.envelope = new Tone.Envelope({\n\t\t\t\"attack\" : options.envelope.attack,\n\t\t\t\"attackCurve\" : \"linear\",\n\t\t\t\"decay\" : options.envelope.decay,\n\t\t\t\"sustain\" : 0,\n\t\t\t\"release\" : options.envelope.release,\n\t\t}).chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitue.gain);\n\n\t\tfor (var i = 0; i < inharmRatios.length; i++){\n\t\t\tvar osc = new Tone.FMOscillator({\n\t\t\t\t\"type\" : \"square\",\n\t\t\t\t\"modulationType\" : \"square\",\n\t\t\t\t\"harmonicity\" : options.harmonicity,\n\t\t\t\t\"modulationIndex\" : options.modulationIndex\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tvar mult = new Tone.Multiply(inharmRatios[i]);\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t}\n\n\t\t//set the octaves\n\t\tthis.octaves = options.octaves;\n\n\t};\n\n\tTone.extend(Tone.MetalSynth, Tone.Instrument);\n\n\t/**\n\t *  default values\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.MetalSynth.defaults = {\n\t\t\"frequency\" : 200,\n\t\t\"envelope\" : {\n\t\t\t\"attack\" : 0.001,\n\t\t\t\"decay\" : 1.4,\n\t\t\t\"release\" : 0.2\n\t\t},\n\t\t\"harmonicity\" : 5.1,\n\t\t\"modulationIndex\" : 32,\n\t\t\"resonance\" : 4000,\n\t\t\"octaves\" : 1.5\n\t};\n\n\t/**\n\t *  Trigger the attack.\n\t *  @param  {Time}  time      When the attack should be triggered.\n\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t *  @return  {Tone.MetalSynth}  this\n\t */\n\tTone.MetalSynth.prototype.triggerAttack = function(time, vel){\n\t\ttime = this.toSeconds(time);\n\t\tvel = Tone.defaultArg(vel, 1);\n\t\tthis.envelope.triggerAttack(time, vel);\n\t\tthis._oscillators.forEach(function(osc){\n\t\t\tosc.start(time);\n\t\t});\n\t\t//if the sustain is 0, stop the oscillator as well\n\t\tif (this.envelope.sustain === 0){\n\t\t\tthis._oscillators.forEach(function(osc){\n\t\t\t\tosc.stop(time + this.envelope.attack + this.envelope.decay);\n\t\t\t}.bind(this));\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the release of the envelope.\n\t *  @param  {Time}  time      When the release should be triggered.\n\t *  @return  {Tone.MetalSynth}  this\n\t */\n\tTone.MetalSynth.prototype.triggerRelease = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(function(osc){\n\t\t\tosc.stop(time + this.envelope.release);\n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tTone.MetalSynth.prototype.sync = function(){\n\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the attack and release of the envelope after the given\n\t *  duration.\n\t *  @param  {Time}  duration  The duration before triggering the release\n\t *  @param  {Time}  time      When the attack should be triggered.\n\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t *  @return  {Tone.MetalSynth}  this\n\t */\n\tTone.MetalSynth.prototype.triggerAttackRelease = function(duration, time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The modulationIndex of the oscillators which make up the source.\n\t *  see Tone.FMOscillator.modulationIndex\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Positive}\n\t *  @name  modulationIndex\n\t */\n\tObject.defineProperty(Tone.MetalSynth.prototype, \"modulationIndex\", {\n\t\tget : function(){\n\t\t\treturn this._oscillators[0].modulationIndex.value;\n\t\t},\n\t\tset : function(val){\n\t\t\tfor (var i = 0; i < this._oscillators.length; i++){\n\t\t\t\tthis._oscillators[i].modulationIndex.value = val;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The harmonicity of the oscillators which make up the source.\n\t *  see Tone.FMOscillator.harmonicity\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Positive}\n\t *  @name  harmonicity\n\t */\n\tObject.defineProperty(Tone.MetalSynth.prototype, \"harmonicity\", {\n\t\tget : function(){\n\t\t\treturn this._oscillators[0].harmonicity.value;\n\t\t},\n\t\tset : function(val){\n\t\t\tfor (var i = 0; i < this._oscillators.length; i++){\n\t\t\t\tthis._oscillators[i].harmonicity.value = val;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The frequency of the highpass filter attached to the envelope\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Frequency}\n\t *  @name  resonance\n\t */\n\tObject.defineProperty(Tone.MetalSynth.prototype, \"resonance\", {\n\t\tget : function(){\n\t\t\treturn this._filterFreqScaler.min;\n\t\t},\n\t\tset : function(val){\n\t\t\tthis._filterFreqScaler.min = val;\n\t\t\tthis.octaves = this._octaves;\n\t\t}\n\t});\n\n\t/**\n\t *  The number of octaves above the \"resonance\" frequency\n\t *  that the filter ramps during the attack/decay envelope\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Number}\n\t *  @name  octaves\n\t */\n\tObject.defineProperty(Tone.MetalSynth.prototype, \"octaves\", {\n\t\tget : function(){\n\t\t\treturn this._octaves;\n\t\t},\n\t\tset : function(octs){\n\t\t\tthis._octaves = octs;\n\t\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.MetalSynth} this\n\t */\n\tTone.MetalSynth.prototype.dispose = function(){\n\t\tTone.Instrument.prototype.dispose.call(this);\n\t\tfor (var i = 0; i < this._oscillators.length; i++){\n\t\t\tthis._oscillators[i].dispose();\n\t\t\tthis._freqMultipliers[i].dispose();\n\t\t}\n\t\tthis._oscillators = null;\n\t\tthis._freqMultipliers = null;\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._filterFreqScaler = null;\n\t\tthis._amplitue.dispose();\n\t\tthis._amplitue = null;\n\t\tthis.envelope.dispose();\n\t\tthis.envelope = null;\n\t\tthis._highpass.dispose();\n\t\tthis._highpass = null;\n\t};\n\n\treturn Tone.MetalSynth;\n});\n","define([\"../core/Tone\", \"../component/AmplitudeEnvelope\", \"../component/FrequencyEnvelope\",\n\t\"../source/Noise\", \"../signal/Signal\", \"../component/Filter\", \"../instrument/Instrument\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter),\n\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t *          of the noise and the other is controls the cutoff frequency of the filter.\n\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] the options available for the synth\n\t *                          see defaults below\n\t * @example\n\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t */\n\tTone.NoiseSynth = function(options){\n\n\t\t//get the defaults\n\t\toptions = Tone.defaultArg(options, Tone.NoiseSynth.defaults);\n\t\tTone.Instrument.call(this, options);\n\n\t\t/**\n\t\t *  The noise source.\n\t\t *  @type {Tone.Noise}\n\t\t *  @example\n\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t */\n\t\tthis.noise = new Tone.Noise(options.noise);\n\n\t\t/**\n\t\t *  The amplitude envelope.\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */\n\t\tthis.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\n\t\t//connect the noise to the output\n\t\tthis.noise.chain(this.envelope, this.output);\n\t\tthis._readOnly([\"noise\", \"envelope\"]);\n\t};\n\n\tTone.extend(Tone.NoiseSynth, Tone.Instrument);\n\n\t/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.NoiseSynth.defaults = {\n\t\t\"noise\" : {\n\t\t\t\"type\" : \"white\"\n\t\t},\n\t\t\"envelope\" : {\n\t\t\t\"attack\" : 0.005,\n\t\t\t\"decay\" : 0.1,\n\t\t\t\"sustain\" : 0.0,\n\t\t}\n\t};\n\n\t/**\n\t *  Start the attack portion of the envelopes. Unlike other\n\t *  instruments, Tone.NoiseSynth doesn't have a note.\n\t *  @param {Time} [time=now] the time the attack should start\n\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t *  @returns {Tone.NoiseSynth} this\n\t *  @example\n\t * noiseSynth.triggerAttack();\n\t */\n\tTone.NoiseSynth.prototype.triggerAttack = function(time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\t//the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t//start the noise\n\t\tthis.noise.start(time);\n\t\tif (this.envelope.sustain === 0){\n\t\t\tthis.noise.stop(time + this.envelope.attack + this.envelope.decay);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start the release portion of the envelopes.\n\t *  @param {Time} [time=now] the time the release should start\n\t *  @returns {Tone.NoiseSynth} this\n\t */\n\tTone.NoiseSynth.prototype.triggerRelease = function(time){\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.noise.stop(time + this.envelope.release);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tTone.NoiseSynth.prototype.sync = function(){\n\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the attack and then the release.\n\t *  @param  {Time} duration the duration of the note\n\t *  @param  {Time} [time=now]     the time of the attack\n\t *  @param  {number} [velocity=1] the velocity\n\t *  @returns {Tone.NoiseSynth} this\n\t */\n\tTone.NoiseSynth.prototype.triggerAttackRelease = function(duration, time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.NoiseSynth} this\n\t */\n\tTone.NoiseSynth.prototype.dispose = function(){\n\t\tTone.Instrument.prototype.dispose.call(this);\n\t\tthis._writable([\"noise\", \"envelope\"]);\n\t\tthis.noise.dispose();\n\t\tthis.noise = null;\n\t\tthis.envelope.dispose();\n\t\tthis.envelope = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.NoiseSynth;\n});\n","define([\"../core/Tone\", \"../instrument/Instrument\", \"../source/Noise\", \"../component/LowpassCombFilter\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Karplus-String string synthesis. Often out of tune.\n\t *         Will change when the AudioWorkerNode is available across\n\t *         browsers.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] see the defaults\n\t *  @example\n\t * var plucky = new Tone.PluckSynth().toMaster();\n\t * plucky.triggerAttack(\"C4\");\n\t */\n\tTone.PluckSynth = function(options){\n\n\t\toptions = Tone.defaultArg(options, Tone.PluckSynth.defaults);\n\t\tTone.Instrument.call(this, options);\n\n\t\t/**\n\t\t *  @type {Tone.Noise}\n\t\t *  @private\n\t\t */\n\t\tthis._noise = new Tone.Noise(\"pink\");\n\n\t\t/**\n\t\t *  The amount of noise at the attack.\n\t\t *  Nominal range of [0.1, 20]\n\t\t *  @type {number}\n\t\t */\n\t\tthis.attackNoise = options.attackNoise;\n\n\t\t/**\n\t\t *  the LFCF\n\t\t *  @type {Tone.LowpassCombFilter}\n\t\t *  @private\n\t\t */\n\t\tthis._lfcf = new Tone.LowpassCombFilter({\n\t\t\t\"resonance\" : options.resonance,\n\t\t\t\"dampening\" : options.dampening\n\t\t});\n\n\t\t/**\n\t\t *  The resonance control.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */\n\t\tthis.resonance = this._lfcf.resonance;\n\n\t\t/**\n\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */\n\t\tthis.dampening = this._lfcf.dampening;\n\n\t\t//connections\n\t\tthis._noise.connect(this._lfcf);\n\t\tthis._lfcf.connect(this.output);\n\t\tthis._readOnly([\"resonance\", \"dampening\"]);\n\t};\n\n\tTone.extend(Tone.PluckSynth, Tone.Instrument);\n\n\t/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.PluckSynth.defaults = {\n\t\t\"attackNoise\" : 1,\n\t\t\"dampening\" : 4000,\n\t\t\"resonance\" : 0.7\n\t};\n\n\t/**\n\t *  Trigger the note.\n\t *  @param {Frequency} note The note to trigger.\n\t *  @param {Time} [time=now] When the note should be triggered.\n\t *  @returns {Tone.PluckSynth} this\n\t */\n\tTone.PluckSynth.prototype.triggerAttack = function(note, time){\n\t\tnote = this.toFrequency(note);\n\t\ttime = this.toSeconds(time);\n\t\tvar delayAmount = 1 / note;\n\t\tthis._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t\tthis._noise.start(time);\n\t\tthis._noise.stop(time + delayAmount * this.attackNoise);\n\t\treturn this;\n\t};\n\n\t/**\n\t *\tMake this method which belongs to the parent class private since\n\t *\tPluckSynth does not have any 'release' method.\n\t * \t@memberOf Tone.PluckSynth#\n\t *  @function\n\t *  @private\n\t *  @name triggerAttackRelease\n\t */\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.PluckSynth} this\n\t */\n\tTone.PluckSynth.prototype.dispose = function(){\n\t\tTone.Instrument.prototype.dispose.call(this);\n\t\tthis._noise.dispose();\n\t\tthis._lfcf.dispose();\n\t\tthis._noise = null;\n\t\tthis._lfcf = null;\n\t\tthis._writable([\"resonance\", \"dampening\"]);\n\t\tthis.dampening = null;\n\t\tthis.resonance = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.PluckSynth;\n});\n","define([\"../core/Tone\", \"../instrument/Synth\", \"../source/Source\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t *          instruments passed in as the second paramter. PolySynth is\n\t *          not a synthesizer by itself, it merely manages voices of\n\t *          one of the other types of synths, allowing any of the\n\t *          monophonic synthesizers to be polyphonic.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t *                                            uses Tone.Synth by default.\n\t *  @example\n\t * //a polysynth composed of 6 Voices of Synth\n\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t * //set the attributes using the set interface\n\t * synth.set(\"detune\", -1200);\n\t * //play a chord\n\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t */\n\tTone.PolySynth = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"polyphony\", \"voice\"], Tone.PolySynth);\n\t\tTone.Instrument.call(this, options);\n\t\toptions = Tone.defaultArg(options, Tone.Instrument.defaults);\n\n\t\t//max polyphony\n\t\toptions.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\n\t\t/**\n\t\t *  the array of voices\n\t\t *  @type {Array}\n\t\t */\n\t\tthis.voices = new Array(options.polyphony);\n\t\tthis.assert(options.polyphony > 0, \"polyphony must be greater than 0\");\n\n\t\t/**\n\t\t *  The detune in cents\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */\n\t\tthis.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t\tthis._readOnly(\"detune\");\n\n\t\t//create the voices\n\t\tfor (var i = 0; i < options.polyphony; i++){\n\t\t\tvar v = new options.voice(arguments[2], arguments[3]);\n\t\t\tif (!(v instanceof Tone.Monophonic)){\n\t\t\t\tthrow new Error(\"Synth constructor must be instance of Tone.Monophonic\");\n\t\t\t}\n\t\t\tthis.voices[i] = v;\n\t\t\tv.index = i;\n\t\t\tv.connect(this.output);\n\t\t\tif (v.hasOwnProperty(\"detune\")){\n\t\t\t\tthis.detune.connect(v.detune);\n\t\t\t}\n\t\t}\n\t};\n\n\tTone.extend(Tone.PolySynth, Tone.Instrument);\n\n\t/**\n\t *  the defaults\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */\n\tTone.PolySynth.defaults = {\n\t\t\"polyphony\" : 4,\n\t\t\"volume\" : 0,\n\t\t\"detune\" : 0,\n\t\t\"voice\" : Tone.Synth\n\t};\n\n\t/**\n\t *  Get the closest available voice, that is the\n\t *  one that is either the closest to the note,\n\t *  or has the lowest envelope value.\n\t *  @param {Time} time return the voice that has the lowest energy at this time.\n\t *  @param  {Note}  note  if there is a voice with this note, that should be returned\n\t *  @return  {Tone.Monophonic}  A synth voice.\n\t *  @private\n\t */\n\tTone.PolySynth.prototype._getClosestVoice = function(time, note){\n\t\t//play the note which has the same frequency, if that exists\n\t\tvar sameNote = this.voices.find(function(voice){\n\t\t\t//break if it's within a small epsion of the voice's frequency\n\t\t\tif (Math.abs(voice.frequency.getValueAtTime(time) - Tone.Frequency(note)) < 1e-4 && \n\t\t\t\t//and that note is currently active\n\t\t\t\tvoice.getLevelAtTime(time) > 1e-5){\n\t\t\t\treturn voice;\n\t\t\t} \n\t\t});\n\t\tif (sameNote){\n\t\t\treturn sameNote;\n\t\t}\n\n\t\tvar sortedVoices = this.voices.slice().sort(function(a, b){\n\t\t\t//check that it's not scheduled in the future\n\t\t\tvar aLevel = a.getLevelAtTime(time + this.blockTime);\n\t\t\tvar bLevel = b.getLevelAtTime(time + this.blockTime);\n\n\t\t\tvar silenceThresh = 1e-5;\n\t\t\tif (aLevel < silenceThresh){\n\t\t\t\taLevel = 0;\n\t\t\t}\n\t\t\tif (bLevel < silenceThresh){\n\t\t\t\tbLevel = 0;\n\t\t\t}\n\t\t\treturn aLevel - bLevel;\n\t\t}.bind(this));\n\n\t\treturn sortedVoices[0];\n\t};\n\n\t/**\n\t *  Trigger the attack portion of the note\n\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t *                                  Frequency or an array of frequencies.\n\t *  @param  {Time} [time=now]  The start time of the note.\n\t *  @param {number} [velocity=1] The velocity of the note.\n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * //trigger a chord immediately with a velocity of 0.2\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t */\n\tTone.PolySynth.prototype.triggerAttack = function(notes, time, velocity){\n\t\tif (!Array.isArray(notes)){\n\t\t\tnotes = [notes];\n\t\t}\n\t\ttime = this.toSeconds(time);\n\t\tnotes.forEach(function(note){\n\t\t\tvar voice = this._getClosestVoice(time, note);\n\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\tthis.log(\"triggerAttack\", voice.index, note);\n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the release of the note. Unlike monophonic instruments,\n\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t *                                  Frequency or an array of frequencies.\n\t *  @param  {Time} [time=now]  When the release will be triggered.\n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t */\n\tTone.PolySynth.prototype.triggerRelease = function(notes, time){\n\t\tif (!Array.isArray(notes)){\n\t\t\tnotes = [notes];\n\t\t}\n\t\ttime = this.toSeconds(time);\n\t\tnotes.forEach(function(note){\n\t\t\tvar voice = this._getClosestVoice(time, note);\n\t\t\tthis.log(\"triggerRelease\", voice.index, note);\n\t\t\tvoice.triggerRelease(time);\n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Trigger the attack and release after the specified duration\n\t *\n\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t *                                  Frequency or an array of frequencies.\n\t *  @param  {Time} duration the duration of the note\n\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * //trigger a chord for a duration of a half note\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t *  @example\n\t * //can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t */\n\tTone.PolySynth.prototype.triggerAttackRelease = function(notes, duration, time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, time, velocity);\n\t\tif (Tone.isArray(duration) && Tone.isArray(notes)){\n\t\t\tfor (var i = 0; i < notes.length; i++){\n\t\t\t\tvar d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(notes[i], time + this.toSeconds(d));\n\t\t\t}\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, time + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tTone.PolySynth.prototype.sync = function(){\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set a member/attribute of the voices.\n\t *  @param {Object|string} params\n\t *  @param {number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * poly.set({\n\t * \t\"filter\" : {\n\t * \t\t\"type\" : \"highpass\"\n\t * \t},\n\t * \t\"envelope\" : {\n\t * \t\t\"attack\" : 0.25\n\t * \t}\n\t * });\n\t */\n\tTone.PolySynth.prototype.set = function(params, value, rampTime){\n\t\tfor (var i = 0; i < this.voices.length; i++){\n\t\t\tthis.voices[i].set(params, value, rampTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the synth's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t *  @param {Array=} params the parameters to get, otherwise will return\n\t *  \t\t\t\t\t   all available.\n\t */\n\tTone.PolySynth.prototype.get = function(params){\n\t\treturn this.voices[0].get(params);\n\t};\n\n\t/**\n\t *  Trigger the release portion of all the currently active voices.\n\t *  @param {Time} [time=now] When the notes should be released.\n\t *  @return {Tone.PolySynth} this\n\t */\n\tTone.PolySynth.prototype.releaseAll = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis.voices.forEach(function(voice){\n\t\t\tvoice.triggerRelease(time);\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.PolySynth} this\n\t */\n\tTone.PolySynth.prototype.dispose = function(){\n\t\tTone.Instrument.prototype.dispose.call(this);\n\t\tthis.voices.forEach(function(voice){\n\t\t\tvoice.dispose();\n\t\t});\n\t\tthis._writable(\"detune\");\n\t\tthis.detune.dispose();\n\t\tthis.detune = null;\n\t\tthis.voices = null;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The maximum number of notes that can be allocated\n\t *  to a polysynth.\n\t *  @type  {Number}\n\t *  @static\n\t */\n\tTone.PolySynth.MAX_POLYPHONY = 20;\n\n\treturn Tone.PolySynth;\n});\n","define([\"../core/Tone\", \"../instrument/Instrument\", \"../core/Buffers\", \"../source/BufferSource\"], function(Tone){\n\n\t/**\n\t * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.\n\t *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).\n\t * @param {Object} samples An object of samples mapping either Midi\n\t *                         Note Numbers or Scientific Pitch Notation\n\t *                         to the url of that sample.\n\t * @param {Function=} onload The callback to invoke when all of the samples are loaded.\n\t * @param {String=} baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t * @example\n\t * var sampler = new Tone.Sampler({\n\t * \t\"C3\" : \"path/to/C3.mp3\",\n\t * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n\t * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n\t * \t\"A3\" : \"path/to/A3.mp3\",\n\t * }, function(){\n\t * \t//sampler will repitch the closest sample\n\t * \tsampler.triggerAttack(\"D3\")\n\t * })\n\t * @extends {Tone.Instrument}\n\t */\n\tTone.Sampler = function(urls){\n\n\t\t// shift arguments over one. Those are the remainder of the options\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.shift();\n\t\tvar options = Tone.defaults(args, [\"onload\", \"baseUrl\"], Tone.Sampler);\n\t\tTone.Instrument.call(this, options);\n\n\t\tvar urlMap = {};\n\t\tfor (var note in urls){\n\t\t\tif (Tone.isNote(note)){\n\t\t\t\t//convert the note name to MIDI\n\t\t\t\tvar mid = Tone.Frequency(note).toMidi();\n\t\t\t\turlMap[mid] = urls[note];\n\t\t\t} else if (!isNaN(parseFloat(note))){\n\t\t\t\t//otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[note] = urls[note];\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Tone.Sampler: url keys must be the note's pitch\");\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * The stored and loaded buffers\n\t\t * @type {Tone.Buffers}\n\t\t * @private\n\t\t */\n\t\tthis._buffers = new Tone.Buffers(urlMap, options.onload, options.baseUrl);\n\n\t\t/**\n\t\t * The object of all currently playing BufferSources\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._activeSources = {};\n\n\t\t/**\n\t\t * The envelope applied to the beginning of the sample.\n\t\t * @type {Time}\n\t\t */\n\t\tthis.attack = options.attack;\n\n\t\t/**\n\t\t * The envelope applied to the end of the envelope.\n\t\t * @type {Time}\n\t\t */\n\t\tthis.release = options.release;\n\n\t\t/**\n\t\t *  The shape of the attack/release curve.\n\t\t *  Either \"linear\" or \"exponential\"\n\t\t *  @type {String}\n\t\t */\n\t\tthis.curve = options.curve;\n\t};\n\n\tTone.extend(Tone.Sampler, Tone.Instrument);\n\n\t/**\n\t * The defaults\n\t * @const\n\t * @type {Object}\n\t */\n\tTone.Sampler.defaults = {\n\t\t\"attack\" : 0,\n\t\t\"release\" : 0.1,\n\t\t\"onload\" : Tone.noOp,\n\t\t\"baseUrl\" : \"\",\n\t\t\"curve\" : \"exponential\"\n\t};\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t * @param  {Midi} midi\n\t * @return {Interval}\n\t * @private\n\t */\n\tTone.Sampler.prototype._findClosest = function(midi){\n\t\t//searches within 8 octaves of the given midi note\n\t\tvar MAX_INTERVAL = 96; \n\t\tvar interval = 0;\n\t\twhile (interval < MAX_INTERVAL){\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)){\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)){\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\treturn null;\n\t};\n\n\t/**\n\t * @param  {Frequency} note     The note to play\n\t * @param  {Time=} time     When to play the note\n\t * @param  {NormalRange=} velocity The velocity to play the sample back.\n\t * @return {Tone.Sampler}          this\n\t */\n\tTone.Sampler.prototype.triggerAttack = function(notes, time, velocity){\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)){\n\t\t\tnotes = [notes];\n\t\t}\n\t\tfor (var i = 0; i < notes.length; i++){ \n\t\t\tvar midi = Tone.Frequency(notes[i]).toMidi();\n\t\t\t// find the closest note pitch\n\t\t\tvar difference = this._findClosest(midi);\n\t\t\tif (difference !== null){\n\t\t\t\tvar closestNote = midi - difference;\n\t\t\t\tvar buffer = this._buffers.get(closestNote);\n\t\t\t\tvar playbackRate = Tone.intervalToFrequencyRatio(difference);\n\t\t\t\t// play that note\n\t\t\t\tvar source = new Tone.BufferSource({\n\t\t\t\t\t\"buffer\" : buffer,\n\t\t\t\t\t\"playbackRate\" : playbackRate,\n\t\t\t\t\t\"fadeIn\" : this.attack,\n\t\t\t\t\t\"fadeOut\" : this.release,\n\t\t\t\t\t\"curve\" : this.curve,\n\t\t\t\t}).connect(this.output);\n\t\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t\t// add it to the active sources\n\t\t\t\tif (!Tone.isArray(this._activeSources[midi])){\n\t\t\t\t\tthis._activeSources[midi] = [];\n\t\t\t\t}\n\t\t\t\tthis._activeSources[midi].push(source);\n\n\t\t\t\t//remove it when it's done\n\t\t\t\tsource.onended = function(){\n\t\t\t\t\tif (this._activeSources && this._activeSources[midi]){\n\t\t\t\t\t\tvar index = this._activeSources[midi].indexOf(source);\n\t\t\t\t\t\tif (index !== -1){\n\t\t\t\t\t\t\tthis._activeSources[midi].splice(index, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}.bind(this);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * @param  {Frequency} note     The note to release.\n\t * @param  {Time=} time     \tWhen to release the note.\n\t * @return {Tone.Sampler}\tthis\n\t */\n\tTone.Sampler.prototype.triggerRelease = function(notes, time){\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)){\n\t\t\tnotes = [notes];\n\t\t}\n\t\tfor (var i = 0; i < notes.length; i++){  \n\t\t\tvar midi = Tone.Frequency(notes[i]).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources[midi] && this._activeSources[midi].length){\n\t\t\t\tvar source = this._activeSources[midi].shift();\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsource.stop(time);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  {Time=} time     \tWhen to release the notes.\n\t * @return {Tone.Sampler}\tthis\n\t */\n\tTone.Sampler.prototype.releaseAll = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tfor (var note in this._activeSources){\n\t\t\tvar sources = this._activeSources[note];\n\t\t\twhile (sources.length){\n\t\t\t\tvar source = sources.shift();\n\t\t\t\tsource.stop(time);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)\n\t * will be scheduled along the transport.\n\t * @example\n\t * synth.sync()\n\t * //schedule 3 notes when the transport first starts\n\t * synth.triggerAttackRelease('8n', 0)\n\t * synth.triggerAttackRelease('8n', '8n')\n\t * synth.triggerAttackRelease('8n', '4n')\n\t * //start the transport to hear the notes\n\t * Transport.start()\n\t * @returns {Tone.Instrument} this\n\t */\n\tTone.Sampler.prototype.sync = function(){\n\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  {Frequency} note     The note to play\n\t * @param  {Time} duration The time the note should be held\n\t * @param  {Time=} time     When to start the attack\n\t * @param  {NormalRange} [velocity=1] The velocity of the attack\n\t * @return {Tone.Sampler}          this\n\t */\n\tTone.Sampler.prototype.triggerAttackRelease = function(notes, duration, time, velocity){\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, time, velocity);\n\t\tif (Tone.isArray(duration) && Tone.isArray(notes)){\n\t\t\tfor (var i = 0; i < notes.length; i++){\n\t\t\t\tvar d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(notes[i], time + this.toSeconds(d));\n\t\t\t}\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, time + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Add a note to the sampler.\n\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke\n\t *                                 when the url is loaded.\n\t */\n\tTone.Sampler.prototype.add = function(note, url, callback){\n\t\tif (Tone.isNote(note)){\n\t\t\t//convert the note name to MIDI\n\t\t\tvar mid = Tone.Frequency(note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else if (!isNaN(parseFloat(note))){\n\t\t\t//otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t} else {\n\t\t\tthrow new Error(\"Tone.Sampler: note must be the note's pitch. Instead got \"+note);\n\t\t}\n\t};\n\n\t/**\n\t * If the buffers are loaded or not\n\t * @memberOf Tone.Sampler#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Sampler.prototype, \"loaded\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._buffers.loaded;\n\t\t}\n\t});\n\n\t/**\n\t * Clean up\n\t * @return {Tone.Sampler} this\n\t */\n\tTone.Sampler.prototype.dispose = function(){\n\t\tTone.Instrument.prototype.dispose.call(this);\n\t\tthis._buffers.dispose();\n\t\tthis._buffers = null;\n\t\tfor (var midi in this._activeSources){\n\t\t\tthis._activeSources[midi].forEach(function(source){\n\t\t\t\tsource.dispose();\n\t\t\t});\n\t\t}\n\t\tthis._activeSources = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Sampler;\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\tif (Tone.supported){\n\t\tif (!OscillatorNode.prototype.setPeriodicWave){\n\t\t\tOscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t\t}\n\t\tif (!AudioContext.prototype.createPeriodicWave){\n\t\t\tAudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t\t}\n\t}\n\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../signal/Signal\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t *         See also Tone.AudioToGain. \n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @example\n\t * var g2a = new Tone.GainToAudio();\n\t */\n\tTone.GainToAudio = function(){\n\n\t\tTone.SignalBase.call(this);\n\t\t\n\t\t/**\n\t\t *  @type {WaveShaperNode}\n\t\t *  @private\n\t\t */\n\t\tthis._norm = this.input = this.output = new Tone.WaveShaper(function(x){\n\t\t\treturn Math.abs(x) * 2 - 1;\n\t\t});\n\t};\n\n\tTone.extend(Tone.GainToAudio, Tone.SignalBase);\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.GainToAudio} this\n\t */\n\tTone.GainToAudio.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._norm.dispose();\n\t\tthis._norm = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.GainToAudio;\n});\n","define([\"../core/Tone\", \"../signal/Add\", \"../signal/Multiply\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {number} inputMin the min input value\n\t *  @param {number} inputMax the max input value\n\t *  @example\n\t * var norm = new Tone.Normalize(2, 4);\n\t * var sig = new Tone.Signal(3).connect(norm);\n\t * //output of norm is 0.5. \n\t */\n\tTone.Normalize = function(inputMin, inputMax){\n\n\t\tTone.SignalBase.call(this);\n\t\t\n\t\t/**\n\t\t *  the min input value\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._inputMin = Tone.defaultArg(inputMin, 0);\n\n\t\t/**\n\t\t *  the max input value\n\t\t *  @type {number}\n\t\t *  @private\n\t\t */\n\t\tthis._inputMax = Tone.defaultArg(inputMax, 1);\n\n\t\t/**\n\t\t *  subtract the min from the input\n\t\t *  @type {Tone.Add}\n\t\t *  @private\n\t\t */\n\t\tthis._sub = this.input = new Tone.Add(0);\n\n\t\t/**\n\t\t *  divide by the difference between the input and output\n\t\t *  @type {Tone.Multiply}\n\t\t *  @private\n\t\t */\n\t\tthis._div = this.output = new Tone.Multiply(1);\n\n\t\tthis._sub.connect(this._div);\n\t\tthis._setRange();\n\t};\n\n\tTone.extend(Tone.Normalize, Tone.SignalBase);\n\n\t/**\n\t * The minimum value the input signal will reach.\n\t * @memberOf Tone.Normalize#\n\t * @type {number}\n\t * @name min\n\t */\n\tObject.defineProperty(Tone.Normalize.prototype, \"min\", {\n\t\tget : function(){\n\t\t\treturn this._inputMin;\n\t\t},\n\t\tset : function(min){\n\t\t\tthis._inputMin = min;\n\t\t\tthis._setRange();\n\t\t}\n\t});\n\n\t/**\n\t * The maximum value the input signal will reach.\n\t * @memberOf Tone.Normalize#\n\t * @type {number}\n\t * @name max\n\t */\n\tObject.defineProperty(Tone.Normalize.prototype, \"max\", {\n\t\tget : function(){\n\t\t\treturn this._inputMax;\n\t\t},\n\t\tset : function(max){\n\t\t\tthis._inputMax = max;\n\t\t\tthis._setRange();\n\t\t}\n\t});\n\n\t/**\n\t *  set the values\n\t *  @private\n\t */\n\tTone.Normalize.prototype._setRange = function(){\n\t\tthis._sub.value = -this._inputMin;\n\t\tthis._div.value = 1 / (this._inputMax - this._inputMin);\n\t};\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Normalize} this\n\t */\n\tTone.Normalize.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._sub.dispose();\n\t\tthis._sub = null;\n\t\tthis._div.dispose();\n\t\tthis._div = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Normalize;\n});\n","define([\"../core/Tone\", \"../core/Transport\", \"../signal/Signal\", \"../type/TransportTime\"], function(Tone){\n\n\t/**\n\t * @class Tone.TransportTimelineSignal extends Tone.Signal, but adds the ability to synchronize the signal to the signal to the Tone.Transport\n\t * @extends {Tone.Signal}\n\t */\n\tTone.TransportTimelineSignal = function(){\n\t\tTone.Signal.apply(this, arguments);\n\n\t\t/**\n\t\t * The real signal output\n\t\t * @type {Tone.Signal}\n\t\t * @private\n\t\t */\n\t\tthis.output = this._outputSig = new Tone.Signal(this._initialValue);\n\n\t\t/**\n\t\t * Keep track of the last value. (small optimization)\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._lastVal = this.value;\n\n\t\t/**\n\t\t * The event id of the tick update loop\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._synced = Tone.Transport.scheduleRepeat(this._onTick.bind(this), \"1i\");\n\n\t\t/**\n\t\t * A bound version of the anchor value methods\n\t\t * @type {Function}\n\t\t * @private\n\t\t */\n\t\tthis._bindAnchorValue = this._anchorValue.bind(this);\n\t\tTone.Transport.on(\"start stop pause\", this._bindAnchorValue);\n\n\t\tthis._events.memory = Infinity;\n\t};\n\n\tTone.extend(Tone.TransportTimelineSignal, Tone.Signal);\n\n\t/**\n\t * Callback which is invoked every tick.\n\t * @private\n\t * @param  {Number} time\n\t * @return {Tone.TransportTimelineSignal}      this\n\t */\n\tTone.TransportTimelineSignal.prototype._onTick = function(time){\n\t\tvar val = this.getValueAtTime(Tone.Transport.seconds);\n\t\tif (this._lastVal !== val){\n\t\t\tthis._lastVal = val;\n\t\t\t//approximate ramp curves with linear ramps\n\t\t\tthis._outputSig.linearRampToValueAtTime(val, time);\n\t\t}\n\t};\n\n\t/**\n\t * Anchor the value at the start and stop of the Transport\n\t * @param  {Number} time The time of the event\n\t * @return {Tone.TransportTimelineSignal}      this\n\t * @private\n\t */\n\tTone.TransportTimelineSignal.prototype._anchorValue = function(time){\n\t\tvar val = this.getValueAtTime(Tone.Transport.seconds);\n\t\tthis._lastVal = val;\n\t\tthis._outputSig.cancelScheduledValues(time);\n\t\tthis._outputSig.setValueAtTime(val, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {TransportTime}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */\n\tTone.TransportTimelineSignal.prototype.getValueAtTime = function(time){\n\t\ttime = Tone.TransportTime(time);\n\t\treturn Tone.Signal.prototype.getValueAtTime.call(this, time);\n\t};\n\n\t/**\n\t * Set the output of the signal at the given time\n\t * @param  {Number} value The value to change to at the given time\n\t * @param  {TransportTime} time  The time to change the signal\n\t * @return {Tone.TransportTimelineSignal}       this\n\t */\n\tTone.TransportTimelineSignal.prototype.setValueAtTime = function(value, time){\n\t\ttime = Tone.TransportTime(time);\n\t\tTone.Signal.prototype.setValueAtTime.call(this, value, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Linear ramp to the given value from the previous scheduled point to the given value\n\t * @param  {Number} value The value to change to at the given time\n\t * @param  {TransportTime} time  The time to change the signal\n\t * @return {Tone.TransportTimelineSignal}       this\n\t */\n\tTone.TransportTimelineSignal.prototype.linearRampToValueAtTime = function(value, time){\n\t\ttime = Tone.TransportTime(time);\n\t\tTone.Signal.prototype.linearRampToValueAtTime.call(this, value, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Exponential ramp to the given value from the previous scheduled point to the given value\n\t * @param  {Number} value The value to change to at the given time\n\t * @param  {TransportTime} time  The time to change the signal\n\t * @return {Tone.TransportTimelineSignal}       this\n\t */\n\tTone.TransportTimelineSignal.prototype.exponentialRampToValueAtTime = function(value, time){\n\t\ttime = Tone.TransportTime(time);\n\t\tTone.Signal.prototype.exponentialRampToValueAtTime.call(this, value, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value\n\t *  @param {TransportTime} startTime\n\t *  @param {number} timeConstant\n\t * @return {Tone.TransportTimelineSignal}       this\n\t */\n\tTone.TransportTimelineSignal.prototype.setTargetAtTime = function(value, startTime, timeConstant){\n\t\tstartTime = Tone.TransportTime(startTime);\n\t\tTone.Signal.prototype.setTargetAtTime.call(this, value, startTime, timeConstant);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancels all scheduled parameter changes with times greater than or\n\t *  equal to startTime.\n\t *  @param  {TransportTime} startTime\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.TransportTimelineSignal.prototype.cancelScheduledValues = function(startTime){\n\t\tstartTime = Tone.TransportTime(startTime);\n\t\tTone.Signal.prototype.cancelScheduledValues.call(this, startTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t *  @param {Float32Array} values\n\t *  @param {Time} startTime\n\t *  @param {Time} duration\n\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t *  @returns {Tone.Signal} this\n\t */\n\tTone.TransportTimelineSignal.prototype.setValueCurveAtTime = function(values, startTime, duration, scaling){\n\t\tstartTime = Tone.TransportTime(startTime);\n\t\tduration = Tone.TransportTime(duration);\n\t\tTone.Signal.prototype.setValueCurveAtTime.call(this, values, startTime, duration, scaling);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n\t *  it holds the automated value at time until the next automated event.\n\t *  @param  {Time} time\n\t *  @returns {Tone.TransportTimelineSignal} this\n\t */\n\tTone.TransportTimelineSignal.prototype.cancelAndHoldAtTime = function(time){\n\t\treturn Tone.Signal.prototype.cancelAndHoldAtTime.call(this, Tone.TransportTime(time));\n\t};\n\n\t/**\n\t * Dispose and disconnect\n\t * @return {Tone.TransportTimelineSignal} this\n\t */\n\tTone.TransportTimelineSignal.prototype.dispose = function(){\n\t\tTone.Transport.clear(this._synced);\n\t\tTone.Transport.off(\"start stop pause\", this._syncedCallback);\n\t\tthis._events.cancel(0);\n\t\tTone.Signal.prototype.dispose.call(this);\n\t\tthis._outputSig.dispose();\n\t\tthis._outputSig = null;\n\t};\n\n\treturn Tone.TransportTimelineSignal;\n});\n","define([\"../core/Tone\", \"../source/Source\", \"../core/Buffer\", \"../source/BufferSource\"], function(Tone){\n\n\t/**\n\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n\t *        amount of time each small chunk of audio is played for and the overlap is the\n\t *        amount of crossfading transition time between successive grains.\n\t * @extends {Tone.Source}\n\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t */\n\tTone.GrainPlayer = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"url\", \"onload\"], Tone.GrainPlayer);\n\t\tTone.Source.call(this, options);\n\n\t\t/**\n\t\t *  The audio buffer belonging to the player.\n\t\t *  @type  {Tone.Buffer}\n\t\t */\n\t\tthis.buffer = new Tone.Buffer(options.url, options.onload);\n\n\t\t/**\n\t\t *  Create a repeating tick to schedule\n\t\t *  the grains.\n\t\t *  @type  {Tone.Clock}\n\t\t *  @private\n\t\t */\n\t\tthis._clock = new Tone.Clock(this._tick.bind(this), options.grainSize);\n\n\t\t/**\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._loopStart = 0;\n\n\t\t/**\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._loopEnd = 0;\n\n\t\t/**\n\t\t * All of the currently playing BufferSources\n\t\t * @type {Array}\n\t\t * @private\n\t\t */\n\t\tthis._activeSources = [];\n\n\t\t/**\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._playbackRate = options.playbackRate;\n\n\t\t/**\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._grainSize = options.grainSize;\n\n\t\t/**\n\t\t *  @private\n\t\t *  @type {Number}\n\t\t */\n\t\tthis._overlap = options.overlap;\n\n\t\t/**\n\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t *  @type  {Cents}\n\t\t */\n\t\tthis.detune = options.detune;\n\n\t\t//setup\n\t\tthis.overlap = options.overlap;\n\t\tthis.loop = options.loop;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.grainSize = options.grainSize;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.reverse = options.reverse;\n\n\t\tthis._clock.on(\"stop\", this._onstop.bind(this));\n\t};\n\n\tTone.extend(Tone.GrainPlayer, Tone.Source);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.GrainPlayer.defaults = {\n\t\t\"onload\" : Tone.noOp,\n\t\t\"overlap\" : 0.1,\n\t\t\"grainSize\" : 0.2,\n\t\t\"playbackRate\" : 1,\n\t\t\"detune\" : 0,\n\t\t\"loop\" : false,\n\t\t\"loopStart\" : 0,\n\t\t\"loopEnd\" : 0,\n\t\t\"reverse\" : false\n\t};\n\n\t/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration.\n\t *\n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at.\n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length\n\t *                                of the sample (minus any offset)\n\t *  @returns {Tone.GrainPlayer} this\n\t *  @memberOf Tone.GrainPlayer#\n\t *  @method start\n\t *  @name start\n\t */\n\n\t/**\n\t *  Internal start method\n\t *  @param {Time} time\n\t *  @param {Time} offset\n\t *  @private\n\t */\n\tTone.GrainPlayer.prototype._start = function(time, offset, duration){\n\t\toffset = Tone.defaultArg(offset, 0);\n\t\toffset = this.toSeconds(offset);\n\t\ttime = this.toSeconds(time);\n\n\t\tthis._offset = offset;\n\t\tthis._clock.start(time);\n\n\t\tif (duration){\n\t\t\tthis.stop(time + this.toSeconds(duration));\n\t\t}\n\t};\n\n\t/**\n\t *  Internal start method\n\t *  @param {Time} time\n\t *  @private\n\t */\n\tTone.GrainPlayer.prototype._stop = function(time){\n\t\tthis._clock.stop(time);\n\t};\n\n\t/**\n\t * Invoked when the clock is stopped\n\t * @param  {Number} time\n\t * @private\n\t */\n\tTone.GrainPlayer.prototype._onstop = function(time){\n\t\t//stop the players\n\t\tthis._activeSources.forEach(function(source){\n\t\t\tsource.fadeOut = 0;\n\t\t\tsource.stop(time);\n\t\t});\n\t};\n\n\t/**\n\t *  Invoked on each clock tick. scheduled a new\n\t *  grain at this time.\n\t *  @param  {Time}  time\n\t *  @private\n\t */\n\tTone.GrainPlayer.prototype._tick = function(time){\n\n\t\t//check if it should stop looping\n\t\tif (!this.loop && this._offset > this.buffer.duration){\n\t\t\tthis.stop(time);\n\t\t\treturn;\n\t\t}\n\n\t\t//at the beginning of the file, the fade in should be 0\n\t\tvar fadeIn = this._offset < this._overlap ? 0 : this._overlap;\n\n\t\t//create a buffer source\n\t\tvar source = new Tone.BufferSource({\n\t\t\t\"buffer\" : this.buffer,\n\t\t\t\"fadeIn\" : fadeIn,\n\t\t\t\"fadeOut\" : this._overlap,\n\t\t\t\"loop\" : this.loop,\n\t\t\t\"loopStart\" : this._loopStart,\n\t\t\t\"loopEnd\" : this._loopEnd,\n\t\t\t//compute the playbackRate based on the detune\n\t\t\t\"playbackRate\" : Tone.intervalToFrequencyRatio(this.detune / 100)\n\t\t}).connect(this.output);\n\n\t\tsource.start(time, this._offset);\n\t\tthis._offset += this.grainSize;\n\t\tsource.stop(time + this.grainSize / this.playbackRate);\n\n\t\t//add it to the active sources\n\t\tthis._activeSources.push(source);\n\t\t//remove it when it's done\n\t\tsource.onended = function(){\n\t\t\tvar index = this._activeSources.indexOf(source);\n\t\t\tif (index !== -1){\n\t\t\t\tthis._activeSources.splice(index, 1);\n\t\t\t}\n\t\t}.bind(this);\n\t};\n\n\t/**\n\t * The playback rate of the sample\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Positive}\n\t * @name playbackRate\n\t */\n\tObject.defineProperty(Tone.GrainPlayer.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._playbackRate = rate;\n\t\t\tthis.grainSize = this._grainSize;\n\t\t}\n\t});\n\n\t/**\n\t * The loop start time.\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name loopStart\n\t */\n\tObject.defineProperty(Tone.GrainPlayer.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn this._loopStart;\n\t\t},\n\t\tset : function(time){\n\t\t\tthis._loopStart = this.toSeconds(time);\n\t\t}\n\t});\n\n\t/**\n\t * The loop end time.\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name loopEnd\n\t */\n\tObject.defineProperty(Tone.GrainPlayer.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn this._loopEnd;\n\t\t},\n\t\tset : function(time){\n\t\t\tthis._loopEnd = this.toSeconds(time);\n\t\t}\n\t});\n\n\t/**\n\t * The direction the buffer should play in\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {boolean}\n\t * @name reverse\n\t */\n\tObject.defineProperty(Tone.GrainPlayer.prototype, \"reverse\", {\n\t\tget : function(){\n\t\t\treturn this.buffer.reverse;\n\t\t},\n\t\tset : function(rev){\n\t\t\tthis.buffer.reverse = rev;\n\t\t}\n\t});\n\n\t/**\n\t * The size of each chunk of audio that the\n\t * buffer is chopped into and played back at.\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name grainSize\n\t */\n\tObject.defineProperty(Tone.GrainPlayer.prototype, \"grainSize\", {\n\t\tget : function(){\n\t\t\treturn this._grainSize;\n\t\t},\n\t\tset : function(size){\n\t\t\tthis._grainSize = this.toSeconds(size);\n\t\t\tthis._clock.frequency.value = this._playbackRate / this._grainSize;\n\t\t}\n\t});\n\n\t/**\n\t * This is the duration of the cross-fade between\n\t * sucessive grains.\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name overlap\n\t */\n\tObject.defineProperty(Tone.GrainPlayer.prototype, \"overlap\", {\n\t\tget : function(){\n\t\t\treturn this._overlap;\n\t\t},\n\t\tset : function(time){\n\t\t\tthis._overlap = this.toSeconds(time);\n\t\t}\n\t});\n\n\t/**\n\t * If all the buffer is loaded\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.GrainPlayer.prototype, \"loaded\", {\n\t\tget : function(){\n\t\t\treturn this.buffer.loaded;\n\t\t}\n\t});\n\n\t/**\n\t * Clean up\n\t * @return {Tone.GrainPlayer} this\n\t */\n\tTone.GrainPlayer.prototype.dispose = function(){\n\t\tTone.Source.prototype.dispose.call(this);\n\t\tthis.buffer.dispose();\n\t\tthis.buffer = null;\n\t\tthis._clock.dispose();\n\t\tthis._clock = null;\n\t\tthis._activeSources.forEach(function(source){\n\t\t\tsource.dispose();\n\t\t});\n\t\tthis._activeSources = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.GrainPlayer;\n});\n","define([\"../core/Tone\", \"../source/Player\", \"../component/Volume\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Players combines multiple [Tone.Player](Player) objects.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Object} urls An object mapping a name to a url.\n\t *  @param {function=} onload The function to invoke when all buffers are loaded.\n\t */\n\tTone.Players = function(urls){\n\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.shift();\n\t\tvar options = Tone.defaults(args, [\"onload\"], Tone.Players);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The output volume node\n\t\t *  @type  {Tone.Volume}\n\t\t *  @private\n\t\t */\n\t\tthis._volume = this.output = new Tone.Volume(options.volume);\n\n\t\t/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */\n\t\tthis.volume = this._volume.volume;\n\t\tthis._readOnly(\"volume\");\n\n\t\t//make the output explicitly stereo\n\t\tthis._volume.output.output.channelCount = 2;\n\t\tthis._volume.output.output.channelCountMode = \"explicit\";\n\t\t//mute initially\n\t\tthis.mute = options.mute;\n\n\t\t/**\n\t\t * The container of all of the players\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._players = {};\n\n\t\t/**\n\t\t * The loading count\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._loadingCount = 0;\n\n\t\t/**\n\t\t * private holder of the fadeIn time\n\t\t * @type {Time}\n\t\t * @private\n\t\t */\n\t\tthis._fadeIn = options.fadeIn;\n\n\t\t/**\n\t\t * private holder of the fadeOut time\n\t\t * @type {Time}\n\t\t * @private\n\t\t */\n\t\tthis._fadeOut = options.fadeOut;\n\n\t\t//add all of the players\n\t\tfor (var name in urls){\n\t\t\tthis._loadingCount++;\n\t\t\tthis.add(name, urls[name], this._bufferLoaded.bind(this, options.onload));\n\t\t}\n\t};\n\n\tTone.extend(Tone.Players, Tone.AudioNode);\n\n\t/**\n\t * The default values\n\t * @type {Object}\n\t */\n\tTone.Players.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false,\n\t\t\"onload\" : Tone.noOp,\n\t\t\"fadeIn\" : 0,\n\t\t\"fadeOut\" : 0\n\t};\n\n\t/**\n\t *  A buffer was loaded. decrement the counter.\n\t *  @param  {Function}  callback\n\t *  @private\n\t */\n\tTone.Players.prototype._bufferLoaded = function(callback){\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback){\n\t\t\tcallback(this);\n\t\t}\n\t};\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tObject.defineProperty(Tone.Players.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */\n\tObject.defineProperty(Tone.Players.prototype, \"fadeIn\", {\n\t\tget : function(){\n\t\t\treturn this._fadeIn;\n\t\t},\n\t\tset : function(fadeIn){\n\t\t\tthis._fadeIn = fadeIn;\n\t\t\tthis._forEach(function(player){\n\t\t\t\tplayer.fadeIn = fadeIn;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */\n\tObject.defineProperty(Tone.Players.prototype, \"fadeOut\", {\n\t\tget : function(){\n\t\t\treturn this._fadeOut;\n\t\t},\n\t\tset : function(fadeOut){\n\t\t\tthis._fadeOut = fadeOut;\n\t\t\tthis._forEach(function(player){\n\t\t\t\tplayer.fadeOut = fadeOut;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t * @memberOf Tone.Players#\n\t * @type {String}\n\t * @name state\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Players.prototype, \"state\", {\n\t\tget : function(){\n\t\t\tvar playing = false;\n\t\t\tthis._forEach(function(player){\n\t\t\t\tplaying = playing || player.state === Tone.State.Started;\n\t\t\t});\n\t\t\treturn playing ? Tone.State.Started : Tone.State.Stopped;\n\t\t}\n\t});\n\n\t/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  {String|Number}  name  The key or index of the\n\t *                                 buffer.\n\t *  @return  {Boolean}\n\t */\n\tTone.Players.prototype.has = function(name){\n\t\treturn this._players.hasOwnProperty(name);\n\t};\n\n\t/**\n\t *  Get a player by name.\n\t *  @param  {String}  name  The players name as defined in\n\t *                          the constructor object or `add` method.\n\t *  @return  {Tone.Player}\n\t */\n\tTone.Players.prototype.get = function(name){\n\t\tif (this.has(name)){\n\t\t\treturn this._players[name];\n\t\t} else {\n\t\t\tthrow new Error(\"Tone.Players: no player named \"+name);\n\t\t}\n\t};\n\n\t/**\n\t * Iterate over all of the players\n\t * @param  {Function} callback\n\t * @return {Tone.Players}            this\n\t * @private\n\t */\n\tTone.Players.prototype._forEach = function(callback){\n\t\tfor (var playerName in this._players){\n\t\t\tcallback(this._players[playerName], playerName);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * If all the buffers are loaded or not\n\t * @memberOf Tone.Players#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Players.prototype, \"loaded\", {\n\t\tget : function(){\n\t\t\tvar isLoaded = true;\n\t\t\tthis._forEach(function(player){\n\t\t\t\tisLoaded = isLoaded && player.loaded;\n\t\t\t});\n\t\t\treturn isLoaded;\n\t\t}\n\t});\n\n\t/**\n\t *  Add a player by name and url to the Players\n\t *  @param  {String}    name      A unique name to give the player\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke\n\t *                                 when the url is loaded.\n\t */\n\tTone.Players.prototype.add = function(name, url, callback){\n\t\tthis._players[name] = new Tone.Player(url, callback).connect(this.output);\n\t\tthis._players[name].fadeIn = this._fadeIn;\n\t\tthis._players[name].fadeOut = this._fadeOut;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param {Time} time The time to stop all of the players.\n\t * @return {Tone.Players} this\n\t */\n\tTone.Players.prototype.stopAll = function(time){\n\t\tthis._forEach(function(player){\n\t\t\tplayer.stop(time);\n\t\t});\n\t};\n\n\t/**\n\t *  Dispose and disconnect.\n\t *  @return {Tone.Players} this\n\t */\n\tTone.Players.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis._writable(\"volume\");\n\t\tthis.volume = null;\n\t\tthis.output = null;\n\t\tthis._forEach(function(player){\n\t\t\tplayer.dispose();\n\t\t});\n\t\tthis._players = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Players;\n});\n","define([\"../core/Tone\", \"../component/Volume\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t *          and external microphone or audio input. Check\n\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t *          to see which browsers are supported. Access to an external input\n\t *          is limited to secure (HTTPS) connections.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @param {Decibels=} volume The level of the input\n\t *  @example\n\t * //list the inputs and open the third one\n\t * var motu = new Tone.UserMedia();\n\t *\n\t * //opening the input asks the user to activate their mic\n\t * motu.open().then(function(){\n\t * \t//promise resolves when input is available\n\t * });\n\t */\n\n\tTone.UserMedia = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"volume\"], Tone.UserMedia);\n\t\tTone.AudioNode.call(this);\n\n\t\t/**\n\t\t *  The MediaStreamNode\n\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t *  @private\n\t\t */\n\t\tthis._mediaStream = null;\n\n\t\t/**\n\t\t *  The media stream created by getUserMedia.\n\t\t *  @type {LocalMediaStream}\n\t\t *  @private\n\t\t */\n\t\tthis._stream = null;\n\n\t\t/**\n\t\t *  The open device\n\t\t *  @type  {MediaDeviceInfo}\n\t\t *  @private\n\t\t */\n\t\tthis._device = null;\n\n\t\t/**\n\t\t *  The output volume node\n\t\t *  @type  {Tone.Volume}\n\t\t *  @private\n\t\t */\n\t\tthis._volume = this.output = new Tone.Volume(options.volume);\n\n\t\t/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * input.volume.value = -6;\n\t\t */\n\t\tthis.volume = this._volume.volume;\n\t\tthis._readOnly(\"volume\");\n\n\t\tthis.mute = options.mute;\n\t};\n\n\tTone.extend(Tone.UserMedia, Tone.AudioNode);\n\n\t/**\n\t * the default parameters\n\t * @type {Object}\n\t */\n\tTone.UserMedia.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t *  Open the media stream. If a string is passed in, it is assumed\n\t *  to be the label or id of the stream, if a number is passed in,\n\t *  it is the input number of the stream.\n\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device.\n\t *                                                With no argument, the default stream is opened.\n\t *  @return {Promise} The promise is resolved when the stream is open.\n\t */\n\tTone.UserMedia.prototype.open = function(labelOrId){\n\t\t//close the previous stream\n\t\tif (this.state === Tone.State.Started){\n\t\t\tthis.close();\n\t\t}\n\t\treturn Tone.UserMedia.enumerateDevices().then(function(devices){\n\t\t\tvar device;\n\t\t\tif (Tone.isNumber(labelOrId)){\n\t\t\t\tdevice = devices[labelOrId];\n\t\t\t} else {\n\t\t\t\tdevice = devices.find(function(device){\n\t\t\t\t\treturn device.label === labelOrId || device.deviceId === labelOrId;\n\t\t\t\t});\n\t\t\t\t//didn't find a matching device\n\t\t\t\tif (!device && devices.length > 0){\n\t\t\t\t\tdevice = devices[0];\n\t\t\t\t} else if (!device && Tone.isDefined(labelOrId)){\n\t\t\t\t\tthrow new Error(\"Tone.UserMedia: no matching device: \"+labelOrId);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._device = device;\n\t\t\t//do getUserMedia\n\t\t\tvar constraints = {\n\t\t\t\taudio : {\n\t\t\t\t\t\"echoCancellation\" : false,\n\t\t\t\t\t\"sampleRate\" : this.context.sampleRate,\n\t\t\t\t\t\"noiseSuppression\" : false,\n\t\t\t\t\t\"mozNoiseSuppression\" : false,\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (device){\n\t\t\t\tconstraints.audio.deviceId = device.deviceId;\t\t\t\t\n\t\t\t}\n\t\t\treturn navigator.mediaDevices.getUserMedia(constraints).then(function(stream){\n\t\t\t\t//start a new source only if the previous one is closed\n\t\t\t\tif (!this._stream){\n\t\t\t\t\tthis._stream = stream;\n\t\t\t\t\t//Wrap a MediaStreamSourceNode around the live input stream.\n\t\t\t\t\tthis._mediaStream = this.context.createMediaStreamSource(stream);\n\t\t\t\t\t//Connect the MediaStreamSourceNode to a gate gain node\n\t\t\t\t\tthis._mediaStream.connect(this.output);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}.bind(this));\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Close the media stream\n\t *  @return {Tone.UserMedia} this\n\t */\n\tTone.UserMedia.prototype.close = function(){\n\t\tif (this._stream){\n\t\t\tthis._stream.getAudioTracks().forEach(function(track){\n\t\t\t\ttrack.stop();\n\t\t\t});\n\t\t\tthis._stream = null;\n\t\t\t//remove the old media stream\n\t\t\tthis._mediaStream.disconnect();\n\t\t\tthis._mediaStream = null;\n\t\t}\n\t\tthis._device = null;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Returns a promise which resolves with the list of audio input devices available.\n\t *  @return {Promise} The promise that is resolved with the devices\n\t *  @static\n\t *  @example\n\t * Tone.UserMedia.enumerateDevices().then(function(devices){\n\t * \tconsole.log(devices)\n\t * })\n\t */\n\tTone.UserMedia.enumerateDevices = function(){\n\t\treturn navigator.mediaDevices.enumerateDevices().then(function(devices){\n\t\t\treturn devices.filter(function(device){\n\t\t\t\treturn device.kind === \"audioinput\";\n\t\t\t});\n\t\t});\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t *  and \"stopped\" when the mic is closed.\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.UserMedia.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t\t}\n\t});\n\n\t/**\n\t * \tReturns an identifier for the represented device that is\n\t * \tpersisted across sessions. It is un-guessable by other applications and\n\t * \tunique to the origin of the calling application. It is reset when the\n\t * \tuser clears cookies (for Private Browsing, a different identifier is\n\t * \tused that is not persisted across sessions). Returns undefined when the\n\t * \tdevice is not open.\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name deviceId\n\t */\n\tObject.defineProperty(Tone.UserMedia.prototype, \"deviceId\", {\n\t\tget : function(){\n\t\t\tif (this._device){\n\t\t\t\treturn this._device.deviceId;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * \tReturns a group identifier. Two devices have the\n\t * \tsame group identifier if they belong to the same physical device.\n\t * \tReturns undefined when the device is not open.\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name groupId\n\t */\n\tObject.defineProperty(Tone.UserMedia.prototype, \"groupId\", {\n\t\tget : function(){\n\t\t\tif (this._device){\n\t\t\t\treturn this._device.groupId;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * \tReturns a label describing this device (for example \"Built-in Microphone\").\n\t * \tReturns undefined when the device is not open or label is not available\n\t * \tbecause of permissions.\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name groupId\n\t */\n\tObject.defineProperty(Tone.UserMedia.prototype, \"label\", {\n\t\tget : function(){\n\t\t\tif (this._device){\n\t\t\t\treturn this._device.label;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.UserMedia#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * userMedia.mute = true;\n\t */\n\tObject.defineProperty(Tone.UserMedia.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t * Clean up.\n\t * @return {Tone.UserMedia} this\n\t */\n\tTone.UserMedia.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.close();\n\t\tthis._writable(\"volume\");\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis.volume = null;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  If getUserMedia is supported by the browser.\n\t *  @type  {Boolean}\n\t *  @memberOf Tone.UserMedia#\n\t *  @name supported\n\t *  @static\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.UserMedia, \"supported\", {\n\t\tget : function(){\n\t\t\treturn Tone.isDefined(navigator.mediaDevices) && Tone.isFunction(navigator.mediaDevices.getUserMedia);\n\t\t}\n\t});\n\n\treturn Tone.UserMedia;\n});\n","define([\"../core/Tone\", \"../type/Frequency\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Midi is a primitive type for encoding Time values.\n\t *         Tone.Midi can be constructed with or without the `new` keyword. Tone.Midi can be passed\n\t *         into the parameter of any method which takes time as an argument.\n\t *  @constructor\n\t *  @extends {Tone.Frequency}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * var t = Tone.Midi(\"4n\");//a quarter note\n\t */\n\tTone.Midi = function(val, units){\n\t\tif (this instanceof Tone.Midi){\n\n\t\t\tTone.Frequency.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Midi(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Midi, Tone.Frequency);\n\n\t/**\n\t *  The default units if none are given.\n\t *  @type {String}\n\t *  @private\n\t */\n\tTone.Midi.prototype._defaultUnits = \"midi\";\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t *  @param {Frequency} freq\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Midi.prototype._frequencyToUnits = function(freq){\n\t\treturn Tone.Frequency.ftom(Tone.Frequency.prototype._frequencyToUnits.call(this, freq));\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Midi.prototype._ticksToUnits = function(ticks){\n\t\treturn Tone.Frequency.ftom(Tone.Frequency.prototype._ticksToUnits.call(this, ticks));\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Midi.prototype._beatsToUnits = function(beats){\n\t\treturn Tone.Frequency.ftom(Tone.Frequency.prototype._beatsToUnits.call(this, beats));\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Midi.prototype._secondsToUnits = function(seconds){\n\t\treturn Tone.Frequency.ftom(Tone.Frequency.prototype._secondsToUnits.call(this, seconds));\n\t};\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Tone.Midi(60).toMidi(); //60\n\t */\n\tTone.Midi.prototype.toMidi = function(){\n\t\treturn this.valueOf();\n\t};\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Tone.Midi(60).toFrequency(); //261.6255653005986\n\t */\n\tTone.Midi.prototype.toFrequency = function(){\n\t\treturn Tone.Frequency.mtof(this.toMidi());\n\t};\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @param  {Interval}  interval\n\t *  @return  {Tone.Frequency} A new transposed frequency\n\t *  @example\n\t * Tone.Midi(\"A4\").transpose(3); //\"C5\"\n\t */\n\tTone.Midi.prototype.transpose = function(interval){\n\t\treturn new this.constructor(this.toMidi() + interval);\n\t};\n\n\treturn Tone.Midi;\n});\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}